{"remainingRequest":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/src/components/InspectionItems.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/src/components/InspectionItems.vue","mtime":1661968702404},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/cache-loader/dist/cjs.js","mtime":1662622637759},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/babel-loader/lib/index.js","mtime":1662622637719},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/cache-loader/dist/cjs.js","mtime":1662622637759},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/vue-loader/lib/index.js","mtime":1662622639723}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}