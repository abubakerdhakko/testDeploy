{"remainingRequest":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/src/views/user-management/UserManagement.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/src/views/user-management/UserManagement.vue","mtime":1661968702448},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/vue-loader/lib/index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgppbXBvcnQgQ3JlYXRlVXNlciBmcm9tICIuL0NyZWF0ZVVzZXIudnVlIjsKaW1wb3J0IFVzZXJHcm91cCBmcm9tICIuL1VzZXJHcm91cC52dWUiOwppbXBvcnQgeyBBc3NldFBlcnNvbm5lbFNlcnZpY2UgfSBmcm9tICIuLi8uLi9zZXJ2aWNlcy9Bc3NldFBlcnNvbm5lbFNlcnZpY2UiOwppbXBvcnQgRW5kcG9pbnRzIGZyb20gIi4uLy4uL3NlcnZpY2VzL0VuZFBvaW50cyI7CmltcG9ydCBBdXRoU2VydmljZSBmcm9tICIuLi8uLi9zZXJ2aWNlcy9BdXRoU2VydmljZSI7CmltcG9ydCBtb21lbnQgZnJvbSAibW9tZW50IjsKaW1wb3J0IFBhc3N3b3JkQ2hhbmdlUG9wVXAgZnJvbSAiLi9wYXNzd29yZENoYW5nZVBvcFVwLnZ1ZSI7CmltcG9ydCBsb2FkZXIgZnJvbSAiQC9jb21wb25lbnRzL0xvYWRlci52dWUiOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIlVzZXJNYW5hZ2VtZW50IiwKCiAgY29tcG9uZW50czogewogICAgQ3JlYXRlVXNlciwKICAgIFVzZXJHcm91cCwKICAgIFBhc3N3b3JkQ2hhbmdlUG9wVXAsCiAgICBsb2FkZXIsCiAgfSwKICBwcm9wczogewogICAgLy8JdXNlckRldGFpbHM6e30KICB9LAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB0b2FzdEZsYWc6IDAsCiAgICAgIHRvYXN0TWVzc2FnZTogIiIsCiAgICAgIHRvYXN0VHlwZTogIiIsCiAgICAgIHNkdERhdGE6ICIiLAogICAgICB1c2VyRGV0YWlsczogIiIsCiAgICAgIHVzZXJLZXk6IDAsCiAgICAgIGlzQWN0aXZlOiBmYWxzZSwKICAgICAgbG9hZGVyRmxhZzogZmFsc2UsCiAgICAgIHN0YXRlRGlzYmFsZTogZmFsc2UsCiAgICAgIC8vIC0tLS0tLS0tLS0tLS0gVXNlciBNYW5hZ2VtZW50IFNEVCBEYXRhIFNUQVJUIC0tLS0tLS0tLS0tLS0tLS0KICAgICAgc2R0X3Rva2VuOiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJjdXJyZW50VXNlckRldGFpbHMiKSkKICAgICAgICAuYWNjZXNzX3Rva2VuLAogICAgICB1c2VyOiAiIiwKICAgICAgdXNlcm5hbWU6ICIiLAogICAgICBpc0xvYWRpbmdQYWdlOiBmYWxzZSwKICAgICAgaXNMb2FkaW5nOiBmYWxzZSwKICAgICAgcHJvbXB0OiBmYWxzZSwKICAgICAgdXNlclBhc3N3b3JkRGlhbG9nOiBmYWxzZSwKICAgICAgcHJvbXB0Vmlld05hbWU6ICIiLAogICAgICBzZXJ2ZXJEYXRhOiAiIiwKICAgICAgZmlsdGVyRmllbGRMaXN0OiBbXSwKICAgICAgZXZlbnREYXRhOiAiIiwKICAgICAgcGFyZW50U3lzdGVtU2V0dGluZ3M6IHsKICAgICAgICBzZXJ2aWNlVVJMOiBFbmRwb2ludHMucHJlZmVyZW5jZVNlcnZpY2UucHJlZmVyZW5jZSwKICAgICAgICAvLyAgIHNlcnZpY2VVUkw6ICJodHRwOi8vbG9jYWxob3N0OjgwOTkvcHJlZmVyZW5jZXMiLAogICAgICAgIGJ1dHRvbnM6IFtdLAogICAgICAgIHNlYXJjaFZhbHVlOiAiIiwKICAgICAgICBoZWlnaHQ6ICI5NTBweCIsCiAgICAgICAgc2VsZWN0aW9uQ29sdW1uOiBmYWxzZSwKICAgICAgICBzZWxlY3RUeXBlOiAiIiwKICAgICAgICBtb3JlT3B0aW9uczogW10sCiAgICAgICAgYWN0aW9uc09wdGlvbnM6IFsiVmlldyIsICJFZGl0IiwgIkNoYW5nZSBQYXNzd29yZCJdLAogICAgICAgIGNvbHVtbkljb25zOiBbXSwKICAgICAgICBwaWxsQ29uZmlnOiBbCiAgICAgICAgICB7IGNvbHVtbjogIiIsIHN0YXRlOiAic3VjY2VzcyIsIGRhdGE6ICIiIH0sCiAgICAgICAgICB7IGNvbHVtbjogIiIsIHN0YXRlOiAiZXJyb3IiLCBkYXRhOiAiIiB9LAogICAgICAgICAgeyBjb2x1bW46ICIiLCBzdGF0ZTogIm5vcm1hbCIsIGRhdGE6ICIiIH0sCiAgICAgICAgXSwKICAgICAgICBzdGF0aWNDb2x1bW5zOiBbXSwKICAgICAgICB1c2VyOiAiIiwKICAgICAgICB1cHBlcmNhc2VDb2x1bW5zOiBbXSwgLy8gcGFzcyBjb2x1bW4gbmFtZSB3aG9zZSBkYXRhIHNob3VsZCBiZSBzaG93biBpbiBjYXBzCiAgICAgICAgZGF0ZUZvcm1hdDogIkREL01NL1lZWVkgaGg6bW0gYSIsIC8vcGFzcyBhbnkgbW9tZW50IGRhdGUgZm9ybWF0IGhlcmUKICAgICAgfSwKICAgICAgcGFyZW50RGVmYXVsdFN5c3RlbVZpZXc6IHsKICAgICAgICB2aWV3TmFtZXM6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgbmFtZTogIkRlZmF1bHQgVmlldyIsCiAgICAgICAgICAgIHRpbGVGbGFnOiB0cnVlLAogICAgICAgICAgICBwb3NpdGlvbjogMSwKICAgICAgICAgICAgcHJpdmFjeTogInByaXZhdGUiLAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgbmFtZTogIkFkZCBBIFZpZXcgVGlsZSIsCiAgICAgICAgICAgIHRpbGVGbGFnOiB0cnVlLAogICAgICAgICAgICBwb3NpdGlvbjogMCwKICAgICAgICAgICAgcHJpdmFjeTogInByaXZhdGUiLAogICAgICAgICAgfSwKICAgICAgICBdLAoKICAgICAgICBkZWZhdWx0VGFibGU6IHsKICAgICAgICAgIGlkOiBudWxsLAogICAgICAgICAgdmlld05hbWU6ICJEZWZhdWx0IFZpZXciLAogICAgICAgICAgZGVuc2l0eTogIiIsCiAgICAgICAgICBwYWdlU2l6ZTogIiIsCiAgICAgICAgICBwYWdlTmFtZTogIiIsCiAgICAgICAgICB1c2VyOiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJjdXJyZW50VXNlckRldGFpbHMiKSkucHJvZmlsZQogICAgICAgICAgICAudXNlcm5hbWUsCiAgICAgICAgICBkZWZhdWx0Vmlld0ZsYWc6IHRydWUsCiAgICAgICAgICBzb3J0RmllbGQ6ICIiLAogICAgICAgICAgc29ydERpcmVjdGlvbjogIiIsCiAgICAgICAgICB0aWxlRmxhZzogdHJ1ZSwKICAgICAgICAgIGNvbHVtbnM6IFtdLAogICAgICAgICAgcG9zaXRpb246IDEsIC8vIGFsd2F5cyBwYXNzIDEKICAgICAgICAgIHByaXZhY3k6ICJwcml2YXRlIiwKICAgICAgICB9LAogICAgICB9LAogICAgICBwYXJlbnREYXRhOiBbXSwKICAgICAgZmlsdGVyQ291bnQ6ICIiLAogICAgICBmaWVsZE5hbWVzOltdLAogICAgICB0YWJsZUNvbmZpZzogbnVsbCwKICAgICAgLy8gLS0tLS0tLS0tLS0tLSBVc2VyIE1hbmFnZW1lbnQgU0RUIERhdGEgRU5EIC0tLS0tLS0tLS0tLS0tLS0KCiAgICAgIHZpZXdVc2VyRGlhbG9nOiBmYWxzZSwKICAgICAgcm9sZU9wdGlvbnM6IFtdLAogICAgICB1c2VySWQ6IG51bGwsCiAgICAgIHVzZXJNYW5hZ2VtZW50T3B0aW9uczogewogICAgICAgIHZhbHVlOiB0cnVlLAogICAgICAgIG9wdGlvbnM6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgbGFiZWw6ICJVc2VycyIsCiAgICAgICAgICAgIHZhbHVlOiAidXNlci1tYW5hZ2VtZW50IiwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGxhYmVsOiAiVXNlciBHcm91cHMiLAogICAgICAgICAgICB2YWx1ZTogInVzZXItZ3JvdXAiLAogICAgICAgICAgfSwKICAgICAgICBdLAogICAgICB9LAogICAgICBtYW5hZ2VtZW50VHlwZTogInVzZXItbWFuYWdlbWVudCIsCiAgICAgIG1hbmFnZU9wdGlvbjogInVzZXItbWFuYWdlbWVudCIsCiAgICAgIHVzZXJOYW1lT3B0aW9uczogW10sCiAgICAgIG9yZ0NvbmZpZ3NSZXNwb25zZTogbnVsbCwKICAgIH07CiAgfSwKCiAgbWV0aG9kczogewogICAgY2xvc2VVc2VyRGlhbG9nKCkgewogICAgICB0aGlzLnZpZXdVc2VyRGlhbG9nID0gZmFsc2U7CiAgICAgIHRoaXMudXNlcklkID0gbnVsbDsKICAgICAgdGhpcy5zdGF0ZURpc2JhbGUgPSBmYWxzZTsKICAgICAgdGhpcy51c2VyUGFzc3dvcmREaWFsb2cgPSBmYWxzZTsKICAgIH0sCgogICAgdmlld1VzZXIoKSB7CiAgICAgIHRoaXMudmlld1VzZXJEaWFsb2cgPSB0cnVlOwogICAgICB0aGlzLmZvcm1UaXRsZSA9ICJDcmVhdGUgVXNlciI7CiAgICB9LAoKICAgIGNsb3NlVXNlckdyb3VwRGlhbG9nKCkgewogICAgICB0aGlzLnZpZXdVc2VyR3JvdXBEaWFsb2cgPSBmYWxzZTsKICAgIH0sCgogICAgc2VsZWN0TWFuYWdlbWVudFR5cGUob2JqKSB7CiAgICAgIHRoaXMubWFuYWdlT3B0aW9uID0gb2JqLnZhbHVlOwogICAgfSwKCiAgICBvcGVuVXNlckRpYWxvZygpIHsKICAgICAgdGhpcy52aWV3VXNlcigpOwogICAgfSwKICAgIHJlc3BvbnNlTWVzc2FnZSh2YWx1ZSkgewogICAgICB0aGlzLnNob3dUb2FzdCh2YWx1ZSwgInN1Y2Nlc3MiKTsKICAgICAgdGhpcy5sb2FkVGFibGUodGhpcy5zZHREYXRhKTsKICAgIH0sCgogICAgLy8gIC0tLS0tLS0tLS0tLSBVc2VyIE1hbmFnZW1lbnQgU0RUIHN0YXJ0cyBoZXJlIC0tLS0tLS0tLS0tLS0KICAgIGNhdGNoRGVwYXJ0dXJlOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICB0aGlzLnNkdERhdGEgPSBkYXRhOwogICAgICBpZiAoZGF0YS5zdGF0dXMgPT0gMSB8fCBkYXRhLnN0YXR1cyA9PSAzKSB7CiAgICAgICAgdGhpcy5sb2FkVGFibGUoZGF0YSk7CiAgICAgIH0gZWxzZSBpZiAoZGF0YS5zdGF0dXMgPT0gNCkgewogICAgICAgIHRoaXMubG9hZFRhYmxlKGRhdGEpOwogICAgICB9IGVsc2UgaWYgKGRhdGEuc3RhdHVzID09IDEwKSB7CiAgICAgIH0KICAgIH0sCgogICAgc2V0VGFibGVDb25maWdzKCkgewogICAgICB0aGlzLnBhcmVudERlZmF1bHRTeXN0ZW1WaWV3LmRlZmF1bHRUYWJsZS5kZW5zaXR5ID0KICAgICAgICB0aGlzLnRhYmxlQ29uZmlnLmRlbnNpdHk7CiAgICAgIHRoaXMucGFyZW50RGVmYXVsdFN5c3RlbVZpZXcuZGVmYXVsdFRhYmxlLnBhZ2VTaXplID0KICAgICAgICB0aGlzLnRhYmxlQ29uZmlnLnBhZ2VTaXplOwogICAgICB0aGlzLnBhcmVudERlZmF1bHRTeXN0ZW1WaWV3LmRlZmF1bHRUYWJsZS5wYWdlTmFtZSA9CiAgICAgICAgdGhpcy50YWJsZUNvbmZpZy5wYWdlTmFtZTsKICAgICAgdGhpcy5wYXJlbnREZWZhdWx0U3lzdGVtVmlldy5kZWZhdWx0VGFibGUuc29ydEZpZWxkID0KICAgICAgICB0aGlzLnRhYmxlQ29uZmlnLnNvcnRGaWVsZDsKICAgICAgdGhpcy5wYXJlbnREZWZhdWx0U3lzdGVtVmlldy5kZWZhdWx0VGFibGUuc29ydERpcmVjdGlvbiA9CiAgICAgICAgdGhpcy50YWJsZUNvbmZpZy5zb3J0RGlyZWN0aW9uOwogICAgICB0aGlzLnBhcmVudERlZmF1bHRTeXN0ZW1WaWV3LmRlZmF1bHRUYWJsZS5jb2x1bW5zID0KICAgICAgICB0aGlzLnRhYmxlQ29uZmlnLmNvbHVtbnM7CiAgICB9LAoKICAgIHNldFN0YXRpY0NvbHVtbigpIHsKICAgICAgbGV0IHN0YXRpY0NvbCA9IHRoaXMudGFibGVDb25maWcuY29sdW1ucy5maWx0ZXIoCiAgICAgICAgKGNvbCkgPT4gY29sLmxhYmVsTmFtZSA9PSAiRmlyc3QgTmFtZSIKICAgICAgKVswXTsKICAgICAgdGhpcy5wYXJlbnRTeXN0ZW1TZXR0aW5ncy5zdGF0aWNDb2x1bW5zLnB1c2goc3RhdGljQ29sKTsKCiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50YWJsZUNvbmZpZy5jb2x1bW5zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKHRoaXMudGFibGVDb25maWcuY29sdW1uc1tpXS5sYWJlbE5hbWUgPT0gc3RhdGljQ29sLmxhYmVsTmFtZSkgewogICAgICAgICAgdGhpcy50YWJsZUNvbmZpZy5jb2x1bW5zLnNwbGljZShpLCAxKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHN0YXRpY0NvbCA9IHRoaXMudGFibGVDb25maWcuY29sdW1ucy5maWx0ZXIoCiAgICAgICAgKGNvbCkgPT4gY29sLmxhYmVsTmFtZSA9PSAiTGFzdCBOYW1lIgogICAgICApWzBdOwogICAgICB0aGlzLnBhcmVudFN5c3RlbVNldHRpbmdzLnN0YXRpY0NvbHVtbnMucHVzaChzdGF0aWNDb2wpOwoKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRhYmxlQ29uZmlnLmNvbHVtbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAodGhpcy50YWJsZUNvbmZpZy5jb2x1bW5zW2ldLmxhYmVsTmFtZSA9PSBzdGF0aWNDb2wubGFiZWxOYW1lKSB7CiAgICAgICAgICB0aGlzLnRhYmxlQ29uZmlnLmNvbHVtbnMuc3BsaWNlKGksIDEpOwogICAgICAgIH0KICAgICAgfQogICAgfSwKCiAgICBleHRyYWN0RmllbGROYW1lc0ZvclNlYXJjaFF1ZXJ5KGNvbmZpZyl7CiAgICAgICAgY29uZmlnLmNvbHVtbnMubWFwKGVsZW1lbnQgPT4gewogICAgICAgICAgdGhpcy5maWVsZE5hbWVzLnB1c2goZWxlbWVudC5maWVsZE5hbWUpCiAgICAgICAgfSk7CiAgICB9LAoKICAgIGxvYWRUYWJsZShzZHREYXRhKSB7CiAgICAgIGxldCBmaWx0ZXJzID0gW107CiAgICAgIHRoaXMubG9hZGVyRmxhZyA9IHRydWU7CiAgICAgIGZvciAobGV0IHNkdF9kYXRhIG9mIHNkdERhdGEubWVzc2FnZSkgewogICAgICAgIGlmKHNkdF9kYXRhLmZpZWxkTmFtZSAhPT0gImFjdGlvbnMiICl7CiAgICAgICAgICBsZXQgbmV3RGF0ZSA9ICIiOwogICAgICAgICAgaWYoc2R0X2RhdGEuZmllbGRUeXBlID09PSAiZGF0ZSIgJiYgc2R0X2RhdGEuZmlsdGVyVmFsdWUgIT09ICIiKXsKICAgICAgICAgICAgbGV0IGRhdGUgPSBzZHRfZGF0YS5maWx0ZXJWYWx1ZS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICBkYXRlID0gZGF0ZS5zcGxpdCgiLyIpOwogICAgICAgICAgICBuZXdEYXRlID0gbmV3IERhdGUoYCR7ZGF0ZVsxXX0vJHtkYXRlWzBdfS8ke2RhdGVbMl19YCkKICAgICAgICAgIH0KICAgICAgICAgIGlmKHNkdF9kYXRhLmZpbHRlclZhbHVlID09PSBudWxsKXsKICAgICAgICAgICAgc2R0X2RhdGEuZmlsdGVyVmFsdWUgPSAiIgogICAgICAgICAgfQogICAgICAgICAgZmlsdGVycy5wdXNoKHsKICAgICAgICAgICAgZmllbGROYW1lOiBzZHRfZGF0YS5maWVsZE5hbWUsCiAgICAgICAgICAgIGZpZWxkVHlwZTogc2R0X2RhdGEuZmllbGRUeXBlLAogICAgICAgICAgICBmaWx0ZXJWYWx1ZTpuZXdEYXRlID09PSBudWxsIHx8IG5ld0RhdGUgPT09ICIiID8gc2R0X2RhdGEuZmlsdGVyVmFsdWU6IG5ld0RhdGUuZ2V0VGltZSgpLAogICAgICAgICAgICBzZWNvbmRWYWx1ZTogc2R0X2RhdGEuc2Vjb25kVmFsdWUsCiAgICAgICAgICAgIGNvbXBhcmlzb25UeXBlOiBzZHRfZGF0YS5jb21wYXJpc29uVHlwZSwKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQoKICAgICAgdGhpcy5nZXRQYWdpbmF0ZWRVc2VyTWFuYWdlbWVudCgKICAgICAgICBmaWx0ZXJzLAogICAgICAgIHNkdERhdGEuZGF0YS5zb3J0RmllbGQsCiAgICAgICAgc2R0RGF0YS5kYXRhLnNvcnREaXJlY3Rpb24sCiAgICAgICAgc2R0RGF0YS5kYXRhLm9mZnNldCwKICAgICAgICBzZHREYXRhLmRhdGEubGltaXQsCiAgICAgICAgc2R0RGF0YS5kYXRhLnNlYXJjaFF1ZXJ5CiAgICAgICk7CiAgICB9LAoKICAgIGdldFBhZ2luYXRlZFVzZXJNYW5hZ2VtZW50KAogICAgICBmaWx0ZXJzLAogICAgICBzb3J0RmllbGQsCiAgICAgIHNvcnREaXJlY3Rpb24sCiAgICAgIG9mZnNldCwKICAgICAgbGltaXQsCiAgICAgIHNlYXJjaFF1ZXJ5CiAgICApIHsKICAgICAgbGV0IGN1cnJlbnRVc2VyRGV0YWlscyA9IEpTT04ucGFyc2UoCiAgICAgICAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oImN1cnJlbnRVc2VyRGV0YWlscyIpCiAgICAgICk7CgogICAgICBsZXQgcmVxdWVzdE9iaiA9IHsKICAgICAgICBzZWFyY2hRdWVyeTogc2VhcmNoUXVlcnksCiAgICAgICAgLy8gc2VhcmNoQ29sdW1uczogc2VhcmNoQ29sdW1ucywKICAgICAgICBmaWx0ZXJzOiBmaWx0ZXJzLAogICAgICAgIHNvcnRGaWVsZDogc29ydEZpZWxkLAogICAgICAgIHNvcnREaXJlY3Rpb246IHNvcnREaXJlY3Rpb24sCiAgICAgICAgb2Zmc2V0OiBvZmZzZXQsCiAgICAgICAgbGltaXQ6IGxpbWl0LAogICAgICAgIHRlbmFudFVVSUQ6IGN1cnJlbnRVc2VyRGV0YWlscy5wcm9maWxlLm9yZ2FuaXphdGlvbklkLAogICAgICAgIGZpZWxkTmFtZXM6dGhpcy5maWVsZE5hbWVzCiAgICAgIH07CgogICAgICBBc3NldFBlcnNvbm5lbFNlcnZpY2UuZ2V0UGFnaW5hdGVkVXNlcnNGb3JTRFQocmVxdWVzdE9iaikKICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT0gMjAwKSB7CiAgICAgICAgICAgIGxldCB1c2VycyA9IHJlc3BvbnNlLmRhdGEuc2R0RGF0YS5jb250ZW50OwogICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdXNlcnMubGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgICAgICAgaWYgKHVzZXJzW2luZGV4XS5jcmVhdGVkQXQpIHsKICAgICAgICAgICAgICAgIHVzZXJzW2luZGV4XS5jcmVhdGVkQXQgPSBtb21lbnQKICAgICAgICAgICAgICAgICAgLnV0Yyh1c2Vyc1tpbmRleF0uY3JlYXRlZEF0KQogICAgICAgICAgICAgICAgICAubG9jYWwoKQogICAgICAgICAgICAgICAgICAuZm9ybWF0KCdERC9NTS9ZWVlZIGhoOm1tIGEnKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5zZHREYXRhLm9mZnNldCA9IG9mZnNldCArIDE7CiAgICAgICAgICAgIHRoaXMubG9hZFNEVDIocmVzcG9uc2UsIHVzZXJzKTsKICAgICAgICAgICAgdGhpcy5sb2FkZXJGbGFnID0gZmFsc2U7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLmxvYWRlckZsYWcgPSBmYWxzZTsKICAgICAgICAgICAgdGhpcy5zaG93VG9hc3QoIk9vcHMgaXQgbG9va3MgbGlrZSBvdXIgc2VydmVyIGlzIG9mZmxpbmUiLCAiZXJyb3IiKTsKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHsKICAgICAgICAgIHRoaXMubG9hZGVyRmxhZyA9IGZhbHNlOwogICAgICAgICAgaWYgKGVycm9yLnJlc3BvbnNlICE9PSB1bmRlZmluZWQgJiYgZXJyb3IucmVzcG9uc2Uuc3RhdHVzID09PSA0MDYpIHsKICAgICAgICAgICAgdGhpcy5zaG93VG9hc3QoZXJyb3IucmVzcG9uc2UuZGF0YS5kZXNjcmlwdGlvbiwgImVycm9yIik7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9LAoKICAgIGxvYWRTRFQyKHJlc3BvbnNlLCBkYXRhKSB7CiAgICAgIHRoaXMucGFyZW50RGF0YSA9IGRhdGE7CiAgICAgIGxldCBldmVudERhdGEgPSB7CiAgICAgICAgZGF0YTogdGhpcy5wYXJlbnREYXRhLAogICAgICAgIHRvdGFsRWxlbWVudHM6IHJlc3BvbnNlLmRhdGEuc2R0RGF0YS50b3RhbEVsZW1lbnRzLAogICAgICAgIHRvdGFsUGFnZXM6IHJlc3BvbnNlLmRhdGEuc2R0RGF0YS50b3RhbFBhZ2VzLAogICAgICAgIHBhZ2VOdW1iZXI6IHJlc3BvbnNlLmRhdGEuc2R0RGF0YS5vZmZzZXQsCiAgICAgIH07CiAgICAgIHRoaXMuJHJlZnMudGVzdC5kYXRhTG9hZEV2ZW50KGV2ZW50RGF0YSk7CiAgICB9LAoKICAgIGdldEFjdGlvbnNPcHRpb24odmFsKSB7CiAgICAgIGlmICh2YWwudmFsdWUgPT0gIlZpZXciKSB7CiAgICAgICAgdGhpcy51c2VySWQgPSB2YWwucm93LnV1aWQ7CiAgICAgICAgdGhpcy5mb3JtVGl0bGUgPSB2YWwucm93LmZpcnN0TmFtZSArICIgIiArIHZhbC5yb3cubGFzdE5hbWU7CiAgICAgICAgdGhpcy5zdGF0ZURpc2JhbGUgPSB0cnVlOwogICAgICAgIHRoaXMuZ2V0VXNlckRldGFpbCgpOwogICAgICB9CiAgICAgIGlmICh2YWwudmFsdWUgPT0gIkVkaXQiKSB7CiAgICAgICAgdGhpcy51c2VySWQgPSB2YWwucm93LnV1aWQ7CiAgICAgICAgdGhpcy5zdGF0ZURpc2JhbGUgPSBmYWxzZTsKICAgICAgICB0aGlzLmZvcm1UaXRsZSA9ICJFZGl0IFVzZXIiOwogICAgICAgIHRoaXMuZ2V0VXNlckRldGFpbCgpOwogICAgICB9CiAgICAgIGlmICh2YWwudmFsdWUgPT0gIkNoYW5nZSBQYXNzd29yZCIpIHsKICAgICAgICB0aGlzLnVzZXJJZCA9IHZhbC5yb3cudXVpZDsKICAgICAgICB0aGlzLnVzZXJQYXNzd29yZERpYWxvZyA9IHRydWU7CiAgICAgIH0KICAgIH0sCiAgICBnZXRVc2VyRGV0YWlsKCkgewogICAgICB0aGlzLmlzQWN0aXZlID0gdHJ1ZTsKICAgICAgdGhpcy5sb2FkZXJGbGFnID0gdHJ1ZTsKICAgICAgQXNzZXRQZXJzb25uZWxTZXJ2aWNlLmdldFVzZXIodGhpcy51c2VySWQpCiAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAgICAgICB0aGlzLnVzZXJEZXRhaWxzID0gcmVzcG9uc2UuZGF0YS51c2VyUmVzcG9uc2U7CiAgICAgICAgICB0aGlzLnVzZXJLZXkrKzsKICAgICAgICAgIHRoaXMubG9hZGVyRmxhZyA9IGZhbHNlOwogICAgICAgICAgdGhpcy52aWV3VXNlckRpYWxvZyA9IHRydWU7CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKGUpID0+IHsKICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgIH0pOwogICAgfSwKCiAgICBnZXREb3dubG9hZEFzT3B0aW9uKG9wdCkgewogICAgICAvLyBjb25zb2xlLmxvZygnZG93bmxvYWQgYXMgb3B0aW9uJyxvcHQpOwogICAgICBpZiAob3B0Lm9wdGlvbiA9PSAicGRmIikgewogICAgICAgIC8vIG5vdGlmaWNhdGlvbkFuZENvbW11bmljYXRpb25TZXJ2aWNlLmRvd25sb2FkU2VsZWN0ZWRQREYob2JqKQogICAgICAgIC8vIC50aGVuKChyZXMpID0+IHsKICAgICAgICAvLyAvLyBjb25zb2xlLmxvZyhyZXMpCiAgICAgICAgLy8gbGV0IGZpbGVDb250ZW50cyA9IG51bGw7CiAgICAgICAgLy8gICAgIGxldCBwb3B1cFdpbj1udWxsOwogICAgICAgIC8vICAgICBwb3B1cFdpbiA9IHdpbmRvdy5vcGVuKCcnLCAnX2JsYW5rJywgJ3RvcD0wLGxlZnQ9MCxoZWlnaHQ9NzAwLHdpZHRoPTEwMDA7Jyk7CiAgICAgICAgLy8gICAgIGxldCBkb2N1bWVudCA9IHsKICAgICAgICAvLyAgICAgICAgICdkb2N1bWVudE5hbWUnOiAnQmlsbGluZycKICAgICAgICAvLyAgICAgfTsKICAgICAgICAvLyBmaWxlQ29udGVudHMgPSByZXMuZGF0YS50eXBlICsgcmVzLmRhdGEuY29udGVudDsKICAgICAgICAvLyAgIHBvcHVwV2luLmRvY3VtZW50LndyaXRlKGAKICAgICAgICAvLyAgICAgPGh0bWw+CiAgICAgICAgLy8gICAgICAgICA8aGVhZD4KICAgICAgICAvLyAgICAgICAgICA8IS0tdGl0bGU+UHJpbnQgdGFiPC90aXRsZS0tPgogICAgICAgIC8vICAgICAgICAgICAgIDxzdHlsZT4KICAgICAgICAvLyAgICAgICAgICAgICAgICAgI2J1dHRvbnN7ZGlzcGxheTpub25lO30KICAgICAgICAvLyAgICAgICAgICAgICAgICAgIGJvZHkgewogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6ICJPcGVuIFNhbnMiLCAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsICJTZWdvZSBVSSIsIEV1Y2xpZCBDaXJjdWxhciBCLCAiSGVsdmV0aWNhIE5ldWUiLCBBcmlhbCwgc2Fucy1zZXJpZiwgIkFwcGxlIENvbG9yIEVtb2ppIiwgIlNlZ29lIFVJIEVtb2ppIiwgIlNlZ29lIFVJIFN5bWJvbCI7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDFyZW07CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNDAwOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjMjEyNTI5OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0KICAgICAgICAvLyAgICAgICAgICAgICAgICAgYnV0dG9uLCBtZXRlciwgcHJvZ3Jlc3MgewogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgLXdlYmtpdC13cml0aW5nLW1vZGU6IGhvcml6b250YWwtdGIgIWltcG9ydGFudDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgfQogICAgICAgIC8vICAgICAgICAgICAgICAgICBpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCwgYnV0dG9uIHsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRleHQtcmVuZGVyaW5nOiBhdXRvOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGluaXRpYWw7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogbm9ybWFsOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgd29yZC1zcGFjaW5nOiBub3JtYWw7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRleHQtaW5kZW50OiAwcHg7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0ZXh0LXNoYWRvdzogbm9uZTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IHN0YXJ0OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwZW07CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBmb250OiA0MDAgMTMuMzMzM3B4IEFyaWFsOwogICAgICAgIC8vICAgICAgICAgICAgICAgICB9CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGlucHV0W3R5cGU9ImJ1dHRvbiIgaV0sIGlucHV0W3R5cGU9InN1Ym1pdCIgaV0sIGlucHV0W3R5cGU9InJlc2V0IiBpXSwgaW5wdXRbdHlwZT0iZmlsZSIgaV06Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uLCBidXR0b24gewogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IGRlZmF1bHQ7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBjb2xvcjogYnV0dG9udGV4dDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IGJ1dHRvbmZhY2U7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMnB4IDZweCAzcHg7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBib3JkZXItd2lkdGg6IDJweDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1zdHlsZTogb3V0c2V0OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiBidXR0b25mYWNlOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWltYWdlOiBpbml0aWFsOwogICAgICAgIC8vICAgICAgICAgICAgICAgICB9CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGlucHV0LCBidXR0b24sIHNlbGVjdCwgb3B0Z3JvdXAsIHRleHRhcmVhIHsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBpbmhlcml0OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiBpbmhlcml0OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0KICAgICAgICAvLyAgICAgICAgICAgICAgICAgYnV0dG9uLCBzZWxlY3QgewogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0KICAgICAgICAvLyAgICAgICAgICAgICAgICAgLmJ0biB7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNDAwOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwLjM3NXJlbSAwLjc1cmVtOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxcmVtOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuMTVzIGVhc2UtaW4tb3V0LCBib3JkZXItY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQsIGJveC1zaGFkb3cgMC4xNXMgZWFzZS1pbi1vdXQ7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0KICAgICAgICAvLyAgICAgICAgICAgICAgICAgLmJ0bi1vdXRsaW5lLXByaW1hcnkgewogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICMwMDdiZmY7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6ICMwMDdiZmY7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0KICAgICAgICAvLyAgICAgICAgICAgICAgICAgLmJ0bi1vdXRsaW5lLXByaW1hcnkgewogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6ICNkMDMyMzI7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDAzMjMyOwogICAgICAgIC8vICAgICAgICAgICAgICAgICB9CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUgewogICAgICAgIC8vICAgICAgICAgICAgICAgICB9CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIDxzdHlsZT4uZmEgewogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZm9udDogbm9ybWFsIG5vcm1hbCBub3JtYWwgMTRweC8xIEZvbnRBd2Vzb21lOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiBpbmhlcml0OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGV4dC1yZW5kZXJpbmc6IGF1dG87CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH08L3N0eWxlPgogICAgICAgIC8vICAgICAgICAgICAgICAgICA8c3R5bGU+KiwgKjo6YmVmb3JlLCAqOjphZnRlciB7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgICAgIC8vICAgICAgICAgICAgICAgICB9CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIFN0eWxlIEF0dHJpYnV0ZSB7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0KICAgICAgICAvLyAgICAgICAgICAgICAgICAgLmJ0biwgLmZvcm0tY29udHJvbCB7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwLjI1cmVtIDAuNXJlbTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMC44NzVyZW07CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMS41OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMC4zcmVtOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAxNXB4OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAyM3B4OwogICAgICAgIC8vICAgICAgICAgICAgICAgICB9PC9zdHlsZT4KICAgICAgICAvLyAgICAgICAgICAgICA8L3N0eWxlPgogICAgICAgIC8vICAgICAgICAgPC9oZWFkPgogICAgICAgIC8vICAgICAgICAgPGJvZHkgb25sb2FkPSIiPgogICAgICAgIC8vICAgICAgICAgICAgIDxkaXYgc3R5bGU9InRleHQtYWxpZ246cmlnaHQ7IiA+CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIDxhIGhyZWY9IiR7ZmlsZUNvbnRlbnRzfSIgZG93bmxvYWQ9IiR7ZG9jdW1lbnQuZG9jdW1lbnROYW1lfSI+PGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1zbSBidG4tb3V0bGluZS1wcmltYXJ5Ij5Eb3dubG9hZDwvYnV0dG9uPjwvYT4KICAgICAgICAvLyAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAvLyAgICAgICAgICAgICA8YnI+CiAgICAgICAgLy8gICAgICAgICAgICAgPGlmcmFtZSBzcmM9JyR7ZmlsZUNvbnRlbnRzfScgIHN0eWxlPSJtaW4td2lkdGg6IDEwMCU7aGVpZ2h0OiAxMDAlOyIgPjwvaWZyYW1lPgogICAgICAgIC8vICAgICAgICAgPC9ib2R5PgogICAgICAgIC8vICAgICA8L2h0bWw+YAogICAgICAgIC8vICk7CiAgICAgICAgLy8gfSkKICAgICAgICAvLyAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coZXJyKSk7CiAgICAgIH0gZWxzZSBpZiAob3B0Lm9wdGlvbiA9PSAiY3N2IikgewogICAgICAgIC8vICBsZXQgZmlsZVRpdGxlID0gJ0JpbGxpbmdzJzsKICAgICAgICAvLyAgbGV0IGhlYWRlcnMgPSB7CiAgICAgICAgLy8gICAgICAgY3JlYXRlZERhdGU6ICdSZXF1ZXN0ZWQgT24nLnJlcGxhY2UoLywvZywgJycpLCAvLyByZW1vdmUgY29tbWFzIHRvIGF2b2lkIGVycm9ycwogICAgICAgIC8vICAgICAgIGR1ZURhdGU6ICJEdWUgRGF0ZSIsCiAgICAgICAgLy8gICAgICAgc2hpcG1lbnROdW1iZXI6ICJTaGlwbWVudCAjIiwKICAgICAgICAvLyAgICAgICAgcG9ydE9mTG9hZGluZzogIlBvcnQgb2YgTG9hZCIsCiAgICAgICAgLy8gICAgICAgIHBvcnRPZkRpc2NoYXJnZTogIlBvcnQgT2YgRGlzY2hhcmdlIiwKICAgICAgICAvLyAgICAgICAgYW1vdW50OiAiQW1vdW50IiwKICAgICAgICAvLyAgICAgICAgYmFsYW5jZTogIkJhbGFuY2UiLAogICAgICAgIC8vICAgICAgICBuZXRzdWl0ZVN0YXR1czogIlN0YXR1cyIKICAgICAgICAvLyAgfTsKICAgICAgICAvLyAgbGV0IGRhdGFPYmogPSBbXTsKICAgICAgICAvLyAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHQucm93cy5sZW5ndGg7IGkrKykgewogICAgICAgIC8vICAgICAgY29uc3QgYmlsbCA9IG9wdC5yb3dzW2ldOwogICAgICAgIC8vICAgICAgZGF0YU9iai5wdXNoKHsKICAgICAgICAvLyAgICAgICAgICBjcmVhdGVkRGF0ZTogYmlsbC5jcmVhdGVkRGF0ZSwKICAgICAgICAvLyAgICAgICAgICBkdWVEYXRlOiBiaWxsLmR1ZURhdGUsCiAgICAgICAgLy8gICAgICAgICAgc2hpcG1lbnROdW1iZXI6IGJpbGwuc2hpcG1lbnROdW1iZXIsCiAgICAgICAgLy8gICAgICAgICAgcG9ydE9mTG9hZGluZzogYmlsbC5wb3J0T2ZMb2FkaW5nLAogICAgICAgIC8vICAgICAgICAgIHBvcnRPZkRpc2NoYXJnZTogYmlsbC5wb3J0T2ZEaXNjaGFyZ2UsCiAgICAgICAgLy8gICAgICAgICAgYW1vdW50OiBiaWxsLmFtb3VudCwKICAgICAgICAvLyAgICAgICAgICBiYWxhbmNlOiBiaWxsLmJhbGFuY2UsCiAgICAgICAgLy8gICAgICAgICAgbmV0c3VpdGVTdGF0dXM6IGJpbGwubmV0c3VpdGVTdGF0dXMKICAgICAgICAvLyAgICAgIH0pOwogICAgICAgIC8vICB9CiAgICAgICAgLy8gIHRoaXMuZXhwb3J0Q1NWRmlsZShoZWFkZXJzLCBkYXRhT2JqLCBmaWxlVGl0bGUpOwogICAgICB9CiAgICB9LAoKICAgIC8qIC0tLS0tLS0tLS0tLSBVc2VyIE1hbmFnZW1lbnQgU0RUIGVuZHMgaGVyZSAtLS0tLS0tLS0tLS0tICovCgogICAgc2hvd1RvYXN0KG1lc3NhZ2UsIHR5cGUpIHsKICAgICAgdGhpcy50b2FzdE1lc3NhZ2UgPSBtZXNzYWdlOwogICAgICB0aGlzLnRvYXN0VHlwZSA9IHR5cGU7CiAgICAgIHRoaXMudG9hc3RGbGFnKys7CiAgICB9LAogIH0sCgogIHdhdGNoOiB7CiAgICBtYW5hZ2VPcHRpb246IGZ1bmN0aW9uIChuZXdWYWwsIG9sZFZhbCkgewogICAgICBpZiAobmV3VmFsID09ICJ1c2VyLW1hbmFnZW1lbnQiKSB7CiAgICAgICAgbGV0IGFsbENvbmZpZ3MgPSBKU09OLnBhcnNlKHRoaXMub3JnQ29uZmlnc1Jlc3BvbnNlLmRhdGEudGFibGVDb25maWdzKTsKICAgICAgICBhbGxDb25maWdzID0gYWxsQ29uZmlncy5maWx0ZXIoCiAgICAgICAgICAoZGF0YSkgPT4gZGF0YS5wYWdlTmFtZSA9PT0gIlVzZXJNYW5hZ2VtZW50IgogICAgICAgIClbMF07CiAgICAgICAgdGhpcy50YWJsZUNvbmZpZyA9IGFsbENvbmZpZ3M7CiAgICAgIH0KICAgIH0sCiAgfSwKCiAgY3JlYXRlZCgpIHsKICAgIGRvY3VtZW50LnRpdGxlID0gdGhpcy4kcm91dGUubWV0YS50aXRsZTsKICAgIHRoaXMuY3VycmVudFVzZXJEZXRhaWxzID0gSlNPTi5wYXJzZSgKICAgICAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oImN1cnJlbnRVc2VyRGV0YWlscyIpCiAgICApOwoKICAgIC8vIHNlbmRpbmcgb25seSBmaXJzdCBhbmQgbGFzdCBuYW1lIGZvciBTRFQKICAgIGxldCBuYW1lID0gdGhpcy5jdXJyZW50VXNlckRldGFpbHMucHJvZmlsZS51c2VybmFtZTsKICAgIGlmIChuYW1lLmluY2x1ZGVzKCJAIikpIHsKICAgICAgbmFtZSA9IG5hbWUuc3BsaXQoIkAiKTsKICAgICAgbmFtZSA9IG5hbWVbMF07CiAgICB9CiAgICB0aGlzLnBhcmVudFN5c3RlbVNldHRpbmdzLnVzZXIgPSBuYW1lOwoKICAgIEF1dGhTZXJ2aWNlLmdldEFsbFJvbGVzKAogICAgICB0aGlzLmN1cnJlbnRVc2VyRGV0YWlscy5wcm9maWxlLm9yZ2FuaXphdGlvbklkCiAgICApLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAgIHRoaXMucm9sZU9wdGlvbnMgPSByZXNwb25zZS5kYXRhOwogICAgfSk7CiAgICBBc3NldFBlcnNvbm5lbFNlcnZpY2UuZ2V0QWxsVXNlcnMoCiAgICAgIHRoaXMuY3VycmVudFVzZXJEZXRhaWxzLnByb2ZpbGUub3JnYW5pemF0aW9uSWQKICAgICkudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJlc3BvbnNlLmRhdGEudXNlcnMubGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgbGV0IHVzZXIgPSB7CiAgICAgICAgICB1dWlkOiByZXNwb25zZS5kYXRhLnVzZXJzW2luZGV4XS51dWlkLAogICAgICAgICAgbmFtZToKICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS51c2Vyc1tpbmRleF0uZW1haWwgKwogICAgICAgICAgICAiICIgKwogICAgICAgICAgICAiKCIgKwogICAgICAgICAgICByZXNwb25zZS5kYXRhLnVzZXJzW2luZGV4XS5uYW1lICsKICAgICAgICAgICAgIikiLAogICAgICAgICAgdXNlck5hbWU6IHJlc3BvbnNlLmRhdGEudXNlcnNbaW5kZXhdLnVzZXJOYW1lLAogICAgICAgICAgZ2VuZGVyOiByZXNwb25zZS5kYXRhLnVzZXJzW2luZGV4XS5nZW5kZXIsCiAgICAgICAgICBmbmFtZTogcmVzcG9uc2UuZGF0YS51c2Vyc1tpbmRleF0ubmFtZSwKICAgICAgICAgIGVtYWlsOiByZXNwb25zZS5kYXRhLnVzZXJzW2luZGV4XS5lbWFpbCwKICAgICAgICAgIGNvbnRhY3Q6IHJlc3BvbnNlLmRhdGEudXNlcnNbaW5kZXhdLmNvbnRhY3ROdW1iZXIsCiAgICAgICAgICBjaXR5OiByZXNwb25zZS5kYXRhLnVzZXJzW2luZGV4XS5jaXR5LAogICAgICAgICAgc2VsZWN0ZWQ6IGZhbHNlLAogICAgICAgICAgbWFuYWdlcjogZmFsc2UsCiAgICAgICAgfTsKICAgICAgICB0aGlzLnVzZXJOYW1lT3B0aW9ucy5wdXNoKHVzZXIpOwogICAgICB9CiAgICB9KTsKICB9LAoKICBtb3VudGVkKCkgewogICAgbGV0IGN1cnJlbnRVc2VyRGV0YWlscyA9IEpTT04ucGFyc2UoCiAgICAgIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJjdXJyZW50VXNlckRldGFpbHMiKQogICAgKTsKICAgIGlmIChjdXJyZW50VXNlckRldGFpbHMgPT09IG51bGwpIHsKICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oImZvcmNlU2lnbm91dCIsICJ5ZXMiKTsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIC8vIHNlbmRpbmcgb25seSBmaXJzdCBhbmQgbGFzdCBuYW1lIGZvciBTRFQKICAgIGxldCBuYW1lID0gdGhpcy5jdXJyZW50VXNlckRldGFpbHMucHJvZmlsZS51c2VybmFtZTsKICAgIGlmIChuYW1lLmluY2x1ZGVzKCJAIikpIHsKICAgICAgbmFtZSA9IG5hbWUuc3BsaXQoIkAiKTsKICAgICAgbmFtZSA9IG5hbWVbMF07CiAgICB9CiAgICB0aGlzLnBhcmVudFN5c3RlbVNldHRpbmdzLnVzZXIgPSBuYW1lOwoKICAgIC8vIGZldGNoaW5nIGNvbmZpZ3MKICAgIGxldCB1dWlkID0gY3VycmVudFVzZXJEZXRhaWxzLnByb2ZpbGUub3JnYW5pemF0aW9uSWQ7CgogICAgQXNzZXRQZXJzb25uZWxTZXJ2aWNlLmdldE9yZ0NvbmZpZ3ModXVpZCwgInRhYmxlQ29uZmlncyIpCiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAgIHRoaXMub3JnQ29uZmlnc1Jlc3BvbnNlID0gcmVzcG9uc2U7CiAgICAgICAgbGV0IGFsbENvbmZpZ3MgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmRhdGEudGFibGVDb25maWdzKTsKICAgICAgICB0aGlzLnRhYmxlQ29uZmlnID0gYWxsQ29uZmlncy5maWx0ZXIoCiAgICAgICAgICAoZGF0YSkgPT4gZGF0YS5wYWdlTmFtZSA9PT0gIlVzZXJNYW5hZ2VtZW50IgogICAgICAgIClbMF07CiAgICAgICAgdGhpcy5leHRyYWN0RmllbGROYW1lc0ZvclNlYXJjaFF1ZXJ5KHRoaXMudGFibGVDb25maWcpCiAgICAgICAgdGhpcy5zZXRTdGF0aWNDb2x1bW4oKTsKICAgICAgICB0aGlzLnNldFRhYmxlQ29uZmlncygpOwogICAgICB9KQogICAgICAuY2F0Y2goKGVycm9yKSA9PiB7CiAgICAgICAgY29uc29sZS5sb2coIkVycm9yIGZldGNoaW5nIGNvbmZpZ3MiLCBlcnJvcik7CiAgICAgIH0pOwogIH0sCgogIHZhbGlkYXRpb25zOiBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4ge307CiAgfSwKCiAgY29tcHV0ZWQ6IHt9LAp9Owo="},null]}