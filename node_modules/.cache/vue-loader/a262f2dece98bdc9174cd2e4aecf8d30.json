{"remainingRequest":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/src/views/user-management/UserGroup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/src/views/user-management/UserGroup.vue","mtime":1661968702448},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/vue-loader/lib/index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBDcmVhdGVVc2VyR3JvdXAgZnJvbSAiLi9DcmVhdGVVc2VyR3JvdXAudnVlIjsKaW1wb3J0IHsgQXNzZXRQZXJzb25uZWxTZXJ2aWNlIH0gZnJvbSAiLi4vLi4vc2VydmljZXMvQXNzZXRQZXJzb25uZWxTZXJ2aWNlIjsKaW1wb3J0IEVuZHBvaW50cyBmcm9tICIuLi8uLi9zZXJ2aWNlcy9FbmRQb2ludHMiOwppbXBvcnQgbW9tZW50IGZyb20gIm1vbWVudCI7CmltcG9ydCBsb2FkZXIgZnJvbSAiQC9jb21wb25lbnRzL0xvYWRlci52dWUiOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIlVzZXJHcm91cCIsCgogIGNvbXBvbmVudHM6IHsKICAgIENyZWF0ZVVzZXJHcm91cCwKICAgIGxvYWRlciwKICB9LAoKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgdG9hc3RGbGFnOiAwLAogICAgICB0b2FzdE1lc3NhZ2U6ICIiLAogICAgICB0b2FzdFR5cGU6ICIiLAogICAgICBpc0FjdGl2ZTogZmFsc2UsCiAgICAgIHVzZXJHcm91cEtleTogMCwKICAgICAgdXNlckdyb3VwRGV0YWlsOiAiIiwKICAgICAgbG9hZGVyRmxhZzogZmFsc2UsCiAgICAgIHRhYmxlQ29uZmlnOiB7fSwKICAgICAgdmlld1VzZXJHcm91cERpYWxvZzogZmFsc2UsCiAgICAgIGN1cnJlbnRVc2VyRGV0YWlsczogbnVsbCwKICAgICAgcm9sZU9wdGlvbnM6IFtdLAogICAgICB1c2VyTmFtZU9wdGlvbnM6IFtdLAogICAgICBvcmdDb25maWdzUmVzcG9uc2U6IG51bGwsCiAgICAgIHZpZXdPYmo6IHt9LAogICAgICBmb3JtTGFiZWw6ICJDcmVhdGUgVXNlciBHcm91cCIsCiAgICAgIHNkdERhdGE6ICIiLAogICAgICAvLyAtLS0tLS0tLS0tLS0tIFNEVCBEYXRhIFNUQVJUIC0tLS0tLS0tLS0tLS0tLS0KICAgICAgc2R0X3Rva2VuOiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJjdXJyZW50VXNlckRldGFpbHMiKSkKICAgICAgICAuYWNjZXNzX3Rva2VuLAogICAgICB1c2VyOiAiIiwKICAgICAgdXNlcm5hbWU6ICIiLAogICAgICBpc0xvYWRpbmdQYWdlOiBmYWxzZSwKICAgICAgaXNMb2FkaW5nOiBmYWxzZSwKICAgICAgcHJvbXB0OiBmYWxzZSwKICAgICAgcHJvbXB0Vmlld05hbWU6ICIiLAogICAgICBzZXJ2ZXJEYXRhOiAiIiwKICAgICAgZmlsdGVyRmllbGRMaXN0OiBbXSwKICAgICAgZXZlbnREYXRhOiAiIiwKICAgICAgcGFyZW50U3lzdGVtU2V0dGluZ3M6IHsKICAgICAgICBzZXJ2aWNlVVJMOiBFbmRwb2ludHMucHJlZmVyZW5jZVNlcnZpY2UucHJlZmVyZW5jZSwKICAgICAgICBidXR0b25zOiBbXSwKICAgICAgICBzZWFyY2hWYWx1ZTogIiIsCiAgICAgICAgaGVpZ2h0OiAiOTUwcHgiLAogICAgICAgIHNlbGVjdGlvbkNvbHVtbjogZmFsc2UsCiAgICAgICAgc2VsZWN0VHlwZTogIm5vbmUiLAogICAgICAgIG1vcmVPcHRpb25zOiBbXSwKICAgICAgICBhY3Rpb25zT3B0aW9uczogWyJWaWV3IiwgIkVkaXQiXSwKICAgICAgICBjb2x1bW5JY29uczogW10sCiAgICAgICAgcGlsbENvbmZpZzogWwogICAgICAgICAgeyBjb2x1bW46ICIiLCBzdGF0ZTogInN1Y2Nlc3MiLCBkYXRhOiAiIiB9LAogICAgICAgICAgeyBjb2x1bW46ICIiLCBzdGF0ZTogImVycm9yIiwgZGF0YTogIiIgfSwKICAgICAgICAgIHsgY29sdW1uOiAiIiwgc3RhdGU6ICJub3JtYWwiLCBkYXRhOiAiIiB9LAogICAgICAgIF0sCiAgICAgICAgc3RhdGljQ29sdW1uczogW10sCiAgICAgICAgdXNlcjogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgiY3VycmVudFVzZXJEZXRhaWxzIikpLnByb2ZpbGUKICAgICAgICAgIC51c2VybmFtZSwKICAgICAgICB1cHBlcmNhc2VDb2x1bW5zOiBbXSwgLy8gcGFzcyBjb2x1bW4gbmFtZSB3aG9zZSBkYXRhIHNob3VsZCBiZSBzaG93biBpbiBjYXBzCiAgICAgICAgZGF0ZUZvcm1hdDogIkREL01NL1lZWVkgaGg6bW0gYSIsIC8vcGFzcyBhbnkgbW9tZW50IGRhdGUgZm9ybWF0IGhlcmUKICAgICAgfSwKICAgICAgcGFyZW50RGVmYXVsdFN5c3RlbVZpZXc6IHsKICAgICAgICB2aWV3TmFtZXM6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgbmFtZTogIkRlZmF1bHQgVmlldyIsCiAgICAgICAgICAgIHRpbGVGbGFnOiB0cnVlLAogICAgICAgICAgICBwb3NpdGlvbjogMSwKICAgICAgICAgICAgcHJpdmFjeTogInByaXZhdGUiLAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgbmFtZTogIkFkZCBBIFZpZXcgVGlsZSIsCiAgICAgICAgICAgIHRpbGVGbGFnOiB0cnVlLAogICAgICAgICAgICBwb3NpdGlvbjogMCwKICAgICAgICAgICAgcHJpdmFjeTogInByaXZhdGUiLAogICAgICAgICAgfSwKICAgICAgICBdLAoKICAgICAgICBkZWZhdWx0VGFibGU6IHsKICAgICAgICAgIGlkOiBudWxsLAogICAgICAgICAgdmlld05hbWU6ICJEZWZhdWx0IFZpZXciLAogICAgICAgICAgZGVuc2l0eTogInNtIiwKICAgICAgICAgIHBhZ2VTaXplOiAiNTAiLAogICAgICAgICAgcGFnZU5hbWU6ICIiLAogICAgICAgICAgdXNlcjogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgiY3VycmVudFVzZXJEZXRhaWxzIikpLnByb2ZpbGUKICAgICAgICAgICAgLnVzZXJuYW1lLAogICAgICAgICAgZGVmYXVsdFZpZXdGbGFnOiB0cnVlLAogICAgICAgICAgc29ydEZpZWxkOiAiIiwKICAgICAgICAgIHNvcnREaXJlY3Rpb246ICIiLAogICAgICAgICAgdGlsZUZsYWc6IHRydWUsCiAgICAgICAgICBjb2x1bW5zOiBbXSwKICAgICAgICAgIHBvc2l0aW9uOiAxLCAvLyBhbHdheXMgcGFzcyAxCiAgICAgICAgICBwcml2YWN5OiAicHJpdmF0ZSIsCiAgICAgICAgfSwKICAgICAgfSwKICAgICAgcGFyZW50RGF0YTogW10sCiAgICAgIGZpbHRlckNvdW50OiAiIiwKICAgICAgZmllbGROYW1lczpbXQogICAgICAvLyAtLS0tLS0tLS0tLS0tIFNEVCBEYXRhIEVORCAtLS0tLS0tLS0tLS0tLS0tCiAgICB9OwogIH0sCgogIG1ldGhvZHM6IHsKICAgIHZpZXdVc2VyR3JvdXAodmFsKSB7CiAgICAgIGlmICh2YWwgPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdGhpcy5mb3JtTGFiZWwgPSAiQ3JlYXRlIFVzZXIgR3JvdXAiOwogICAgICAgIHRoaXMudmlld09iaiA9IHt9OwogICAgICAgIHRoaXMudmlld1VzZXJHcm91cERpYWxvZyA9IHRydWU7CiAgICAgIH0gZWxzZSBpZiAodmFsLnZhbHVlID09ICJWaWV3IikgewogICAgICAgIHRoaXMuZm9ybUxhYmVsID0gdmFsLnJvdy5ncm91cE5hbWU7CiAgICAgICAgdGhpcy5nZXRVc2VyR3JvdXAoKTsKICAgICAgfSBlbHNlIGlmICh2YWwudmFsdWUgPT0gIkVkaXQiKSB7CiAgICAgICAgdGhpcy5mb3JtTGFiZWwgPSAiRWRpdCBVc2VyIEdyb3VwIjsKICAgICAgICB0aGlzLmdldFVzZXJHcm91cCgpOwogICAgICB9CiAgICB9LAoKICAgIG9wZW5Vc2VyR3JvdXBEaWFsb2codmFsKSB7CiAgICAgIHRoaXMudmlld1VzZXJHcm91cCh2YWwpOwogICAgfSwKCiAgICBnZXRBY3Rpb25zT3B0aW9uKHZhbCkgewogICAgICBpZiAodmFsLnZhbHVlID09ICJWaWV3IikgewogICAgICAgIGxldCB2aWV3T2JqID0gewogICAgICAgICAgZWRpdGFibGU6IHRydWUsCiAgICAgICAgICBvYmo6IHZhbC5yb3csCiAgICAgICAgfTsKICAgICAgICB0aGlzLnZpZXdPYmogPSB2aWV3T2JqOwogICAgICAgIHRoaXMudmlld1VzZXJHcm91cCh2YWwpOwogICAgICB9IGVsc2UgaWYgKHZhbC52YWx1ZSA9PSAiRWRpdCIpIHsKICAgICAgICBsZXQgdmlld09iaiA9IHsKICAgICAgICAgIGVkaXRhYmxlOiBmYWxzZSwKICAgICAgICAgIG9iajogdmFsLnJvdywKICAgICAgICB9OwogICAgICAgIHRoaXMudmlld09iaiA9IHZpZXdPYmo7CiAgICAgICAgdGhpcy52aWV3VXNlckdyb3VwKHZhbCk7CiAgICAgIH0KICAgIH0sCgogICAgY29udmVydFRvQ1NWKG9iakFycmF5KSB7CiAgICAgIHZhciBhcnJheSA9IHR5cGVvZiBvYmpBcnJheSAhPSAib2JqZWN0IiA/IEpTT04ucGFyc2Uob2JqQXJyYXkpIDogb2JqQXJyYXk7CiAgICAgIHZhciBzdHIgPSAiIjsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgbGluZSA9ICIiOwogICAgICAgIGZvciAodmFyIGluZGV4IGluIGFycmF5W2ldKSB7CiAgICAgICAgICBpZiAobGluZSAhPSAiIikgbGluZSArPSAiLCI7CgogICAgICAgICAgbGluZSArPSBhcnJheVtpXVtpbmRleF07CiAgICAgICAgfQoKICAgICAgICBzdHIgKz0gbGluZSArICJcclxuIjsKICAgICAgfQoKICAgICAgcmV0dXJuIHN0cjsKICAgIH0sCgogICAgY2xvc2VVc2VyR3JvdXBEaWFsb2cocmVsb2FkKSB7CiAgICAgIHRoaXMudmlld1VzZXJHcm91cERpYWxvZyA9IGZhbHNlOwogICAgICBpZiAocmVsb2FkKSB7CiAgICAgICAgdGhpcy5sb2FkVGFibGUodGhpcy5zZHREYXRhKTsKICAgICAgfQogICAgfSwKICAgIGdldERvd25sb2FkQXNPcHRpb24ob3B0KSB7CiAgICAgIC8vIGNvbnNvbGUubG9nKCdkb3dubG9hZCBhcyBvcHRpb24nLG9wdCk7CiAgICAgIGlmIChvcHQub3B0aW9uID09ICJwZGYiKSB7CiAgICAgICAgLy8gbm90aWZpY2F0aW9uQW5kQ29tbXVuaWNhdGlvblNlcnZpY2UuZG93bmxvYWRTZWxlY3RlZFBERihvYmopCiAgICAgICAgLy8gLnRoZW4oKHJlcykgPT4gewogICAgICAgIC8vIC8vIGNvbnNvbGUubG9nKHJlcykKICAgICAgICAvLyBsZXQgZmlsZUNvbnRlbnRzID0gbnVsbDsKICAgICAgICAvLyAgICAgbGV0IHBvcHVwV2luPW51bGw7CiAgICAgICAgLy8gICAgIHBvcHVwV2luID0gd2luZG93Lm9wZW4oJycsICdfYmxhbmsnLCAndG9wPTAsbGVmdD0wLGhlaWdodD03MDAsd2lkdGg9MTAwMDsnKTsKICAgICAgICAvLyAgICAgbGV0IGRvY3VtZW50ID0gewogICAgICAgIC8vICAgICAgICAgJ2RvY3VtZW50TmFtZSc6ICdCaWxsaW5nJwogICAgICAgIC8vICAgICB9OwogICAgICAgIC8vIGZpbGVDb250ZW50cyA9IHJlcy5kYXRhLnR5cGUgKyByZXMuZGF0YS5jb250ZW50OwogICAgICAgIC8vICAgcG9wdXBXaW4uZG9jdW1lbnQud3JpdGUoYAogICAgICAgIC8vICAgICA8aHRtbD4KICAgICAgICAvLyAgICAgICAgIDxoZWFkPgogICAgICAgIC8vICAgICAgICAgIDwhLS10aXRsZT5QcmludCB0YWI8L3RpdGxlLS0+CiAgICAgICAgLy8gICAgICAgICAgICAgPHN0eWxlPgogICAgICAgIC8vICAgICAgICAgICAgICAgICAjYnV0dG9uc3tkaXNwbGF5Om5vbmU7fQogICAgICAgIC8vICAgICAgICAgICAgICAgICAgYm9keSB7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBmb250LWZhbWlseTogIk9wZW4gU2FucyIsIC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgIlNlZ29lIFVJIiwgRXVjbGlkIENpcmN1bGFyIEIsICJIZWx2ZXRpY2EgTmV1ZSIsIEFyaWFsLCBzYW5zLXNlcmlmLCAiQXBwbGUgQ29sb3IgRW1vamkiLCAiU2Vnb2UgVUkgRW1vamkiLCAiU2Vnb2UgVUkgU3ltYm9sIjsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMXJlbTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMS41OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICMyMTI1Mjk7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgfQogICAgICAgIC8vICAgICAgICAgICAgICAgICBidXR0b24sIG1ldGVyLCBwcm9ncmVzcyB7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAtd2Via2l0LXdyaXRpbmctbW9kZTogaG9yaXpvbnRhbC10YiAhaW1wb3J0YW50OwogICAgICAgIC8vICAgICAgICAgICAgICAgICB9CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGlucHV0LCB0ZXh0YXJlYSwgc2VsZWN0LCBidXR0b24gewogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGV4dC1yZW5kZXJpbmc6IGF1dG87CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBjb2xvcjogaW5pdGlhbDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiBub3JtYWw7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB3b3JkLXNwYWNpbmc6IG5vcm1hbDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGV4dC1pbmRlbnQ6IDBweDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRleHQtc2hhZG93OiBub25lOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogc3RhcnQ7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDBlbTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IDQwMCAxMy4zMzMzcHggQXJpYWw7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0KICAgICAgICAvLyAgICAgICAgICAgICAgICAgaW5wdXRbdHlwZT0iYnV0dG9uIiBpXSwgaW5wdXRbdHlwZT0ic3VibWl0IiBpXSwgaW5wdXRbdHlwZT0icmVzZXQiIGldLCBpbnB1dFt0eXBlPSJmaWxlIiBpXTo6LXdlYmtpdC1maWxlLXVwbG9hZC1idXR0b24sIGJ1dHRvbiB7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogZGVmYXVsdDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBidXR0b250ZXh0OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYnV0dG9uZmFjZTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAycHggNnB4IDNweDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJvcmRlci13aWR0aDogMnB4OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXN0eWxlOiBvdXRzZXQ7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6IGJ1dHRvbmZhY2U7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBib3JkZXItaW1hZ2U6IGluaXRpYWw7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0KICAgICAgICAvLyAgICAgICAgICAgICAgICAgaW5wdXQsIGJ1dHRvbiwgc2VsZWN0LCBvcHRncm91cCwgdGV4dGFyZWEgewogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IGluaGVyaXQ7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IGluaGVyaXQ7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogaW5oZXJpdDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgfQogICAgICAgIC8vICAgICAgICAgICAgICAgICBidXR0b24sIHNlbGVjdCB7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgfQogICAgICAgIC8vICAgICAgICAgICAgICAgICAuYnRuIHsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgLW1zLXVzZXItc2VsZWN0OiBub25lOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDAuMzc1cmVtIDAuNzVyZW07CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDFyZW07CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMS41OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQsIGJvcmRlci1jb2xvciAwLjE1cyBlYXNlLWluLW91dCwgYm94LXNoYWRvdyAwLjE1cyBlYXNlLWluLW91dDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgfQogICAgICAgIC8vICAgICAgICAgICAgICAgICAuYnRuLW91dGxpbmUtcHJpbWFyeSB7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBjb2xvcjogIzAwN2JmZjsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogIzAwN2JmZjsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgfQogICAgICAgIC8vICAgICAgICAgICAgICAgICAuYnRuLW91dGxpbmUtcHJpbWFyeSB7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBjb2xvcjogI2ZmZmZmZjsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogI2QwMzIzMjsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNkMDMyMzI7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0KICAgICAgICAvLyAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZSB7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0KICAgICAgICAvLyAgICAgICAgICAgICAgICAgPHN0eWxlPi5mYSB7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBmb250OiBub3JtYWwgbm9ybWFsIG5vcm1hbCAxNHB4LzEgRm9udEF3ZXNvbWU7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IGluaGVyaXQ7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0ZXh0LXJlbmRlcmluZzogYXV0bzsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgfTwvc3R5bGU+CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIDxzdHlsZT4qLCAqOjpiZWZvcmUsICo6OmFmdGVyIHsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0KICAgICAgICAvLyAgICAgICAgICAgICAgICAgU3R5bGUgQXR0cmlidXRlIHsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgfQogICAgICAgIC8vICAgICAgICAgICAgICAgICAuYnRuLCAuZm9ybS1jb250cm9sIHsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDAuMjVyZW0gMC41cmVtOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAwLjg3NXJlbTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxLjU7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAwLjNyZW07CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDE1cHg7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDIzcHg7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH08L3N0eWxlPgogICAgICAgIC8vICAgICAgICAgICAgIDwvc3R5bGU+CiAgICAgICAgLy8gICAgICAgICA8L2hlYWQ+CiAgICAgICAgLy8gICAgICAgICA8Ym9keSBvbmxvYWQ9IiI+CiAgICAgICAgLy8gICAgICAgICAgICAgPGRpdiBzdHlsZT0idGV4dC1hbGlnbjpyaWdodDsiID4KICAgICAgICAvLyAgICAgICAgICAgICAgICAgPGEgaHJlZj0iJHtmaWxlQ29udGVudHN9IiBkb3dubG9hZD0iJHtkb2N1bWVudC5kb2N1bWVudE5hbWV9Ij48YnV0dG9uIGNsYXNzPSJidG4gYnRuLXNtIGJ0bi1vdXRsaW5lLXByaW1hcnkiPkRvd25sb2FkPC9idXR0b24+PC9hPgogICAgICAgIC8vICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIC8vICAgICAgICAgICAgIDxicj4KICAgICAgICAvLyAgICAgICAgICAgICA8aWZyYW1lIHNyYz0nJHtmaWxlQ29udGVudHN9JyAgc3R5bGU9Im1pbi13aWR0aDogMTAwJTtoZWlnaHQ6IDEwMCU7IiA+PC9pZnJhbWU+CiAgICAgICAgLy8gICAgICAgICA8L2JvZHk+CiAgICAgICAgLy8gICAgIDwvaHRtbD5gCiAgICAgICAgLy8gKTsKICAgICAgICAvLyB9KQogICAgICAgIC8vIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKTsKICAgICAgfSBlbHNlIGlmIChvcHQub3B0aW9uID09ICJjc3YiKSB7CiAgICAgICAgLy8gCWxldCBmaWxlVGl0bGUgPSAnQmlsbGluZ3MnOwogICAgICAgIC8vIAlsZXQgaGVhZGVycyA9IHsKICAgICAgICAvLyAgICAgICBjcmVhdGVkRGF0ZTogJ1JlcXVlc3RlZCBPbicucmVwbGFjZSgvLC9nLCAnJyksIC8vIHJlbW92ZSBjb21tYXMgdG8gYXZvaWQgZXJyb3JzCiAgICAgICAgLy8gICAgICAgZHVlRGF0ZTogIkR1ZSBEYXRlIiwKICAgICAgICAvLyAgICAgICBzaGlwbWVudE51bWJlcjogIlNoaXBtZW50ICMiLAogICAgICAgIC8vIAkJICBwb3J0T2ZMb2FkaW5nOiAiUG9ydCBvZiBMb2FkIiwKICAgICAgICAvLyAJCSAgcG9ydE9mRGlzY2hhcmdlOiAiUG9ydCBPZiBEaXNjaGFyZ2UiLAogICAgICAgIC8vIAkJICBhbW91bnQ6ICJBbW91bnQiLAogICAgICAgIC8vIAkJICBiYWxhbmNlOiAiQmFsYW5jZSIsCiAgICAgICAgLy8gCQkgIG5ldHN1aXRlU3RhdHVzOiAiU3RhdHVzIgogICAgICAgIC8vIAl9OwogICAgICAgIC8vIAlsZXQgZGF0YU9iaiA9IFtdOwogICAgICAgIC8vIAlmb3IgKGxldCBpID0gMDsgaSA8IG9wdC5yb3dzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgLy8gCQljb25zdCBiaWxsID0gb3B0LnJvd3NbaV07CiAgICAgICAgLy8gCQlkYXRhT2JqLnB1c2goewogICAgICAgIC8vIAkJCWNyZWF0ZWREYXRlOiBiaWxsLmNyZWF0ZWREYXRlLAogICAgICAgIC8vIAkJCWR1ZURhdGU6IGJpbGwuZHVlRGF0ZSwKICAgICAgICAvLyAJCQlzaGlwbWVudE51bWJlcjogYmlsbC5zaGlwbWVudE51bWJlciwKICAgICAgICAvLyAJCQlwb3J0T2ZMb2FkaW5nOiBiaWxsLnBvcnRPZkxvYWRpbmcsCiAgICAgICAgLy8gCQkJcG9ydE9mRGlzY2hhcmdlOiBiaWxsLnBvcnRPZkRpc2NoYXJnZSwKICAgICAgICAvLyAJCQlhbW91bnQ6IGJpbGwuYW1vdW50LAogICAgICAgIC8vIAkJCWJhbGFuY2U6IGJpbGwuYmFsYW5jZSwKICAgICAgICAvLyAJCQluZXRzdWl0ZVN0YXR1czogYmlsbC5uZXRzdWl0ZVN0YXR1cwogICAgICAgIC8vIAkJfSk7CiAgICAgICAgLy8gCX0KICAgICAgICAvLyAJdGhpcy5leHBvcnRDU1ZGaWxlKGhlYWRlcnMsIGRhdGFPYmosIGZpbGVUaXRsZSk7CiAgICAgIH0KICAgIH0sCgogICAgLy8gICAgIC8vIHZhciBjc3YgPSB0aGlzLmNvbnZlcnRUb0NTVihqc29uT2JqZWN0KTsKCiAgICAvLyAgICAgLy8gdmFyIGV4cG9ydGVkRmlsZW5tYWUgPSBmaWxlVGl0bGUgKyAnLmNzdicgfHwgJ2V4cG9ydC5jc3YnOwoKICAgIC8vICAgICAvLyB2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3ZdLCB7IHR5cGU6ICd0ZXh0L2NzdjtjaGFyc2V0PXV0Zi04OycgfSk7CiAgICAvLyAgICAgLy8gaWYgKG5hdmlnYXRvci5tc1NhdmVCbG9iKSB7IC8vIElFIDEwKwogICAgLy8gICAgIC8vICAgICBuYXZpZ2F0b3IubXNTYXZlQmxvYihibG9iLCBleHBvcnRlZEZpbGVubWFlKTsKICAgIC8vICAgICAvLyB9IGVsc2UgewogICAgLy8gICAgIC8vICAgICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKTsKICAgIC8vICAgICAvLyAgICAgaWYgKGxpbmsuZG93bmxvYWQgIT09IHVuZGVmaW5lZCkgeyAvLyBmZWF0dXJlIGRldGVjdGlvbgogICAgLy8gICAgIC8vICAgICAgICAgLy8gQnJvd3NlcnMgdGhhdCBzdXBwb3J0IEhUTUw1IGRvd25sb2FkIGF0dHJpYnV0ZQogICAgLy8gICAgIC8vICAgICAgICAgdmFyIHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7CiAgICAvLyAgICAgLy8gICAgICAgICBsaW5rLnNldEF0dHJpYnV0ZSgiaHJlZiIsIHVybCk7CiAgICAvLyAgICAgLy8gICAgICAgICBsaW5rLnNldEF0dHJpYnV0ZSgiZG93bmxvYWQiLCBleHBvcnRlZEZpbGVubWFlKTsKICAgIC8vICAgICAvLyAgICAgICAgIGxpbmsuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nOwogICAgLy8gICAgIC8vICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rKTsKICAgIC8vICAgICAvLyAgICAgICAgIGxpbmsuY2xpY2soKTsKICAgIC8vICAgICAvLyAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluayk7CiAgICAvLyAgICAgLy8gICAgIH0KICAgIC8vICAgICAvLyB9CiAgICAvLyB9LAoKICAgIHNldFRhYmxlQ29uZmlncygpIHsKICAgICAgdGhpcy5wYXJlbnREZWZhdWx0U3lzdGVtVmlldy5kZWZhdWx0VGFibGUuZGVuc2l0eSA9CiAgICAgICAgdGhpcy50YWJsZUNvbmZpZy5kZW5zaXR5OwogICAgICB0aGlzLnBhcmVudERlZmF1bHRTeXN0ZW1WaWV3LmRlZmF1bHRUYWJsZS5wYWdlU2l6ZSA9CiAgICAgICAgdGhpcy50YWJsZUNvbmZpZy5wYWdlU2l6ZTsKICAgICAgdGhpcy5wYXJlbnREZWZhdWx0U3lzdGVtVmlldy5kZWZhdWx0VGFibGUucGFnZU5hbWUgPQogICAgICAgIHRoaXMudGFibGVDb25maWcucGFnZU5hbWU7CiAgICAgIHRoaXMucGFyZW50RGVmYXVsdFN5c3RlbVZpZXcuZGVmYXVsdFRhYmxlLnNvcnRGaWVsZCA9CiAgICAgICAgdGhpcy50YWJsZUNvbmZpZy5zb3J0RmllbGQ7CiAgICAgIHRoaXMucGFyZW50RGVmYXVsdFN5c3RlbVZpZXcuZGVmYXVsdFRhYmxlLnNvcnREaXJlY3Rpb24gPQogICAgICAgIHRoaXMudGFibGVDb25maWcuc29ydERpcmVjdGlvbjsKICAgICAgdGhpcy5wYXJlbnREZWZhdWx0U3lzdGVtVmlldy5kZWZhdWx0VGFibGUuY29sdW1ucyA9CiAgICAgICAgdGhpcy50YWJsZUNvbmZpZy5jb2x1bW5zOwogICAgfSwKCiAgICBzZXRTdGF0aWNDb2x1bW4oKSB7CiAgICAgIGxldCBzdGF0aWNDb2wgPSB0aGlzLnRhYmxlQ29uZmlnLmNvbHVtbnMuZmlsdGVyKAogICAgICAgIChjb2wpID0+IGNvbC5sYWJlbE5hbWUgPT09ICJHcm91cCBOYW1lIgogICAgICApWzBdOwogICAgICB0aGlzLnBhcmVudFN5c3RlbVNldHRpbmdzLnN0YXRpY0NvbHVtbnMucHVzaChzdGF0aWNDb2wpOwoKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRhYmxlQ29uZmlnLmNvbHVtbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAodGhpcy50YWJsZUNvbmZpZy5jb2x1bW5zW2ldLmxhYmVsTmFtZSA9PSBzdGF0aWNDb2wubGFiZWxOYW1lKSB7CiAgICAgICAgICB0aGlzLnRhYmxlQ29uZmlnLmNvbHVtbnMuc3BsaWNlKGksIDEpOwogICAgICAgIH0KICAgICAgfQogICAgfSwKCiAgICBleHRyYWN0RmllbGROYW1lc0ZvclNlYXJjaFF1ZXJ5KGNvbmZpZyl7CiAgICAgICAgY29uZmlnLmNvbHVtbnMubWFwKGVsZW1lbnQgPT4gewogICAgICAgICAgdGhpcy5maWVsZE5hbWVzLnB1c2goZWxlbWVudC5maWVsZE5hbWUpCiAgICAgICAgfSk7CiAgICB9LAoKICAgIGNhdGNoRGVwYXJ0dXJlOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICB0aGlzLnNkdERhdGEgPSBkYXRhOwogICAgICBpZiAoZGF0YS5zdGF0dXMgPT0gMSB8fCBkYXRhLnN0YXR1cyA9PSAzKSB7CiAgICAgICAgdGhpcy5sb2FkVGFibGUoZGF0YSk7CiAgICAgIH0gZWxzZSBpZiAoZGF0YS5zdGF0dXMgPT0gNCkgewogICAgICAgIHRoaXMubG9hZFRhYmxlKGRhdGEpOwogICAgICB9IGVsc2UgaWYgKGRhdGEuc3RhdHVzID09IDEwKSB7CiAgICAgIH0KICAgIH0sCiAgICBsb2FkVGFibGUoc2R0RGF0YSkgewogICAgICBsZXQgZmlsdGVycyA9IFtdOwogICAgICB0aGlzLmxvYWRlckZsYWcgPSB0cnVlOwogICAgICBmb3IgKGxldCBzZHRfZGF0YSBvZiBzZHREYXRhLm1lc3NhZ2UpIHsKICAgICAgICBpZihzZHRfZGF0YS5maWVsZE5hbWUgIT09ICJhY3Rpb25zIiApewogICAgICAgICAgbGV0IG5ld0RhdGUgPSAiIjsKICAgICAgICAgIGlmKHNkdF9kYXRhLmZpZWxkVHlwZSA9PT0gImRhdGUiICYmIHNkdF9kYXRhLmZpbHRlclZhbHVlICE9PSAiIil7CiAgICAgICAgICAgIGxldCBkYXRlID0gc2R0X2RhdGEuZmlsdGVyVmFsdWUudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgZGF0ZSA9IGRhdGUuc3BsaXQoIi8iKTsKICAgICAgICAgICAgbmV3RGF0ZSA9IG5ldyBEYXRlKGAke2RhdGVbMV19LyR7ZGF0ZVswXX0vJHtkYXRlWzJdfWApCiAgICAgICAgICB9CiAgICAgICAgICBpZihzZHRfZGF0YS5maWx0ZXJWYWx1ZSA9PT0gbnVsbCl7CiAgICAgICAgICAgIHNkdF9kYXRhLmZpbHRlclZhbHVlID0gIiIKICAgICAgICAgIH0KICAgICAgICAgIGZpbHRlcnMucHVzaCh7CiAgICAgICAgICAgIGZpZWxkTmFtZTogc2R0X2RhdGEuZmllbGROYW1lLAogICAgICAgICAgICBmaWVsZFR5cGU6IHNkdF9kYXRhLmZpZWxkVHlwZSwKICAgICAgICAgICAgZmlsdGVyVmFsdWU6bmV3RGF0ZSA9PT0gbnVsbCB8fCBuZXdEYXRlID09PSAiIiA/IHNkdF9kYXRhLmZpbHRlclZhbHVlOiBuZXdEYXRlLmdldFRpbWUoKSwKICAgICAgICAgICAgc2Vjb25kVmFsdWU6IHNkdF9kYXRhLnNlY29uZFZhbHVlLAogICAgICAgICAgICBjb21wYXJpc29uVHlwZTogc2R0X2RhdGEuY29tcGFyaXNvblR5cGUsCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHRoaXMuZ2V0UGFnaW5hdGVkVXNlckdyb3VwcygKICAgICAgICBmaWx0ZXJzLAogICAgICAgIHNkdERhdGEuZGF0YS5zb3J0RmllbGQsCiAgICAgICAgc2R0RGF0YS5kYXRhLnNvcnREaXJlY3Rpb24sCiAgICAgICAgc2R0RGF0YS5kYXRhLm9mZnNldCwKICAgICAgICBzZHREYXRhLmRhdGEubGltaXQsCiAgICAgICAgc2R0RGF0YS5kYXRhLnNlYXJjaFF1ZXJ5CiAgICAgICk7CiAgICB9LAoKICAgIGxvYWRTRFQocmVzcG9uc2UsIGRhdGEpIHsKICAgICAgdGhpcy5wYXJlbnREYXRhID0gZGF0YTsKICAgICAgbGV0IGV2ZW50RGF0YSA9IHsKICAgICAgICBkYXRhOiB0aGlzLnBhcmVudERhdGEsCiAgICAgICAgdG90YWxFbGVtZW50czogcmVzcG9uc2UuZGF0YS5zZHREYXRhLnRvdGFsRWxlbWVudHMsCiAgICAgICAgdG90YWxQYWdlczogcmVzcG9uc2UuZGF0YS5zZHREYXRhLnRvdGFsUGFnZXMsCiAgICAgICAgcGFnZU51bWJlcjogcmVzcG9uc2UuZGF0YS5zZHREYXRhLm9mZnNldCwKICAgICAgfTsKICAgICAgdGhpcy4kcmVmcy50ZXN0LmRhdGFMb2FkRXZlbnQoZXZlbnREYXRhKTsKICAgIH0sCgogICAgZ2V0UGFnaW5hdGVkVXNlckdyb3VwcyhmaWx0ZXJzLCBzb3J0RmllbGQsIHNvcnREaXJlY3Rpb24sIG9mZnNldCwgbGltaXQsc2VhcmNoUXVlcnkpIHsKICAgICAgbGV0IGN1cnJlbnRVc2VyRGV0YWlscyA9IEpTT04ucGFyc2UoCiAgICAgICAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oImN1cnJlbnRVc2VyRGV0YWlscyIpCiAgICAgICk7CgogICAgICBsZXQgcmVxdWVzdE9iaiA9IHsKICAgICAgICBzZWFyY2hRdWVyeTogc2VhcmNoUXVlcnksCiAgICAgICAgLy8gc2VhcmNoQ29sdW1uczogc2VhcmNoQ29sdW1ucywKICAgICAgICBmaWx0ZXJzOiBmaWx0ZXJzLAogICAgICAgIHNvcnRGaWVsZDogc29ydEZpZWxkLAogICAgICAgIHNvcnREaXJlY3Rpb246IHNvcnREaXJlY3Rpb24sCiAgICAgICAgb2Zmc2V0OiBvZmZzZXQsCiAgICAgICAgbGltaXQ6IGxpbWl0LAogICAgICAgIHRlbmFudFVVSUQ6IGN1cnJlbnRVc2VyRGV0YWlscy5wcm9maWxlLm9yZ2FuaXphdGlvbklkLAogICAgICAgIGZpZWxkTmFtZXM6dGhpcy5maWVsZE5hbWVzCiAgICAgIH07CgogICAgICBBc3NldFBlcnNvbm5lbFNlcnZpY2UuZ2V0UGFnaW5hdGVkVXNlckdyb3Vwc0ZvclNEVChyZXF1ZXN0T2JqKQogICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PSAyMDApIHsKICAgICAgICAgICAgbGV0IHVzZXJHcm91cHMgPSByZXNwb25zZS5kYXRhLnNkdERhdGEuY29udGVudDsKICAgICAgICAgICAgdXNlckdyb3Vwcy5tYXAoKGl0ZW0pID0+IHsKICAgICAgICAgICAgICBpdGVtLmNyZWF0ZWRBdCA9IG1vbWVudC51dGMoaXRlbS5jcmVhdGVkQXQpLmxvY2FsKCkuZm9ybWF0KCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB0aGlzLmxvYWRlckZsYWcgPSBmYWxzZTsKICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5zZHREYXRhLm9mZnNldCA9IG9mZnNldCArIDE7CiAgICAgICAgICAgIHRoaXMubG9hZFNEVChyZXNwb25zZSwgdXNlckdyb3Vwcyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLmxvYWRlckZsYWcgPSBmYWxzZTsKICAgICAgICAgICAgdGhpcy5zaG93VG9hc3QoIk9vcHMgaXRzIGxvb2sgbGlrZSBvdXIgc2VydmVyIGlzIG9mZmxpbmUiLCAiZXJyb3IiKTsKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHsKICAgICAgICAgIGlmIChlcnJvci5yZXNwb25zZSAhPT0gdW5kZWZpbmVkICYmIGVycm9yLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA2KSB7CiAgICAgICAgICAgIHRoaXMuc2hvd1RvYXN0KGVycm9yLnJlc3BvbnNlLmRhdGEuZGVzY3JpcHRpb24sICJlcnJvciIpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSwKCiAgICBnZXRVc2VyR3JvdXAoKSB7CiAgICAgIHRoaXMuaXNBY3RpdmUgPSB0cnVlOwogICAgICB0aGlzLmxvYWRlckZsYWcgPSB0cnVlOwogICAgICBBc3NldFBlcnNvbm5lbFNlcnZpY2UuZ2V0VXNlckdyb3VwQnlVVUlEKHRoaXMudmlld09iai5vYmoudXVpZCkKICAgICAgICAudGhlbigocmVzKSA9PiB7CiAgICAgICAgICB0aGlzLnVzZXJHcm91cERldGFpbCA9IHJlcy5kYXRhLnVzZXJHcm91cDsKICAgICAgICAgIHRoaXMudXNlckdyb3VwS2V5Kys7CiAgICAgICAgICB0aGlzLmxvYWRlckZsYWcgPSBmYWxzZTsKICAgICAgICAgIHRoaXMudmlld1VzZXJHcm91cERpYWxvZyA9IHRydWU7CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKGUpID0+IHsKICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgIH0pOwogICAgfSwKCiAgICBzaG93VG9hc3QobWVzc2FnZSwgdHlwZSkgewogICAgICB0aGlzLnRvYXN0TWVzc2FnZSA9IG1lc3NhZ2U7CiAgICAgIHRoaXMudG9hc3RUeXBlID0gdHlwZTsKICAgICAgdGhpcy50b2FzdEZsYWcrKzsKICAgIH0sCiAgfSwKCiAgY3JlYXRlZCgpIHsKICAgIGRvY3VtZW50LnRpdGxlID0gdGhpcy4kcm91dGUubWV0YS50aXRsZTsKICAgIHRoaXMuY3VycmVudFVzZXJEZXRhaWxzID0gSlNPTi5wYXJzZSgKICAgICAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oImN1cnJlbnRVc2VyRGV0YWlscyIpCiAgICApOwoKICAgIC8vIHNlbmRpbmcgb25seSBmaXJzdCBhbmQgbGFzdCBuYW1lIGZvciBTRFQKICAgIGxldCBuYW1lID0gdGhpcy5jdXJyZW50VXNlckRldGFpbHMucHJvZmlsZS51c2VybmFtZTsKICAgIGlmIChuYW1lLmluY2x1ZGVzKCJAIikpIHsKICAgICAgbmFtZSA9IG5hbWUuc3BsaXQoIkAiKTsKICAgICAgbmFtZSA9IG5hbWVbMF07CiAgICB9CiAgICB0aGlzLnBhcmVudFN5c3RlbVNldHRpbmdzLnVzZXIgPSBuYW1lOwoKICAgIEFzc2V0UGVyc29ubmVsU2VydmljZS5nZXRBbGxSb2xlcygKICAgICAgdGhpcy5jdXJyZW50VXNlckRldGFpbHMucHJvZmlsZS5vcmdhbml6YXRpb25JZAogICAgKS50aGVuKChyZXNwb25zZSkgPT4gewogICAgICB0aGlzLnJvbGVPcHRpb25zID0gcmVzcG9uc2UuZGF0YS5yb2xlOwogICAgfSk7CgogICAgQXNzZXRQZXJzb25uZWxTZXJ2aWNlLmdldEFsbFVzZXJzKAogICAgICB0aGlzLmN1cnJlbnRVc2VyRGV0YWlscy5wcm9maWxlLm9yZ2FuaXphdGlvbklkCiAgICApLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByZXNwb25zZS5kYXRhLnVzZXJzLmxlbmd0aDsgaW5kZXgrKykgewogICAgICAgIGxldCB1c2VyID0gewogICAgICAgICAgdXVpZDogcmVzcG9uc2UuZGF0YS51c2Vyc1tpbmRleF0udXVpZCwKICAgICAgICAgIG5hbWU6CiAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEudXNlcnNbaW5kZXhdLmVtYWlsICsKICAgICAgICAgICAgIiAiICsKICAgICAgICAgICAgIigiICsKICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS51c2Vyc1tpbmRleF0ubmFtZSArCiAgICAgICAgICAgICIpIiwKICAgICAgICAgIHVzZXJOYW1lOiByZXNwb25zZS5kYXRhLnVzZXJzW2luZGV4XS51c2VyTmFtZSwKICAgICAgICAgIGdlbmRlcjogcmVzcG9uc2UuZGF0YS51c2Vyc1tpbmRleF0uZ2VuZGVyLAogICAgICAgICAgZm5hbWU6IHJlc3BvbnNlLmRhdGEudXNlcnNbaW5kZXhdLm5hbWUsCiAgICAgICAgICBlbWFpbDogcmVzcG9uc2UuZGF0YS51c2Vyc1tpbmRleF0uZW1haWwsCiAgICAgICAgICBjb250YWN0OiByZXNwb25zZS5kYXRhLnVzZXJzW2luZGV4XS5jb250YWN0TnVtYmVyLAogICAgICAgICAgY2l0eTogcmVzcG9uc2UuZGF0YS51c2Vyc1tpbmRleF0uY2l0eSwKICAgICAgICAgIHNlbGVjdGVkOiBmYWxzZSwKICAgICAgICAgIG1hbmFnZXI6IGZhbHNlLAogICAgICAgIH07CiAgICAgICAgdGhpcy51c2VyTmFtZU9wdGlvbnMucHVzaCh1c2VyKTsKICAgICAgfQogICAgfSk7CgogICAgbGV0IHV1aWQgPSB0aGlzLmN1cnJlbnRVc2VyRGV0YWlscy5wcm9maWxlLm9yZ2FuaXphdGlvbklkOwoKICAgIEFzc2V0UGVyc29ubmVsU2VydmljZS5nZXRPcmdDb25maWdzKHV1aWQsICJ0YWJsZUNvbmZpZ3MiKQogICAgICAudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICB0aGlzLm9yZ0NvbmZpZ3NSZXNwb25zZSA9IHJlc3BvbnNlOwogICAgICAgIGxldCBhbGxDb25maWdzID0gSlNPTi5wYXJzZShyZXNwb25zZS5kYXRhLnRhYmxlQ29uZmlncyk7CiAgICAgICAgYWxsQ29uZmlncyA9IGFsbENvbmZpZ3MuZmlsdGVyKAogICAgICAgICAgKGRhdGEpID0+IGRhdGEucGFnZU5hbWUgPT09ICJVc2VyR3JvdXBzIgogICAgICAgIClbMF07CiAgICAgICAgdGhpcy50YWJsZUNvbmZpZyA9IGFsbENvbmZpZ3M7CiAgICAgICAgdGhpcy50YWJsZUNvbmZpZy5jb2x1bW5zLm1hcCgoY29sdW1uKSA9PiB7CiAgICAgICAgICBjb2x1bW4uZmlsdGVycyA9IFtdOwogICAgICAgIH0pOwogICAgICAgIHRoaXMuZXh0cmFjdEZpZWxkTmFtZXNGb3JTZWFyY2hRdWVyeSh0aGlzLnRhYmxlQ29uZmlnKQogICAgICAgIHRoaXMuc2V0U3RhdGljQ29sdW1uKCk7CiAgICAgICAgdGhpcy5zZXRUYWJsZUNvbmZpZ3MoKTsKICAgICAgfSkKICAgICAgLmNhdGNoKChlcnJvcikgPT4gewogICAgICAgIGlmIChlcnJvcikgewogICAgICAgICAgdGhpcy5zaG93VG9hc3QoIkVycm9yIGZldGNoaW5nIGNvbmZpZ3MiLCAiZXJyb3IiKTsKICAgICAgICB9CiAgICAgIH0pOwogIH0sCgogIC8vIG1vdW50ZWQoKXsKICAvLyAJY29uc29sZS5sb2coJ21vdW50ZWQnKQogIC8vIAl0aGlzLmN1cnJlbnRVc2VyRGV0YWlscyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oImN1cnJlbnRVc2VyRGV0YWlscyIpKTsKICAvLyAgICAgaWYgKHRoaXMuY3VycmVudFVzZXJEZXRhaWxzID09PSBudWxsKSB7CiAgLy8gICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oImZvcmNlU2lnbm91dCIsICJ5ZXMiKTsKICAvLyAgICAgICByZXR1cm47CiAgLy8gCX0KCiAgLy8gCS8vIGZldGNoaW5nIGNvbmZpZ3MKICAvLyAgIAlsZXQgdXVpZCA9IHRoaXMuY3VycmVudFVzZXJEZXRhaWxzLnByb2ZpbGUub3JnYW5pemF0aW9uSWQ7CgogIC8vICAJIEFzc2V0UGVyc29ubmVsU2VydmljZS5nZXRPcmdDb25maWdzKHV1aWQsICJ0YWJsZUNvbmZpZ3MiKQogIC8vICAgCSAudGhlbigocmVzcG9uc2UpID0+IHsKICAvLyAJICAgIC8vIGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpCiAgLy8gCQl0aGlzLm9yZ0NvbmZpZ3NSZXNwb25zZSA9IHJlc3BvbnNlOwogIC8vIAkJbGV0IGFsbENvbmZpZ3MgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmRhdGEudGFibGVDb25maWdzKTsKICAvLyAJCWNvbnNvbGUubG9nKGFsbENvbmZpZ3MpCiAgLy8gCQlhbGxDb25maWdzID0gYWxsQ29uZmlncy5maWx0ZXIoKGRhdGEpID0+IGRhdGEucGFnZU5hbWUgPT09ICJVc2VyR3JvdXBzIilbMF07CiAgLy8gCQl0aGlzLnRhYmxlQ29uZmlnID0gYWxsQ29uZmlnczsKICAvLyAJCWNvbnNvbGUubG9nKHRoaXMudGFibGVDb25maWcpCiAgLy8gCQl0aGlzLnRhYmxlQ29uZmlnLmNvbHVtbnMubWFwKGNvbHVtbiA9PiB7Y29sdW1uLmZpbHRlcnMgPSBbXX0pOwogIC8vIAkJdGhpcy5zZXRUYWJsZUNvbmZpZ3MoKTsKICAvLyAgICAgICB9KQogIC8vIAkgIC5jYXRjaCgoZXJyb3IpID0+IHsKICAvLyAgICAgICAgIGNvbnNvbGUubG9nKCJFcnJvciBmZXRjaGluZyBjb25maWdzIiwgZXJyb3IpOwogIC8vIAkgIH0pOwogIC8vIH0sCgogIC8vIHdhdGNoOiB7CiAgLy8gCXRhYmxlQ29uZmlnOiBmdW5jdGlvbihuZXdWYWwsb2xkVmFsKXsKICAvLyAJCWNvbnNvbGUubG9nKCdvbGQ6Jywgb2xkVmFsKQogIC8vIAkJY29uc29sZS5sb2coJ25ldzonLCBuZXdWYWwpCiAgLy8gCQlpZihuZXdWYWwhPW9sZFZhbCl7CiAgLy8gCQkJdGhpcy5zZXRUYWJsZUNvbmZpZ3MoKTsKICAvLyAJCX0KICAvLyAJfQogIC8vIH0KfTsK"},null]}