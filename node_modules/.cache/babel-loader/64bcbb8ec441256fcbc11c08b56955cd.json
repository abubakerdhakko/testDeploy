{"remainingRequest":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/babel-loader/lib/index.js!/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/src/views/work-orders/WorkOrders.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/src/views/work-orders/WorkOrders.vue","mtime":1661968702452},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/babel.config.js","mtime":1661968702388},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/vue-loader/lib/index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IGFzc2V0UGVyc29ubmVsU2VydmljZSBmcm9tICIuLi8uLi9zZXJ2aWNlcy9Bc3NldFBlcnNvbm5lbFNlcnZpY2UiOwppbXBvcnQgd29ya09yZGVyU2VydmljZSBmcm9tICIuLi8uLi9zZXJ2aWNlcy9Xb3JrT3JkZXJTZXJ2aWNlIjsKaW1wb3J0IEVuZHBvaW50cyBmcm9tICIuLi8uLi9zZXJ2aWNlcy9FbmRQb2ludHMiOwppbXBvcnQgbW9tZW50IGZyb20gIm1vbWVudCI7CmltcG9ydCBEZWxldGVEaWFsb2cgZnJvbSAiLi4vLi4vY29tcG9uZW50cy9EZWxldGVEaWFsb2ciOwppbXBvcnQgQXJjaGl2ZURpYWxvZyBmcm9tICIuLi8uLi9jb21wb25lbnRzL0FyY2hpdmVEaWFsb2ciOwppbXBvcnQgQXJjaGl2ZWRXb3JrT3JkZXIgZnJvbSAiLi9BcmNoaXZlZFdvcmtPcmRlci52dWUiOwppbXBvcnQgbG9hZGVyIGZyb20gIkAvY29tcG9uZW50cy9Mb2FkZXIudnVlIjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJXb3JrT3JkZXJzIiwKICBjb21wb25lbnRzOiB7CiAgICBEZWxldGVEaWFsb2csCiAgICBBcmNoaXZlRGlhbG9nLAogICAgbG9hZGVyLAogICAgQXJjaGl2ZWRXb3JrT3JkZXIKICB9LAoKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgYXJjaGl2ZWRDb25maWdzOiBudWxsLAogICAgICB3b3JrT3JkZXJUeXBlOiAid29yay1vcmRlciIsCiAgICAgIHdvcmtPcmRlck9wdGlvbnM6IFt7CiAgICAgICAgbGFiZWw6ICJXb3JrIE9yZGVyIiwKICAgICAgICB2YWx1ZTogIndvcmstb3JkZXIiCiAgICAgIH0sIHsKICAgICAgICBsYWJlbDogIkFyY2hpdmVkIiwKICAgICAgICB2YWx1ZTogImFyY2hpdmVkIgogICAgICB9XSwKICAgICAgc2VsZWN0V29ya09yZGVyOiAid29yay1vcmRlciIsCiAgICAgIGxvYWRlckZsYWc6IGZhbHNlLAoKICAgICAgLyogVG9hc3QgUHJvcGVydGllcyAqLwogICAgICB0b2FzdFRpbWVPdXQ6IDMwMDAsCiAgICAgIHRvYXN0TWVzc2FnZTogIiIsCiAgICAgIHRvYXN0VHlwZTogIiIsCiAgICAgIHRvYXN0RmxhZzogMCwKCiAgICAgIC8qIFRvYXN0IFByb3BlcnRpZXMgKi8KICAgICAgZGVsZXRlV29ya09yZGVyRGlhbG9nOiBmYWxzZSwKICAgICAgYXJjaGl2ZVdvcmtPcmRlckRpYWxvZzogZmFsc2UsCiAgICAgIHdvcmtPcmRlcklEOiAiIiwKICAgICAgcmVzZXRUYWJsZTogMCwKICAgICAgdGFibGVDb25maWc6IG51bGwsCiAgICAgIC8vIC0tLS0tLS0tLS0tLS0gU0RUIERhdGEgU1RBUlQgLS0tLS0tLS0tLS0tLS0tLQogICAgICBzZHRfdG9rZW46IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oImN1cnJlbnRVc2VyRGV0YWlscyIpKS5hY2Nlc3NfdG9rZW4sCiAgICAgIHVzZXI6ICIiLAogICAgICB1c2VybmFtZTogIiIsCiAgICAgIGlzTG9hZGluZ1BhZ2U6IGZhbHNlLAogICAgICBpc0xvYWRpbmc6IGZhbHNlLAogICAgICBwcm9tcHQ6IGZhbHNlLAogICAgICBwcm9tcHRWaWV3TmFtZTogIiIsCiAgICAgIHNlcnZlckRhdGE6ICIiLAogICAgICBmaWx0ZXJGaWVsZExpc3Q6IFtdLAogICAgICBldmVudERhdGE6ICIiLAogICAgICBwYXJlbnRTeXN0ZW1TZXR0aW5nczogewogICAgICAgIHNlcnZpY2VVUkw6IEVuZHBvaW50cy5wcmVmZXJlbmNlU2VydmljZS5wcmVmZXJlbmNlLAogICAgICAgIC8vIHNlcnZpY2VVUkw6ICdodHRwOi8vbG9jYWxob3N0OjgwOTkvcHJlZmVyZW5jZXMnLAogICAgICAgIGJ1dHRvbnM6IFtdLAogICAgICAgIHNlYXJjaFZhbHVlOiAiIiwKICAgICAgICBoZWlnaHQ6ICI5NTBweCIsCiAgICAgICAgc2VsZWN0aW9uQ29sdW1uOiBmYWxzZSwKICAgICAgICBzZWxlY3RUeXBlOiAibm9uZSIsCiAgICAgICAgbW9yZU9wdGlvbnM6IFtdLAogICAgICAgIGFjdGlvbnNPcHRpb25zOiBbIlZpZXciLCAiRWRpdCIsICJBcmNoaXZlIiwgIkRlbGV0ZSJdLAogICAgICAgIGNvbHVtbkljb25zOiBbXSwKICAgICAgICBwaWxsQ29uZmlnOiBbewogICAgICAgICAgY29sdW1uOiAiIiwKICAgICAgICAgIHN0YXRlOiAic3VjY2VzcyIsCiAgICAgICAgICBkYXRhOiAiIgogICAgICAgIH0sIHsKICAgICAgICAgIGNvbHVtbjogIiIsCiAgICAgICAgICBzdGF0ZTogImVycm9yIiwKICAgICAgICAgIGRhdGE6ICIiCiAgICAgICAgfSwgewogICAgICAgICAgY29sdW1uOiAiIiwKICAgICAgICAgIHN0YXRlOiAibm9ybWFsIiwKICAgICAgICAgIGRhdGE6ICIiCiAgICAgICAgfV0sCiAgICAgICAgc3RhdGljQ29sdW1uczogW10sCiAgICAgICAgdXNlcjogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgiY3VycmVudFVzZXJEZXRhaWxzIikpLnByb2ZpbGUudXNlcm5hbWUsCiAgICAgICAgdXBwZXJjYXNlQ29sdW1uczogW10sCiAgICAgICAgLy8gcGFzcyBjb2x1bW4gbmFtZSB3aG9zZSBkYXRhIHNob3VsZCBiZSBzaG93biBpbiBjYXBzCiAgICAgICAgZGF0ZUZvcm1hdDogIkREL01NL3l5eXkgaGg6bW0gYSIgLy9wYXNzIGFueSBtb21lbnQgZGF0ZSBmb3JtYXQgaGVyZQoKICAgICAgfSwKICAgICAgcGFyZW50RGVmYXVsdFN5c3RlbVZpZXc6IHsKICAgICAgICB2aWV3TmFtZXM6IFt7CiAgICAgICAgICBuYW1lOiAiRGVmYXVsdCBWaWV3IiwKICAgICAgICAgIHRpbGVGbGFnOiB0cnVlLAogICAgICAgICAgcG9zaXRpb246IDEsCiAgICAgICAgICBwcml2YWN5OiAicHJpdmF0ZSIKICAgICAgICB9LCB7CiAgICAgICAgICBuYW1lOiAiQWRkIEEgVmlldyBUaWxlIiwKICAgICAgICAgIHRpbGVGbGFnOiB0cnVlLAogICAgICAgICAgcG9zaXRpb246IDAsCiAgICAgICAgICBwcml2YWN5OiAicHJpdmF0ZSIKICAgICAgICB9XSwKICAgICAgICBkZWZhdWx0VGFibGU6IHsKICAgICAgICAgIGlkOiBudWxsLAogICAgICAgICAgdmlld05hbWU6ICJEZWZhdWx0IFZpZXciLAogICAgICAgICAgZGVuc2l0eTogInNtIiwKICAgICAgICAgIHBhZ2VTaXplOiA1MCwKICAgICAgICAgIHBhZ2VOYW1lOiAiIiwKICAgICAgICAgIHVzZXI6IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oImN1cnJlbnRVc2VyRGV0YWlscyIpKS5wcm9maWxlLnVzZXJuYW1lLAogICAgICAgICAgZGVmYXVsdFZpZXdGbGFnOiB0cnVlLAogICAgICAgICAgc29ydEZpZWxkOiAiIiwKICAgICAgICAgIHNvcnREaXJlY3Rpb246ICIiLAogICAgICAgICAgdGlsZUZsYWc6IHRydWUsCiAgICAgICAgICBwb3NpdGlvbjogMSwKICAgICAgICAgIC8vIGFsd2F5cyBwYXNzIDEKICAgICAgICAgIHByaXZhY3k6ICJwcml2YXRlIiwKICAgICAgICAgIGNvbHVtbnM6IFtdCiAgICAgICAgfQogICAgICB9LAogICAgICBwYXJlbnREYXRhOiBbXSwKICAgICAgZmlsdGVyQ291bnQ6ICIiLAogICAgICBzZHREYXRhOiAiIiwKICAgICAgZmllbGROYW1lczogW10sCiAgICAgIG9yZ0NvbmZpZ3NSZXNwb25zZTogbnVsbCAvLyAtLS0tLS0tLS0tLS0tIFNEVCBEYXRhIEVORCAtLS0tLS0tLS0tLS0tLS0tCgogICAgfTsKICB9LAoKICB3YXRjaDogewogICAgd29ya09yZGVyVHlwZTogZnVuY3Rpb24gKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIGlmIChuZXdWYWwgPT09ICJhcmNoaXZlZCIpIHsKICAgICAgICBsZXQgYWxsQ29uZmlncyA9IEpTT04ucGFyc2UodGhpcy5vcmdDb25maWdzUmVzcG9uc2UuZGF0YS50YWJsZUNvbmZpZ3MpOwogICAgICAgIGFsbENvbmZpZ3MgPSBhbGxDb25maWdzLmZpbHRlcihkYXRhID0+IGRhdGEucGFnZU5hbWUgPT09ICJhcmNoaXZlZFdvcmtPcmRlciIpWzBdOwogICAgICAgIHRoaXMuYXJjaGl2ZWRDb25maWdzID0gYWxsQ29uZmlnczsKICAgICAgfQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgc2VsZWN0V29ya09yZGVyVHlwZShvYmopIHsKICAgICAgdGhpcy5zZWxlY3RXb3JrT3JkZXIgPSBvYmoudmFsdWU7CiAgICB9LAoKICAgIGNsb3NlRGlhbG9nKCkgewogICAgICB0aGlzLmRlbGV0ZVdvcmtPcmRlckRpYWxvZyA9IGZhbHNlOwogICAgICB0aGlzLmFyY2hpdmVXb3JrT3JkZXJEaWFsb2cgPSBmYWxzZTsKICAgIH0sCgogICAgZGVsZXRlRGlhbG9nKCkgewogICAgICB0aGlzLmRlbGV0ZVdvcmtPcmRlckRpYWxvZyA9IGZhbHNlOwogICAgICB0aGlzLmRlbGV0ZVdvcmtPcmRlcih0aGlzLndvcmtPcmRlcklELCAiRGVsZXRlIik7CiAgICB9LAoKICAgIGFyY2hpdmVEaWFsb2coKSB7CiAgICAgIHRoaXMuYXJjaGl2ZVdvcmtPcmRlckRpYWxvZyA9IGZhbHNlOwogICAgICB0aGlzLmRlbGV0ZVdvcmtPcmRlcih0aGlzLndvcmtPcmRlcklELCAiQXJjaGl2ZSIpOwogICAgfSwKCiAgICBkZWxldGVXb3JrT3JkZXIodXVpZCwgdHlwZSkgewogICAgICB3b3JrT3JkZXJTZXJ2aWNlLmRlbGV0ZVdvcmtPcmRlckJ5VVVJRCh1dWlkLCB0eXBlKS50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgIGlmICh0eXBlID09PSAiRGVsZXRlIikgewogICAgICAgICAgICB0aGlzLnNob3dUb2FzdCgiRGVsZXRlZCBXb3JrIE9yZGVyIFN1Y2Nlc3NmdWxseSIsICJTdWNjZXNzIik7CiAgICAgICAgICAgIHRoaXMuZGVsZXRlV29ya09yZGVyRGlhbG9nID0gZmFsc2U7CiAgICAgICAgICAgIHRoaXMubG9hZFRhYmxlKHRoaXMuc2R0RGF0YSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLnNob3dUb2FzdCgiQXJjaGl2ZWQgV29yayBPcmRlciBTdWNjZXNzZnVsbHkiLCAiU3VjY2VzcyIpOwogICAgICAgICAgICB0aGlzLmFyY2hpdmVXb3JrT3JkZXJEaWFsb2cgPSBmYWxzZTsKICAgICAgICAgICAgdGhpcy5sb2FkVGFibGUodGhpcy5zZHREYXRhKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHt9KTsKICAgIH0sCgogICAgLy8gLS0tLS0tLS0tLS0tIFNEVCBGdW5jdGlvbnMgU1RBUlQgLS0tLS0tLS0tLS0tLS0KICAgIGdldEFjdGlvbnNPcHRpb24odmFsKSB7CiAgICAgIGlmICh2YWwudmFsdWUgPT0gIlZpZXciKSB7CiAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goewogICAgICAgICAgbmFtZTogIndvcmstb3JkZXItZGV0YWlscyIsCiAgICAgICAgICBwYXJhbXM6IHsKICAgICAgICAgICAgd29ya3V1aWQ6IHZhbC5yb3cudXVpZCwKICAgICAgICAgICAgdHlwZTogInZpZXciCiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGlmICh2YWwudmFsdWUgPT0gIkVkaXQiKSB7CiAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goewogICAgICAgICAgbmFtZTogImVkaXQtd29yay1vcmRlci1kZXRhaWxzIiwKICAgICAgICAgIHBhcmFtczogewogICAgICAgICAgICB3b3JrdXVpZDogdmFsLnJvdy51dWlkLAogICAgICAgICAgICB0eXBlOiAiZWRpdCIKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQoKICAgICAgaWYgKHZhbC52YWx1ZSA9PSAiQXJjaGl2ZSIpIHsKICAgICAgICBpZiAodmFsLnJvdy5zdGF0dXMgIT09ICJJbiBQcm9ncmVzcyIpIHsKICAgICAgICAgIHRoaXMud29ya09yZGVySUQgPSB2YWwucm93LnV1aWQ7CiAgICAgICAgICB0aGlzLmFyY2hpdmVXb3JrT3JkZXJEaWFsb2cgPSB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLnNob3dUb2FzdCgiWW91IGFyZSB1bmFibGUgdG8gYXJjaGl2ZSBhbiBpbi1wcm9ncmVzcyB3b3Jrb3JkZXIiLCAid2FybmluZyIpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKHZhbC52YWx1ZSA9PSAiRGVsZXRlIikgewogICAgICAgIGlmICh2YWwucm93LnN0YXR1cyAhPT0gIkluIFByb2dyZXNzIikgewogICAgICAgICAgdGhpcy53b3JrT3JkZXJJRCA9IHZhbC5yb3cudXVpZDsKICAgICAgICAgIHRoaXMuZGVsZXRlV29ya09yZGVyRGlhbG9nID0gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5zaG93VG9hc3QoIllvdSBhcmUgdW5hYmxlIHRvIGRlbGV0ZSBhbiBpbi1wcm9ncmVzcyB3b3Jrb3JkZXIiLCAid2FybmluZyIpOwogICAgICAgIH0KICAgICAgfQogICAgfSwKCiAgICBjb252ZXJ0VG9DU1Yob2JqQXJyYXkpIHsKICAgICAgdmFyIGFycmF5ID0gdHlwZW9mIG9iakFycmF5ICE9ICJvYmplY3QiID8gSlNPTi5wYXJzZShvYmpBcnJheSkgOiBvYmpBcnJheTsKICAgICAgdmFyIHN0ciA9ICIiOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBsaW5lID0gIiI7CgogICAgICAgIGZvciAodmFyIGluZGV4IGluIGFycmF5W2ldKSB7CiAgICAgICAgICBpZiAobGluZSAhPSAiIikgbGluZSArPSAiLCI7CiAgICAgICAgICBsaW5lICs9IGFycmF5W2ldW2luZGV4XTsKICAgICAgICB9CgogICAgICAgIHN0ciArPSBsaW5lICsgIlxyXG4iOwogICAgICB9CgogICAgICByZXR1cm4gc3RyOwogICAgfSwKCiAgICBnZXREb3dubG9hZEFzT3B0aW9uKG9wdCkgewogICAgICAvLyBjb25zb2xlLmxvZygnZG93bmxvYWQgYXMgb3B0aW9uJyxvcHQpOwogICAgICBpZiAob3B0Lm9wdGlvbiA9PSAicGRmIikgey8vIG5vdGlmaWNhdGlvbkFuZENvbW11bmljYXRpb25TZXJ2aWNlLmRvd25sb2FkU2VsZWN0ZWRQREYob2JqKQogICAgICAgIC8vIC50aGVuKChyZXMpID0+IHsKICAgICAgICAvLyAvLyBjb25zb2xlLmxvZyhyZXMpCiAgICAgICAgLy8gbGV0IGZpbGVDb250ZW50cyA9IG51bGw7CiAgICAgICAgLy8gICAgIGxldCBwb3B1cFdpbj1udWxsOwogICAgICAgIC8vICAgICBwb3B1cFdpbiA9IHdpbmRvdy5vcGVuKCcnLCAnX2JsYW5rJywgJ3RvcD0wLGxlZnQ9MCxoZWlnaHQ9NzAwLHdpZHRoPTEwMDA7Jyk7CiAgICAgICAgLy8gICAgIGxldCBkb2N1bWVudCA9IHsKICAgICAgICAvLyAgICAgICAgICdkb2N1bWVudE5hbWUnOiAnQmlsbGluZycKICAgICAgICAvLyAgICAgfTsKICAgICAgICAvLyBmaWxlQ29udGVudHMgPSByZXMuZGF0YS50eXBlICsgcmVzLmRhdGEuY29udGVudDsKICAgICAgICAvLyAgIHBvcHVwV2luLmRvY3VtZW50LndyaXRlKGAKICAgICAgICAvLyAgICAgPGh0bWw+CiAgICAgICAgLy8gICAgICAgICA8aGVhZD4KICAgICAgICAvLyAgICAgICAgICA8IS0tdGl0bGU+UHJpbnQgdGFiPC90aXRsZS0tPgogICAgICAgIC8vICAgICAgICAgICAgIDxzdHlsZT4KICAgICAgICAvLyAgICAgICAgICAgICAgICAgI2J1dHRvbnN7ZGlzcGxheTpub25lO30KICAgICAgICAvLyAgICAgICAgICAgICAgICAgIGJvZHkgewogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6ICJPcGVuIFNhbnMiLCAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsICJTZWdvZSBVSSIsIEV1Y2xpZCBDaXJjdWxhciBCLCAiSGVsdmV0aWNhIE5ldWUiLCBBcmlhbCwgc2Fucy1zZXJpZiwgIkFwcGxlIENvbG9yIEVtb2ppIiwgIlNlZ29lIFVJIEVtb2ppIiwgIlNlZ29lIFVJIFN5bWJvbCI7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDFyZW07CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNDAwOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjMjEyNTI5OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0KICAgICAgICAvLyAgICAgICAgICAgICAgICAgYnV0dG9uLCBtZXRlciwgcHJvZ3Jlc3MgewogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgLXdlYmtpdC13cml0aW5nLW1vZGU6IGhvcml6b250YWwtdGIgIWltcG9ydGFudDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgfQogICAgICAgIC8vICAgICAgICAgICAgICAgICBpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCwgYnV0dG9uIHsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRleHQtcmVuZGVyaW5nOiBhdXRvOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGluaXRpYWw7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogbm9ybWFsOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgd29yZC1zcGFjaW5nOiBub3JtYWw7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRleHQtaW5kZW50OiAwcHg7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0ZXh0LXNoYWRvdzogbm9uZTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IHN0YXJ0OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwZW07CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBmb250OiA0MDAgMTMuMzMzM3B4IEFyaWFsOwogICAgICAgIC8vICAgICAgICAgICAgICAgICB9CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGlucHV0W3R5cGU9ImJ1dHRvbiIgaV0sIGlucHV0W3R5cGU9InN1Ym1pdCIgaV0sIGlucHV0W3R5cGU9InJlc2V0IiBpXSwgaW5wdXRbdHlwZT0iZmlsZSIgaV06Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uLCBidXR0b24gewogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IGRlZmF1bHQ7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBjb2xvcjogYnV0dG9udGV4dDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IGJ1dHRvbmZhY2U7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMnB4IDZweCAzcHg7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBib3JkZXItd2lkdGg6IDJweDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1zdHlsZTogb3V0c2V0OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiBidXR0b25mYWNlOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWltYWdlOiBpbml0aWFsOwogICAgICAgIC8vICAgICAgICAgICAgICAgICB9CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGlucHV0LCBidXR0b24sIHNlbGVjdCwgb3B0Z3JvdXAsIHRleHRhcmVhIHsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBpbmhlcml0OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiBpbmhlcml0OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0KICAgICAgICAvLyAgICAgICAgICAgICAgICAgYnV0dG9uLCBzZWxlY3QgewogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0KICAgICAgICAvLyAgICAgICAgICAgICAgICAgLmJ0biB7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNDAwOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwLjM3NXJlbSAwLjc1cmVtOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxcmVtOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuMTVzIGVhc2UtaW4tb3V0LCBib3JkZXItY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQsIGJveC1zaGFkb3cgMC4xNXMgZWFzZS1pbi1vdXQ7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0KICAgICAgICAvLyAgICAgICAgICAgICAgICAgLmJ0bi1vdXRsaW5lLXByaW1hcnkgewogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICMwMDdiZmY7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6ICMwMDdiZmY7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0KICAgICAgICAvLyAgICAgICAgICAgICAgICAgLmJ0bi1vdXRsaW5lLXByaW1hcnkgewogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6ICNkMDMyMzI7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDAzMjMyOwogICAgICAgIC8vICAgICAgICAgICAgICAgICB9CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUgewogICAgICAgIC8vICAgICAgICAgICAgICAgICB9CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIDxzdHlsZT4uZmEgewogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZm9udDogbm9ybWFsIG5vcm1hbCBub3JtYWwgMTRweC8xIEZvbnRBd2Vzb21lOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiBpbmhlcml0OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGV4dC1yZW5kZXJpbmc6IGF1dG87CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH08L3N0eWxlPgogICAgICAgIC8vICAgICAgICAgICAgICAgICA8c3R5bGU+KiwgKjo6YmVmb3JlLCAqOjphZnRlciB7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgICAgIC8vICAgICAgICAgICAgICAgICB9CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIFN0eWxlIEF0dHJpYnV0ZSB7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0KICAgICAgICAvLyAgICAgICAgICAgICAgICAgLmJ0biwgLmZvcm0tY29udHJvbCB7CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwLjI1cmVtIDAuNXJlbTsKICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMC44NzVyZW07CiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMS41OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMC4zcmVtOwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAxNXB4OwogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAyM3B4OwogICAgICAgIC8vICAgICAgICAgICAgICAgICB9PC9zdHlsZT4KICAgICAgICAvLyAgICAgICAgICAgICA8L3N0eWxlPgogICAgICAgIC8vICAgICAgICAgPC9oZWFkPgogICAgICAgIC8vICAgICAgICAgPGJvZHkgb25sb2FkPSIiPgogICAgICAgIC8vICAgICAgICAgICAgIDxkaXYgc3R5bGU9InRleHQtYWxpZ246cmlnaHQ7IiA+CiAgICAgICAgLy8gICAgICAgICAgICAgICAgIDxhIGhyZWY9IiR7ZmlsZUNvbnRlbnRzfSIgZG93bmxvYWQ9IiR7ZG9jdW1lbnQuZG9jdW1lbnROYW1lfSI+PGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1zbSBidG4tb3V0bGluZS1wcmltYXJ5Ij5Eb3dubG9hZDwvYnV0dG9uPjwvYT4KICAgICAgICAvLyAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAvLyAgICAgICAgICAgICA8YnI+CiAgICAgICAgLy8gICAgICAgICAgICAgPGlmcmFtZSBzcmM9JyR7ZmlsZUNvbnRlbnRzfScgIHN0eWxlPSJtaW4td2lkdGg6IDEwMCU7aGVpZ2h0OiAxMDAlOyIgPjwvaWZyYW1lPgogICAgICAgIC8vICAgICAgICAgPC9ib2R5PgogICAgICAgIC8vICAgICA8L2h0bWw+YAogICAgICAgIC8vICk7CiAgICAgICAgLy8gfSkKICAgICAgICAvLyAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coZXJyKSk7CiAgICAgIH0gZWxzZSBpZiAob3B0Lm9wdGlvbiA9PSAiY3N2Iikgey8vIAlsZXQgZmlsZVRpdGxlID0gJ0JpbGxpbmdzJzsKICAgICAgICAvLyAJbGV0IGhlYWRlcnMgPSB7CiAgICAgICAgLy8gICAgICAgY3JlYXRlZERhdGU6ICdSZXF1ZXN0ZWQgT24nLnJlcGxhY2UoLywvZywgJycpLCAvLyByZW1vdmUgY29tbWFzIHRvIGF2b2lkIGVycm9ycwogICAgICAgIC8vICAgICAgIGR1ZURhdGU6ICJEdWUgRGF0ZSIsCiAgICAgICAgLy8gICAgICAgc2hpcG1lbnROdW1iZXI6ICJTaGlwbWVudCAjIiwKICAgICAgICAvLyAJCSAgcG9ydE9mTG9hZGluZzogIlBvcnQgb2YgTG9hZCIsCiAgICAgICAgLy8gCQkgIHBvcnRPZkRpc2NoYXJnZTogIlBvcnQgT2YgRGlzY2hhcmdlIiwKICAgICAgICAvLyAJCSAgYW1vdW50OiAiQW1vdW50IiwKICAgICAgICAvLyAJCSAgYmFsYW5jZTogIkJhbGFuY2UiLAogICAgICAgIC8vIAkJICBuZXRzdWl0ZVN0YXR1czogIlN0YXR1cyIKICAgICAgICAvLyAJfTsKICAgICAgICAvLyAJbGV0IGRhdGFPYmogPSBbXTsKICAgICAgICAvLyAJZm9yIChsZXQgaSA9IDA7IGkgPCBvcHQucm93cy5sZW5ndGg7IGkrKykgewogICAgICAgIC8vIAkJY29uc3QgYmlsbCA9IG9wdC5yb3dzW2ldOwogICAgICAgIC8vIAkJZGF0YU9iai5wdXNoKHsKICAgICAgICAvLyAJCQljcmVhdGVkRGF0ZTogYmlsbC5jcmVhdGVkRGF0ZSwKICAgICAgICAvLyAJCQlkdWVEYXRlOiBiaWxsLmR1ZURhdGUsCiAgICAgICAgLy8gCQkJc2hpcG1lbnROdW1iZXI6IGJpbGwuc2hpcG1lbnROdW1iZXIsCiAgICAgICAgLy8gCQkJcG9ydE9mTG9hZGluZzogYmlsbC5wb3J0T2ZMb2FkaW5nLAogICAgICAgIC8vIAkJCXBvcnRPZkRpc2NoYXJnZTogYmlsbC5wb3J0T2ZEaXNjaGFyZ2UsCiAgICAgICAgLy8gCQkJYW1vdW50OiBiaWxsLmFtb3VudCwKICAgICAgICAvLyAJCQliYWxhbmNlOiBiaWxsLmJhbGFuY2UsCiAgICAgICAgLy8gCQkJbmV0c3VpdGVTdGF0dXM6IGJpbGwubmV0c3VpdGVTdGF0dXMKICAgICAgICAvLyAJCX0pOwogICAgICAgIC8vIAl9CiAgICAgICAgLy8gCXRoaXMuZXhwb3J0Q1NWRmlsZShoZWFkZXJzLCBkYXRhT2JqLCBmaWxlVGl0bGUpOwogICAgICB9CiAgICB9LAoKICAgIC8vIGV4cG9ydENTVkZpbGUoaGVhZGVycywgYmlsbGluZ0RhdGEsIGZpbGVUaXRsZSkgewogICAgLy8gICAgIC8vIGlmIChoZWFkZXJzKSB7CiAgICAvLyAgICAgLy8gICAgIGJpbGxpbmdEYXRhLnVuc2hpZnQoaGVhZGVycyk7CiAgICAvLyAgICAgLy8gfQogICAgLy8gICAgIC8vIC8vIENvbnZlcnQgT2JqZWN0IHRvIEpTT04KICAgIC8vICAgICAvLyB2YXIganNvbk9iamVjdCA9IEpTT04uc3RyaW5naWZ5KGJpbGxpbmdEYXRhKTsKICAgIC8vICAgICAvLyB2YXIgY3N2ID0gdGhpcy5jb252ZXJ0VG9DU1YoanNvbk9iamVjdCk7CiAgICAvLyAgICAgLy8gdmFyIGV4cG9ydGVkRmlsZW5tYWUgPSBmaWxlVGl0bGUgKyAnLmNzdicgfHwgJ2V4cG9ydC5jc3YnOwogICAgLy8gICAgIC8vIHZhciBibG9iID0gbmV3IEJsb2IoW2Nzdl0sIHsgdHlwZTogJ3RleHQvY3N2O2NoYXJzZXQ9dXRmLTg7JyB9KTsKICAgIC8vICAgICAvLyBpZiAobmF2aWdhdG9yLm1zU2F2ZUJsb2IpIHsgLy8gSUUgMTArCiAgICAvLyAgICAgLy8gICAgIG5hdmlnYXRvci5tc1NhdmVCbG9iKGJsb2IsIGV4cG9ydGVkRmlsZW5tYWUpOwogICAgLy8gICAgIC8vIH0gZWxzZSB7CiAgICAvLyAgICAgLy8gICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpOwogICAgLy8gICAgIC8vICAgICBpZiAobGluay5kb3dubG9hZCAhPT0gdW5kZWZpbmVkKSB7IC8vIGZlYXR1cmUgZGV0ZWN0aW9uCiAgICAvLyAgICAgLy8gICAgICAgICAvLyBCcm93c2VycyB0aGF0IHN1cHBvcnQgSFRNTDUgZG93bmxvYWQgYXR0cmlidXRlCiAgICAvLyAgICAgLy8gICAgICAgICB2YXIgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTsKICAgIC8vICAgICAvLyAgICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKCJocmVmIiwgdXJsKTsKICAgIC8vICAgICAvLyAgICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKCJkb3dubG9hZCIsIGV4cG9ydGVkRmlsZW5tYWUpOwogICAgLy8gICAgIC8vICAgICAgICAgbGluay5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7CiAgICAvLyAgICAgLy8gICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxpbmspOwogICAgLy8gICAgIC8vICAgICAgICAgbGluay5jbGljaygpOwogICAgLy8gICAgIC8vICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChsaW5rKTsKICAgIC8vICAgICAvLyAgICAgfQogICAgLy8gICAgIC8vIH0KICAgIC8vIH0sCiAgICBzZXRUYWJsZUNvbmZpZ3MoKSB7CiAgICAgIHRoaXMucGFyZW50RGVmYXVsdFN5c3RlbVZpZXcuZGVmYXVsdFRhYmxlLmRlbnNpdHkgPSB0aGlzLnRhYmxlQ29uZmlnLmRlbnNpdHk7CiAgICAgIHRoaXMucGFyZW50RGVmYXVsdFN5c3RlbVZpZXcuZGVmYXVsdFRhYmxlLnBhZ2VTaXplID0gdGhpcy50YWJsZUNvbmZpZy5wYWdlU2l6ZTsKICAgICAgdGhpcy5wYXJlbnREZWZhdWx0U3lzdGVtVmlldy5kZWZhdWx0VGFibGUucGFnZU5hbWUgPSB0aGlzLnRhYmxlQ29uZmlnLnBhZ2VOYW1lOwogICAgICB0aGlzLnBhcmVudERlZmF1bHRTeXN0ZW1WaWV3LmRlZmF1bHRUYWJsZS5zb3J0RmllbGQgPSB0aGlzLnRhYmxlQ29uZmlnLnNvcnRGaWVsZDsKICAgICAgdGhpcy5wYXJlbnREZWZhdWx0U3lzdGVtVmlldy5kZWZhdWx0VGFibGUuc29ydERpcmVjdGlvbiA9IHRoaXMudGFibGVDb25maWcuc29ydERpcmVjdGlvbjsKICAgICAgdGhpcy5wYXJlbnREZWZhdWx0U3lzdGVtVmlldy5kZWZhdWx0VGFibGUuY29sdW1ucyA9IHRoaXMudGFibGVDb25maWcuY29sdW1uczsKICAgIH0sCgogICAgc2V0U3RhdGljQ29sdW1uKCkgewogICAgICBsZXQgc3RhdGljQ29sID0gdGhpcy50YWJsZUNvbmZpZy5jb2x1bW5zLmZpbHRlcihjb2wgPT4gY29sLmxhYmVsTmFtZSA9PSAiV29ya09yZGVyIE51bWJlciIpWzBdOwogICAgICB0aGlzLnBhcmVudFN5c3RlbVNldHRpbmdzLnN0YXRpY0NvbHVtbnMucHVzaChzdGF0aWNDb2wpOwoKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRhYmxlQ29uZmlnLmNvbHVtbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAodGhpcy50YWJsZUNvbmZpZy5jb2x1bW5zW2ldLmxhYmVsTmFtZSA9PSBzdGF0aWNDb2wubGFiZWxOYW1lKSB7CiAgICAgICAgICB0aGlzLnRhYmxlQ29uZmlnLmNvbHVtbnMuc3BsaWNlKGksIDEpOwogICAgICAgIH0KICAgICAgfQogICAgfSwKCiAgICBleHRyYWN0RmllbGROYW1lc0ZvclNlYXJjaFF1ZXJ5KGNvbmZpZykgewogICAgICBmb3IgKGxldCBjb2x1bW4gb2YgY29uZmlnLmNvbHVtbnMpIHsKICAgICAgICB0aGlzLmZpZWxkTmFtZXMucHVzaChjb2x1bW4uZmllbGROYW1lKTsKICAgICAgfQogICAgfSwKCiAgICBjYXRjaERlcGFydHVyZTogZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgdGhpcy5zZHREYXRhID0gZGF0YTsKCiAgICAgIGlmIChkYXRhLnN0YXR1cyA9PSAxIHx8IGRhdGEuc3RhdHVzID09IDMpIHsKICAgICAgICB0aGlzLmxvYWRUYWJsZShkYXRhKTsKICAgICAgfSBlbHNlIGlmIChkYXRhLnN0YXR1cyA9PSA0KSB7CiAgICAgICAgdGhpcy5sb2FkVGFibGUoZGF0YSk7CiAgICAgIH0gZWxzZSBpZiAoZGF0YS5zdGF0dXMgPT0gMTApIHt9CiAgICB9LAoKICAgIG9wZW5DcmVhdGVXb3JrT3JkZXIoKSB7CiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICBuYW1lOiAiY3JlYXRlLXdvcmstb3JkZXIiCiAgICAgIH0pOwogICAgfSwKCiAgICBsb2FkVGFibGUoc2R0RGF0YSkgewogICAgICBsZXQgZmlsdGVycyA9IFtdOwogICAgICB0aGlzLmxvYWRlckZsYWcgPSB0cnVlOwoKICAgICAgZm9yIChsZXQgc2R0X2RhdGEgb2Ygc2R0RGF0YS5tZXNzYWdlKSB7CiAgICAgICAgaWYgKHNkdF9kYXRhLmZpZWxkTmFtZSAhPT0gImFjdGlvbnMiKSB7CiAgICAgICAgICBsZXQgbmV3RGF0ZSA9ICIiOwoKICAgICAgICAgIGlmIChzZHRfZGF0YS5maWVsZFR5cGUgPT09ICJkYXRlIiAmJiBzZHRfZGF0YS5maWx0ZXJWYWx1ZSAhPT0gIiIpIHsKICAgICAgICAgICAgbGV0IGRhdGUgPSBzZHRfZGF0YS5maWx0ZXJWYWx1ZS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICBkYXRlID0gZGF0ZS5zcGxpdCgiLyIpOwogICAgICAgICAgICBuZXdEYXRlID0gbmV3IERhdGUoYCR7ZGF0ZVsxXX0vJHtkYXRlWzBdfS8ke2RhdGVbMl19YCk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHNkdF9kYXRhLmZpbHRlclZhbHVlID09PSBudWxsKSB7CiAgICAgICAgICAgIHNkdF9kYXRhLmZpbHRlclZhbHVlID0gIiI7CiAgICAgICAgICB9CgogICAgICAgICAgZmlsdGVycy5wdXNoKHsKICAgICAgICAgICAgZmllbGROYW1lOiBzZHRfZGF0YS5maWVsZE5hbWUsCiAgICAgICAgICAgIGZpZWxkVHlwZTogc2R0X2RhdGEuZmllbGRUeXBlLAogICAgICAgICAgICBmaWx0ZXJWYWx1ZTogbmV3RGF0ZSA9PT0gbnVsbCB8fCBuZXdEYXRlID09PSAiIiA/IHNkdF9kYXRhLmZpbHRlclZhbHVlIDogbmV3RGF0ZS5nZXRUaW1lKCksCiAgICAgICAgICAgIHNlY29uZFZhbHVlOiBzZHRfZGF0YS5zZWNvbmRWYWx1ZSwKICAgICAgICAgICAgY29tcGFyaXNvblR5cGU6IHNkdF9kYXRhLmNvbXBhcmlzb25UeXBlCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHRoaXMuZ2V0UGFnaW5hdGVkV29ya09yZGVycyhmaWx0ZXJzLCBzZHREYXRhLmRhdGEuc29ydEZpZWxkLCBzZHREYXRhLmRhdGEuc29ydERpcmVjdGlvbiwgc2R0RGF0YS5kYXRhLm9mZnNldCwgc2R0RGF0YS5kYXRhLmxpbWl0LCBzZHREYXRhLmRhdGEuc2VhcmNoUXVlcnkpOwogICAgfSwKCiAgICBsb2FkU0RUKHJlc3BvbnNlLCBkYXRhKSB7CiAgICAgIHRoaXMucGFyZW50RGF0YSA9IGRhdGE7CiAgICAgIGxldCBldmVudERhdGEgPSB7CiAgICAgICAgZGF0YTogdGhpcy5wYXJlbnREYXRhLAogICAgICAgIHRvdGFsRWxlbWVudHM6IHJlc3BvbnNlLmRhdGEuc2R0RGF0YS50b3RhbEVsZW1lbnRzLAogICAgICAgIHRvdGFsUGFnZXM6IHJlc3BvbnNlLmRhdGEuc2R0RGF0YS50b3RhbFBhZ2VzLAogICAgICAgIHBhZ2VOdW1iZXI6IHJlc3BvbnNlLmRhdGEuc2R0RGF0YS5vZmZzZXQKICAgICAgfTsKICAgICAgdGhpcy4kcmVmcy50ZXN0LmRhdGFMb2FkRXZlbnQoZXZlbnREYXRhKTsKICAgIH0sCgogICAgZ2V0UGFnaW5hdGVkV29ya09yZGVycyhmaWx0ZXJzLCBzb3J0RmllbGQsIHNvcnREaXJlY3Rpb24sIG9mZnNldCwgbGltaXQsIHNlYXJjaFF1ZXJ5KSB7CiAgICAgIGxldCBjdXJyZW50VXNlckRldGFpbHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJjdXJyZW50VXNlckRldGFpbHMiKSk7CiAgICAgIGxldCByZXF1ZXN0T2JqID0gewogICAgICAgIHNlYXJjaFF1ZXJ5OiBzZWFyY2hRdWVyeSwKICAgICAgICBmaWVsZE5hbWVzOiB0aGlzLmZpZWxkTmFtZXMsCiAgICAgICAgZmlsdGVyczogZmlsdGVycywKICAgICAgICBzb3J0RmllbGQ6IHNvcnRGaWVsZCwKICAgICAgICBzb3J0RGlyZWN0aW9uOiBzb3J0RGlyZWN0aW9uLAogICAgICAgIG9mZnNldDogb2Zmc2V0LAogICAgICAgIGxpbWl0OiBsaW1pdCwKICAgICAgICB0ZW5hbnRVVUlEOiBjdXJyZW50VXNlckRldGFpbHMucHJvZmlsZS5vcmdhbml6YXRpb25JZCwKICAgICAgICBhcmNoaXZlZDogZmFsc2UKICAgICAgfTsKICAgICAgd29ya09yZGVyU2VydmljZS5nZXRQYWdpbmF0ZWRXb3JrT3JkZXJGb3JTRFQocmVxdWVzdE9iaikudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PSAyMDApIHsKICAgICAgICAgIHJlc3BvbnNlLmRhdGEuc2R0RGF0YS5jb250ZW50Lm1hcChpdGVtID0+IHsKICAgICAgICAgICAgaXRlbS5zY2hlZHVsZSA9IG1vbWVudC51dGMoaXRlbS5zY2hlZHVsZSkubG9jYWwoKS5mb3JtYXQoJ0REL01NL1lZWVkgaGg6bW0gYScpOwogICAgICAgICAgfSk7CiAgICAgICAgICBsZXQgd29ya09yZGVycyA9IHJlc3BvbnNlLmRhdGEuc2R0RGF0YS5jb250ZW50OwogICAgICAgICAgcmVzcG9uc2UuZGF0YS5zZHREYXRhLm9mZnNldCA9IG9mZnNldCArIDE7CiAgICAgICAgICB0aGlzLmxvYWRTRFQocmVzcG9uc2UsIHdvcmtPcmRlcnMpOwogICAgICAgICAgdGhpcy5sb2FkZXJGbGFnID0gZmFsc2U7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgdGhpcy5zaG93VG9hc3QoIk9wcHMgaXQgbG9va3MgbGlrZSBvdXIgc2VydmVyIGlzIG9mZmxpbmUiLCAiZXJyb3IiKTsKICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2UgIT09IHVuZGVmaW5lZCAmJiBlcnJvci5yZXNwb25zZS5zdGF0dXMgPT09IDQwNikgewogICAgICAgICAgdGhpcy5zaG93VG9hc3QoZXJyb3IucmVzcG9uc2UuZGF0YS5kZXNjcmlwdGlvbiwgImVycm9yIik7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCgogICAgLy8gLS0tLS0tLS0tLS0tIFNEVCBGdW5jdGlvbnMgRU5EIC0tLS0tLS0tLS0tLS0tCiAgICBzaG93VG9hc3QobWVzc2FnZSwgdHlwZSkgewogICAgICB0aGlzLnRvYXN0TWVzc2FnZSA9IG1lc3NhZ2U7CiAgICAgIHRoaXMudG9hc3RUeXBlID0gdHlwZTsKICAgICAgdGhpcy50b2FzdEZsYWcrKzsKICAgIH0KCiAgfSwKCiAgbW91bnRlZCgpIHsKICAgIGRvY3VtZW50LnRpdGxlID0gdGhpcy4kcm91dGUubWV0YS50aXRsZTsKICAgIGxldCBjdXJyZW50VXNlckRldGFpbHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJjdXJyZW50VXNlckRldGFpbHMiKSk7CgogICAgaWYgKHRoaXMuJHJvdXRlLnBhcmFtcy50b2FzdEZsYWcpIHsKICAgICAgdGhpcy5zaG93VG9hc3QodGhpcy4kcm91dGUucGFyYW1zLm1lc3NhZ2UsIHRoaXMuJHJvdXRlLnBhcmFtcy50b2FzdFR5cGUpOwogICAgfQoKICAgIGlmIChjdXJyZW50VXNlckRldGFpbHMgPT09IG51bGwpIHsKICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oImZvcmNlU2lnbm91dCIsICJ5ZXMiKTsKICAgICAgcmV0dXJuOwogICAgfSAvLyBzZW5kaW5nIG9ubHkgZmlyc3QgYW5kIGxhc3QgbmFtZSBmb3IgU0RUCgoKICAgIGxldCBuYW1lID0gY3VycmVudFVzZXJEZXRhaWxzLnByb2ZpbGUudXNlcm5hbWU7CgogICAgaWYgKG5hbWUuaW5jbHVkZXMoIkAiKSkgewogICAgICBuYW1lID0gbmFtZS5zcGxpdCgiQCIpOwogICAgICBuYW1lID0gbmFtZVswXTsKICAgIH0KCiAgICB0aGlzLnBhcmVudFN5c3RlbVNldHRpbmdzLnVzZXIgPSBuYW1lOyAvLyBmZXRjaGluZyBjb25maWdzCgogICAgbGV0IHV1aWQgPSBjdXJyZW50VXNlckRldGFpbHMucHJvZmlsZS5vcmdhbml6YXRpb25JZDsKICAgIGFzc2V0UGVyc29ubmVsU2VydmljZS5nZXRPcmdDb25maWdzKHV1aWQsICJ0YWJsZUNvbmZpZ3MiKS50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgdGhpcy5vcmdDb25maWdzUmVzcG9uc2UgPSByZXNwb25zZTsKICAgICAgbGV0IGFsbENvbmZpZ3MgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmRhdGEudGFibGVDb25maWdzKTsKICAgICAgdGhpcy50YWJsZUNvbmZpZyA9IGFsbENvbmZpZ3MuZmlsdGVyKGRhdGEgPT4gZGF0YS5wYWdlTmFtZSA9PT0gImFyY2hpdmVkV29ya09yZGVyIilbMF07CiAgICAgIHRoaXMuZXh0cmFjdEZpZWxkTmFtZXNGb3JTZWFyY2hRdWVyeSh0aGlzLnRhYmxlQ29uZmlnKTsKICAgICAgdGhpcy5zZXRTdGF0aWNDb2x1bW4oKTsKICAgICAgdGhpcy5zZXRUYWJsZUNvbmZpZ3MoKTsKICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgY29uc29sZS5sb2coIkVycm9yIGZldGNoaW5nIGNvbmZpZ3MiLCBlcnJvcik7CiAgICB9KTsKICB9LAoKICB2YWxpZGF0aW9uczogZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHt9OwogIH0sCiAgY29tcHV0ZWQ6IHt9Cn07"},null]}