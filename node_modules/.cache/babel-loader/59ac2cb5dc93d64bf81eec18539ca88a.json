{"remainingRequest":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/babel-loader/lib/index.js!/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/eslint-loader/index.js??ref--14-0!/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/src/services/AssetPersonnelService.js","dependencies":[{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/src/services/AssetPersonnelService.js","mtime":1661968702408},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/babel.config.js","mtime":1661968702388},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/cache-loader/dist/cjs.js","mtime":1662622637759},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/babel-loader/lib/index.js","mtime":1662622637719},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/eslint-loader/index.js","mtime":1662622638199}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKaW1wb3J0IEVuZFBvaW50cyBmcm9tICcuL0VuZFBvaW50cyc7CmV4cG9ydCBjb25zdCBBc3NldFBlcnNvbm5lbFNlcnZpY2UgPSB7CiAgYXN5bmMgc2F2ZVVzZXJUb2tlbihib2R5KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRQZXJzb25uZWxTZXJ2aWNlLmFzc2V0UGVyc29ubmVsICsgJy90b2tlbnMnOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5wb3N0KHVybCwgSlNPTi5zdHJpbmdpZnkoYm9keSkpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICBpZiAocmVzcG9uc2VKc29uLmRhdGEucmVzcG9uc2VDb2RlID09PSAnMjAwJykgewogICAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICAvLyBkZWJ1Z2dlcjsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBkZWxldGVVc2VyVG9rZW4odXNlcnV1aWQpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldFBlcnNvbm5lbFNlcnZpY2UuYXNzZXRQZXJzb25uZWwgKyAnL3Rva2Vucz91c2VydXVpZD0nICsgdXNlcnV1aWQgKyAiJmNsaWVudHR5cGU9d2ViIjsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZGVsZXRlKHVybCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZ2V0T3JnQ29uZmlncyh0ZW5hbnR1dWlkLCBjb25maWdUeXBlKSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRQZXJzb25uZWxTZXJ2aWNlLmFzc2V0UGVyc29ubmVsICsgJy9vcmdDb25maWc/b3JnVVVJRD0nICsgdGVuYW50dXVpZCArICcmY29uZmlnVHlwZT0nICsgY29uZmlnVHlwZTsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIGlmIChyZXNwb25zZUpzb24uc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdzc3Nzc3Nzc3Nzc3Nzc3MnLHJlc3BvbnNlSnNvbikKICAgICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRBbGxVc2Vycyh0ZW5hbnR1dWlkKSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRQZXJzb25uZWxTZXJ2aWNlLmFzc2V0UGVyc29ubmVsICsgJy91c2Vycy9hbGw/dGVuYW50dXVpZD0nICsgdGVuYW50dXVpZDsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIGlmIChyZXNwb25zZUpzb24uc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRVc2VyTmFtZUFuZFVVSUQodGVuYW50dXVpZCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0UGVyc29ubmVsU2VydmljZS5hc3NldFBlcnNvbm5lbCArICcvdXNlcnMvbmFtZT90ZW5hbnRVVUlEPScgKyB0ZW5hbnR1dWlkOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5nZXQodXJsKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgaWYgKHJlc3BvbnNlSnNvbi5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldFBhZ2luYXRlZFVzZXJzRm9yU0RUKHJlcXVlc3RPYmplY3QpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldFBlcnNvbm5lbFNlcnZpY2UuYXNzZXRQZXJzb25uZWwgKyAnL3VzZXJzL3NkdCc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnBvc3QodXJsLCByZXF1ZXN0T2JqZWN0KS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRBbGxVc2Vyc01hbmFnZW1lbnQob2Zmc2V0LCBsaW1pdCwgdGVuYW50dXVpZCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0UGVyc29ubmVsU2VydmljZS5hc3NldFBlcnNvbm5lbCArICcvdXNlcnM/b2Zmc2V0PScgKyBvZmZzZXQgKyAnJmxpbWl0PScgKyBsaW1pdCArICcmdGVuYW50dXVpZD0nICsgdGVuYW50dXVpZDsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIGlmIChyZXNwb25zZUpzb24uc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXROYW1lT2ZVc2Vyc0J5VVVJRFModXVpZHMpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldFBlcnNvbm5lbFNlcnZpY2UuYXNzZXRQZXJzb25uZWwgKyAnL3VzZXJzL2lzc3Vlcy90YWJsZXZpZXcnOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5wb3N0KHVybCwgdXVpZHMpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldEFzc2lnbmVkVXNlcnNPZkFzc2V0KGFzc2V0dXVpZCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0UGVyc29ubmVsU2VydmljZS5hc3NldFBlcnNvbm5lbCArICcvYXNzaWdubWVudHM/YXNzZXR1dWlkPScgKyBhc3NldHV1aWQ7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmdldCh1cmwpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGRlbGV0ZVBvc3RBc3NpZ25tZW50QnlVVUlEKHV1aWQpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldFBlcnNvbm5lbFNlcnZpY2UuYXNzZXRQZXJzb25uZWwgKyAnL3Bvc3QvYXNzaWdubWVudD91dWlkPScgKyB1dWlkOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5kZWxldGUodXJsKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyB1bmFzc2lnbkFzc2V0KERlbGV0ZUFzc2lnbm1lbnRSZWNvcmRSZXF1ZXN0KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRQZXJzb25uZWxTZXJ2aWNlLmFzc2V0UGVyc29ubmVsICsgJy9hc3NpZ25tZW50cyc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnB1dCh1cmwsIERlbGV0ZUFzc2lnbm1lbnRSZWNvcmRSZXF1ZXN0KS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRVc2VyRGV0YWlsQnlBc3NldElkQW5kVXNlcklkKGFzc2V0dXVpZCwgdXNlcnV1aWQpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldFBlcnNvbm5lbFNlcnZpY2UuYXNzZXRQZXJzb25uZWwgKyAnL2Fzc2lnbm1lbnRzL3VzZXI/YXNzZXR1dWlkPScgKyBhc3NldHV1aWQgKyAnJnVzZXJ1dWlkPScgKyB1c2VydXVpZDsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgYWRkQXNzaWdubWVudFJlY29yZChhZGRBc3NpZ25tZW50UmVjb3JkUmVxdWVzdCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0UGVyc29ubmVsU2VydmljZS5hc3NldFBlcnNvbm5lbCArICcvYXNzaWdubWVudHMnOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5wb3N0KHVybCwgYWRkQXNzaWdubWVudFJlY29yZFJlcXVlc3QpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIHNlbmROb3RpZmljYXRpb25Ub0Fzc2lnbmVkVXNlcnMoYWRkQXNzaWdubWVudFJlY29yZFJlcXVlc3QpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldFBlcnNvbm5lbFNlcnZpY2UuYXNzZXRQZXJzb25uZWwgKyAnL25vdGlmaWNhdGlvbnMvYXNzaWdubWVudCc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnBvc3QodXJsLCBhZGRBc3NpZ25tZW50UmVjb3JkUmVxdWVzdCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZWRpdEFzc2lnbm1lbnRSZWNvcmQoYWRkQXNzaWdubWVudFJlY29yZFJlcXVlc3QpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldFBlcnNvbm5lbFNlcnZpY2UuYXNzZXRQZXJzb25uZWwgKyAnL2Fzc2lnbm1lbnQnOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5wdXQodXJsLCBhZGRBc3NpZ25tZW50UmVjb3JkUmVxdWVzdCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZ2V0QXNzaWdubWVudEhpc3RvcnlCeUFzc2V0KGFzc2V0dXVpZCwgb2Zmc2V0LCBsaW1pdCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0UGVyc29ubmVsU2VydmljZS5hc3NldFBlcnNvbm5lbCArICcvYXNzaWdubWVudHMvaGlzdG9yeT9hc3NldHV1aWQ9JyArIGFzc2V0dXVpZCArICcmb2Zmc2V0PScgKyBvZmZzZXQgKyAnJmxpbWl0PScgKyBsaW1pdDsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZ2V0VXNlcih1dWlkKSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRQZXJzb25uZWxTZXJ2aWNlLmFzc2V0UGVyc29ubmVsICsgJy91c2Vycz9pZD0nICsgdXVpZDsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZ2V0Um9sZShyb2xlTmFtZSwgb3JnSWQpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldFBlcnNvbm5lbFNlcnZpY2UuYXNzZXRQZXJzb25uZWwgKyAnL3JvbGVzP25hbWU9JyArIHJvbGVOYW1lICsgJyZvcmdhbml6YXRpb25VVUlEPScgKyBvcmdJZDsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgY3JlYXRlUm9sZShjcmVhdGVSb2xlUmVxdWVzdCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0UGVyc29ubmVsU2VydmljZS5hc3NldFBlcnNvbm5lbCArICcvcm9sZXMnOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5wb3N0KHVybCwgY3JlYXRlUm9sZVJlcXVlc3QpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGNyZWF0ZUNvbXBhbnkoY29tcGFueSkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0UGVyc29ubmVsU2VydmljZS5hc3NldFBlcnNvbm5lbCArICcvcmVnaXN0ZXInOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5wb3N0KHVybCwgY29tcGFueSkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgY3JlYXRlQ3VycmVuY3koYm9keSkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0UGVyc29ubmVsU2VydmljZS5hc3NldFBlcnNvbm5lbCArICcvY29tcGFueS9jdXJyZW5jeSc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnBvc3QodXJsLCBKU09OLnN0cmluZ2lmeShib2R5KSkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZGVsZXRlQ29tcGFueSh1dWlkKSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRQZXJzb25uZWxTZXJ2aWNlLmFzc2V0UGVyc29ubmVsICsgJy9jb21wYW55P2lkPScgKyB1dWlkOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5kZWxldGUodXJsKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRBc3NpZ25tZW50Q291bnQoYXNzZXROdW1iZXIpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldFBlcnNvbm5lbFNlcnZpY2UuYXNzZXRQZXJzb25uZWwgKyAnL2Fzc2lnbm1lbnRzL2NvdW50P2Fzc2V0VVVJRD0nICsgYXNzZXROdW1iZXI7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmdldCh1cmwpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldENvbXBhbnkodXVpZCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0UGVyc29ubmVsU2VydmljZS5hc3NldFBlcnNvbm5lbCArICcvY29tcGFueT9pZD0nICsgdXVpZDsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZ2V0Q29tcGFueUN1cnJlbmN5KHV1aWQpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldFBlcnNvbm5lbFNlcnZpY2UuYXNzZXRQZXJzb25uZWwgKyAnL2NvbXBhbnkvY3VycmVuY3k/dGVuYW50dXVpZD0nICsgdXVpZDsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgdXBkYXRlVXNlcihib2R5KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRQZXJzb25uZWxTZXJ2aWNlLmFzc2V0UGVyc29ubmVsICsgJy91c2Vycyc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnB1dCh1cmwsIEpTT04uc3RyaW5naWZ5KGJvZHkpKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgY29uc29sZS5lcnJvcihKU09OLnN0cmluZ2lmeShlKSk7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgdXBkYXRlQ29tcGFueShib2R5KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRQZXJzb25uZWxTZXJ2aWNlLmFzc2V0UGVyc29ubmVsICsgJy9jb21wYW55JzsgLy8gY29uc29sZS5sb2coYm9keSkKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucHV0KHVybCwgSlNPTi5zdHJpbmdpZnkoYm9keSkpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICBjb25zb2xlLmVycm9yKEpTT04uc3RyaW5naWZ5KGUpKTsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBjcmVhdGVVc2VyKGJvZHkpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldFBlcnNvbm5lbFNlcnZpY2UuYXNzZXRQZXJzb25uZWwgKyAnL3VzZXJzJzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwsIEpTT04uc3RyaW5naWZ5KGJvZHkpKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgY29uc29sZS5lcnJvcihKU09OLnN0cmluZ2lmeShlKSk7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgY3JlYXRlR3JvdXAoYm9keSkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0UGVyc29ubmVsU2VydmljZS5hc3NldFBlcnNvbm5lbCArICcvdXNlcnMvZ3JvdXAnOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5wb3N0KHVybCwgSlNPTi5zdHJpbmdpZnkoYm9keSkpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICBjb25zb2xlLmVycm9yKEpTT04uc3RyaW5naWZ5KGUpKTsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyB1cGRhdGVHcm91cChib2R5KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRQZXJzb25uZWxTZXJ2aWNlLmFzc2V0UGVyc29ubmVsICsgJy91c2Vycy9ncm91cHMnOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5wdXQodXJsLCBKU09OLnN0cmluZ2lmeShib2R5KSkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoSlNPTi5zdHJpbmdpZnkoZSkpOwogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldFVzZXJHcm91cE5hbWVBbmRVVUlEKHRlbmFudFVVSUQsIG9mZnNldCwgbGltaXQpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldFBlcnNvbm5lbFNlcnZpY2UuYXNzZXRQZXJzb25uZWwgKyAnL3VzZXJzL2dyb3VwL3BhZ2UnOwogICAgY29uc3QgcGFyYW1zID0gewogICAgICB0ZW5hbnR1dWlkOiB0ZW5hbnRVVUlELAogICAgICBvZmZzZXQ6IG9mZnNldCwKICAgICAgbGltaXQ6IGxpbWl0CiAgICB9OwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5nZXQodXJsLCB7CiAgICAgICAgcGFyYW1zOiBwYXJhbXMKICAgICAgfSkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldFBhZ2luYXRlZFVzZXJHcm91cHNGb3JTRFQocmVxdWVzdE9iaikgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0UGVyc29ubmVsU2VydmljZS5hc3NldFBlcnNvbm5lbCArICcvZ3JvdXBzL3NkdCc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnBvc3QodXJsLCByZXF1ZXN0T2JqKS50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2U7CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZ2V0UGFnaW5hdGVkTm90aWZpY2F0aW9ucyh1c2VydXVpZCwgb2Zmc2V0LCBsaW1pdCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0UGVyc29ubmVsU2VydmljZS5hc3NldFBlcnNvbm5lbCArICcvbm90aWZpY2F0aW9ucyc7CiAgICBjb25zdCBwYXJhbXMgPSB7CiAgICAgIHVzZXJ1dWlkOiB1c2VydXVpZCwKICAgICAgb2Zmc2V0OiBvZmZzZXQsCiAgICAgIGxpbWl0OiBsaW1pdAogICAgfTsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCwgewogICAgICAgIHBhcmFtczogcGFyYW1zCiAgICAgIH0pLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgIHJldHVybiByZXNwb25zZTsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRBbGxVc2VyR3JvdXAodGVuYW50VVVJRCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0UGVyc29ubmVsU2VydmljZS5hc3NldFBlcnNvbm5lbCArICcvdXNlcnMvZ3JvdXAnOwogICAgY29uc3QgcGFyYW1zID0gewogICAgICB0ZW5hbnR1dWlkOiB0ZW5hbnRVVUlECiAgICB9OwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5nZXQodXJsLCB7CiAgICAgICAgcGFyYW1zOiBwYXJhbXMKICAgICAgfSkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldFVzZXJBc3NldHNCeVVzZXJVdWlkKHV1aWQpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldFBlcnNvbm5lbFNlcnZpY2UuYXNzZXRQZXJzb25uZWwgKyAnL2Fzc2V0cy91c2VyJzsKICAgIGNvbnN0IHBhcmFtcyA9IHsKICAgICAgdXVpZDogdXVpZAogICAgfTsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCwgewogICAgICAgIHBhcmFtczogcGFyYW1zCiAgICAgIH0pLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgIHJldHVybiByZXNwb25zZTsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRVc2VyR3JvdXBBc3NldHNCeVVzZXJHcm91cFV1aWQodXVpZCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0UGVyc29ubmVsU2VydmljZS5hc3NldFBlcnNvbm5lbCArICcvYXNzZXRzL3VzZXItZ3JvdXAnOwogICAgY29uc3QgcGFyYW1zID0gewogICAgICB1dWlkOiB1dWlkCiAgICB9OwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5nZXQodXJsLCB7CiAgICAgICAgcGFyYW1zOiBwYXJhbXMKICAgICAgfSkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGNoZWNrQXNzaWdubWVudE9mQW5Bc3NldEJ5VVVJRCh1dWlkKSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRQZXJzb25uZWxTZXJ2aWNlLmFzc2V0UGVyc29ubmVsICsgJy9hc3NldC9hc3NpZ25tZW50P3V1aWQ9JyArIHV1aWQ7IC8vIGNvbnN0IHBhcmFtcyA9IHsKICAgIC8vICAgICB1dWlkOiB1dWlkLAogICAgLy8gfTsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldFVzZXJHcm91cEJ5VVVJRChncm91cFVVSUQpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldFBlcnNvbm5lbFNlcnZpY2UuYXNzZXRQZXJzb25uZWwgKyAnL3VzZXJzL2dyb3VwJzsKICAgIGNvbnN0IHBhcmFtcyA9IHsKICAgICAgdXVpZDogZ3JvdXBVVUlECiAgICB9OwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5nZXQodXJsLCB7CiAgICAgICAgcGFyYW1zOiBwYXJhbXMKICAgICAgfSkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGFkZFVzZXJzVG9Hcm91cChncm91cFVVSUQsIHVzZXJVVUlEcykgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0UGVyc29ubmVsU2VydmljZS5hc3NldFBlcnNvbm5lbCArICcvdXNlcnMvZ3JvdXAnOwogICAgY29uc3QgYm9keSA9IHsKICAgICAgZ3JvdXBVVUlEOiBncm91cFVVSUQsCiAgICAgIHVzZXJVVUlEczogdXNlclVVSURzCiAgICB9OwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5wdXQodXJsLCBKU09OLnN0cmluZ2lmeShib2R5KSkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGRlbGV0ZVVzZXJzRnJvbUdyb3VwKGdyb3VwVVVJRCwgdXNlclVVSURzKSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRQZXJzb25uZWxTZXJ2aWNlLmFzc2V0UGVyc29ubmVsICsgJy91c2Vycy9ncm91cHMnOwogICAgY29uc3QgYm9keSA9IHsKICAgICAgZ3JvdXBVVUlEOiBncm91cFVVSUQsCiAgICAgIHVzZXJVVUlEczogdXNlclVVSURzCiAgICB9OwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5wb3N0KHVybCwgSlNPTi5zdHJpbmdpZnkoYm9keSkpLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgIHJldHVybiByZXNwb25zZTsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRBbGxSb2xlcyhvcmdhbml6YXRpb25VVUlEKSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRQZXJzb25uZWxTZXJ2aWNlLmFzc2V0UGVyc29ubmVsICsgJy9yb2xlcy9hbGw/b3JnYW5pemF0aW9uVVVJRD0nICsgb3JnYW5pemF0aW9uVVVJRDsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIHNhdmVBbGxSb2xlcyhyb2xlcykgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0UGVyc29ubmVsU2VydmljZS5hc3NldFBlcnNvbm5lbCArICcvcm9sZXMvdXBkYXRlL2FsbCc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnBvc3QodXJsLCByb2xlcykudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGRlbGV0ZVJvbGUocm9sZU5hbWUsIG9yZ2FuaXphdGlvblVVSUQpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldFBlcnNvbm5lbFNlcnZpY2UuYXNzZXRQZXJzb25uZWwgKyAnL3JvbGVzP25hbWU9JyArIHJvbGVOYW1lICsgJyZvcmdhbml6YXRpb25VVUlEPScgKyBvcmdhbml6YXRpb25VVUlEOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5kZWxldGUodXJsKS50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2U7CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgY3JlYXRlSXNzdWVOb3RpZmNpYXRpb24oYXNzZXR1dWlkLCBpc3N1ZU51bWJlcikgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0UGVyc29ubmVsU2VydmljZS5hc3NldFBlcnNvbm5lbCArICcvaXNzdWVzL25vdGlmaWNhdGlvbnM/YXNzZXR1dWlkPScgKyBhc3NldHV1aWQgKyAnJmlzc3VlTnVtYmVyPScgKyBpc3N1ZU51bWJlcjsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwpLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgIHJldHVybiByZXNwb25zZTsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBjb3B5UGFyZW50T3JnQ29uZmlnc1RvQ3VzdG9tZXJPcmdDb25maWdzKHBhcmVudE9yZ1VVSUQsIGN1c3RvbWVyT3JnVVVJRCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0UGVyc29ubmVsU2VydmljZS5hc3NldFBlcnNvbm5lbCArICcvb3JnQ29uZmlnL3RhcmdldE9yZ0NvbmZpZz9wYXJlbnRPcmdVVUlEPScgKyBwYXJlbnRPcmdVVUlEICsgJyZ0YXJnZXRPcmdVVUlEPScgKyBjdXN0b21lck9yZ1VVSUQ7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnBvc3QodXJsKS50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2U7CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgdXBkYXRlT3JnQ29uZmlnKHJlcXVlc3QpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldFBlcnNvbm5lbFNlcnZpY2UuYXNzZXRQZXJzb25uZWwgKyAnL29yZ0NvbmZpZyc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnB1dCh1cmwsIHJlcXVlc3QpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIG1hcmtBbGxOb3RpZmljYXRpb25Bc1JlYWQodXNlclVVSUQpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldFBlcnNvbm5lbFNlcnZpY2UuYXNzZXRQZXJzb25uZWwgKyAnL25vdGlmaWNhdGlvbnMvbWFyayc7CiAgICBjb25zdCBwYXJhbXMgPSB7CiAgICAgIHVzZXJ1dWlkOiB1c2VyVVVJRAogICAgfTsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCwgewogICAgICAgIHBhcmFtczogcGFyYW1zCiAgICAgIH0pLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgIHJldHVybiByZXNwb25zZTsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBtYXJrTm90aWZpY2F0aW9uQXNSZWFkKG5vdGlmaWNhdGlvblVVSUQpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldFBlcnNvbm5lbFNlcnZpY2UuYXNzZXRQZXJzb25uZWwgKyAnL25vdGlmaWNhdGlvbnMvbWFyayc7CiAgICBjb25zdCBwYXJhbXMgPSB7CiAgICAgIHV1aWQ6IG5vdGlmaWNhdGlvblVVSUQKICAgIH07CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmdldCh1cmwsIHsKICAgICAgICBwYXJhbXM6IHBhcmFtcwogICAgICB9KS50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2U7CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgdXBkYXRlUHJlZmVyZW5jZXNOb3RpZmNhdGlvbihyZXF1ZXN0KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRQZXJzb25uZWxTZXJ2aWNlLmFzc2V0UGVyc29ubmVsICsgJy91c2Vycy9wcmVmZXJlbmNlcyc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnB1dCh1cmwsIHJlcXVlc3QpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGFkZFBvc3RBc3NpZ25tZW50T3JVbkFzc2lnbm1lbnQocmVxdWVzdCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0UGVyc29ubmVsU2VydmljZS5hc3NldFBlcnNvbm5lbCArICcvcG9zdC9hc3NpZ25tZW50JzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwsIHJlcXVlc3QpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldFVzZXJzTmFtZUFuZFVVSURCeVRlbmFudFVVSUQodGVuYW50VVVJRCkgewogICAgY29uc3QgcGFyYW1zID0gewogICAgICB0ZW5hbnRVVUlEOiB0ZW5hbnRVVUlECiAgICB9OwogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0UGVyc29ubmVsU2VydmljZS5hc3NldFBlcnNvbm5lbCArICcvdXNlcnMnOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5nZXQodXJsLCB7CiAgICAgICAgcGFyYW1zOiBwYXJhbXMKICAgICAgfSkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfQoKfTsKZXhwb3J0IGRlZmF1bHQgQXNzZXRQZXJzb25uZWxTZXJ2aWNlOw=="},null]}