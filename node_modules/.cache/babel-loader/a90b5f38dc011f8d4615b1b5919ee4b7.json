{"remainingRequest":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/babel-loader/lib/index.js!/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/src/views/assets/ArchivedAssets.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/src/views/assets/ArchivedAssets.vue","mtime":1661968702420},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/babel.config.js","mtime":1661968702388},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/vue-loader/lib/index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IEFzc2V0TWFuYWdlbWVudFNlcnZpY2UgZnJvbSAiLi4vLi4vc2VydmljZXMvQXNzZXRNYW5hZ2VtZW50U2VydmljZSI7CmltcG9ydCBhc3NldFBlcnNvbm5lbFNlcnZpY2UgZnJvbSAiLi4vLi4vc2VydmljZXMvQXNzZXRQZXJzb25uZWxTZXJ2aWNlIjsKaW1wb3J0IEVuZHBvaW50cyBmcm9tICIuLi8uLi9zZXJ2aWNlcy9FbmRQb2ludHMiOwppbXBvcnQgRGVsZXRlRGlhbG9nIGZyb20gIi4uLy4uL2NvbXBvbmVudHMvRGVsZXRlRGlhbG9nIjsKaW1wb3J0IFJlc3RvcmVEaWFsb2cgZnJvbSAiLi4vLi4vY29tcG9uZW50cy9SZXN0b3JlRGlhbG9nIjsKaW1wb3J0IG1vbWVudCBmcm9tICJtb21lbnQiOwppbXBvcnQgbG9hZGVyIGZyb20gIkAvY29tcG9uZW50cy9Mb2FkZXIudnVlIjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJBcmNoaXZlZEFzc2V0IiwKICBjb21wb25lbnRzOiB7CiAgICBSZXN0b3JlRGlhbG9nLAogICAgbG9hZGVyCiAgfSwKCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGxvYWRlckZsYWc6IGZhbHNlLAogICAgICByZXN0b3JlQXNzZXREaWFsb2c6IGZhbHNlLAogICAgICB1c2VyOiAiIiwKICAgICAgdXNlcm5hbWU6ICIiLAogICAgICBpc0xvYWRpbmdQYWdlOiBmYWxzZSwKICAgICAgaXNMb2FkaW5nOiBmYWxzZSwKICAgICAgcHJvbXB0OiBmYWxzZSwKICAgICAgcHJvbXB0Vmlld05hbWU6ICIiLAogICAgICBzZXJ2ZXJEYXRhOiAiIiwKICAgICAgZmlsdGVyRmllbGRMaXN0OiBbXSwKICAgICAgZXZlbnREYXRhOiAiIiwKICAgICAgY29tc3VtcHRpb25JZDogIiIsCiAgICAgIGFzc2V0SWQ6ICIiLAogICAgICAvLyAtLS0tLS0tLS0tLS0tIFNEVCBEYXRhIFNUQVJUIC0tLS0tLS0tLS0tLS0tLS0KICAgICAgc2R0X3Rva2VuOiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJjdXJyZW50VXNlckRldGFpbHMiKSkuYWNjZXNzX3Rva2VuLAogICAgICBwYXJlbnRTeXN0ZW1TZXR0aW5nczogewogICAgICAgIHNlcnZpY2VVUkw6IEVuZHBvaW50cy5wcmVmZXJlbmNlU2VydmljZS5wcmVmZXJlbmNlLAogICAgICAgIC8vIHNlcnZpY2VVUkw6ICdodHRwOi8vbG9jYWxob3N0OjgwOTkvcHJlZmVyZW5jZXMnLAogICAgICAgIGJ1dHRvbnM6IFtdLAogICAgICAgIHNlYXJjaFZhbHVlOiAiIiwKICAgICAgICBoZWlnaHQ6ICI5NTBweCIsCiAgICAgICAgc2VsZWN0aW9uQ29sdW1uOiBmYWxzZSwKICAgICAgICBzZWxlY3RUeXBlOiAibm9uZSIsCiAgICAgICAgbW9yZU9wdGlvbnM6IFtdLAogICAgICAgIGFjdGlvbnNPcHRpb25zOiBbIlZpZXciLCAiUmVzdG9yZSJdLAogICAgICAgIGNvbHVtbkljb25zOiBbXSwKICAgICAgICBwaWxsQ29uZmlnOiBbewogICAgICAgICAgY29sdW1uOiAiIiwKICAgICAgICAgIHN0YXRlOiAic3VjY2VzcyIsCiAgICAgICAgICBkYXRhOiAiIgogICAgICAgIH0sIHsKICAgICAgICAgIGNvbHVtbjogIiIsCiAgICAgICAgICBzdGF0ZTogImVycm9yIiwKICAgICAgICAgIGRhdGE6ICIiCiAgICAgICAgfSwgewogICAgICAgICAgY29sdW1uOiAiIiwKICAgICAgICAgIHN0YXRlOiAibm9ybWFsIiwKICAgICAgICAgIGRhdGE6ICIiCiAgICAgICAgfV0sCiAgICAgICAgc3RhdGljQ29sdW1uczogW10sCiAgICAgICAgdXNlcjogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgiY3VycmVudFVzZXJEZXRhaWxzIikpLnByb2ZpbGUudXNlcm5hbWUsCiAgICAgICAgdXBwZXJjYXNlQ29sdW1uczogW10sCiAgICAgICAgLy8gcGFzcyBjb2x1bW4gbmFtZSB3aG9zZSBkYXRhIHNob3VsZCBiZSBzaG93biBpbiBjYXBzCiAgICAgICAgZGF0ZUZvcm1hdDogIkREL01NL3l5eXkgaGg6bW0gYSIgLy9wYXNzIGFueSBtb21lbnQgZGF0ZSBmb3JtYXQgaGVyZQoKICAgICAgfSwKICAgICAgcGFyZW50RGVmYXVsdFN5c3RlbVZpZXc6IHsKICAgICAgICB2aWV3TmFtZXM6IFt7CiAgICAgICAgICBuYW1lOiAiRGVmYXVsdCBWaWV3IiwKICAgICAgICAgIHRpbGVGbGFnOiB0cnVlLAogICAgICAgICAgcG9zaXRpb246IDEsCiAgICAgICAgICBwcml2YWN5OiAicHJpdmF0ZSIKICAgICAgICB9LCB7CiAgICAgICAgICBuYW1lOiAiQWRkIEEgVmlldyBUaWxlIiwKICAgICAgICAgIHRpbGVGbGFnOiB0cnVlLAogICAgICAgICAgcG9zaXRpb246IDAsCiAgICAgICAgICBwcml2YWN5OiAicHJpdmF0ZSIKICAgICAgICB9XSwKICAgICAgICBkZWZhdWx0VGFibGU6IHsKICAgICAgICAgIGlkOiBudWxsLAogICAgICAgICAgdmlld05hbWU6ICJEZWZhdWx0IFZpZXciLAogICAgICAgICAgZGVuc2l0eTogIiIsCiAgICAgICAgICBwYWdlU2l6ZTogIiIsCiAgICAgICAgICBwYWdlTmFtZTogIiIsCiAgICAgICAgICB1c2VyOiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJjdXJyZW50VXNlckRldGFpbHMiKSkucHJvZmlsZS51c2VybmFtZSwKICAgICAgICAgIGRlZmF1bHRWaWV3RmxhZzogdHJ1ZSwKICAgICAgICAgIHNvcnRGaWVsZDogIiIsCiAgICAgICAgICBzb3J0RGlyZWN0aW9uOiAiZGF0ZUNyZWF0ZWQiLAogICAgICAgICAgdGlsZUZsYWc6IHRydWUsCiAgICAgICAgICBjb2x1bW5zOiBbXSwKICAgICAgICAgIHBvc2l0aW9uOiAxLAogICAgICAgICAgLy8gYWx3YXlzIHBhc3MgMQogICAgICAgICAgcHJpdmFjeTogInByaXZhdGUiCiAgICAgICAgfQogICAgICB9LAogICAgICBwYXJlbnREYXRhOiBbXSwKICAgICAgZmlsdGVyQ291bnQ6ICIiLAogICAgICAvLyAtLS0tLS0tLS0tLS0tIFNEVCBEYXRhIEVORCAtLS0tLS0tLS0tLS0tLS0tCiAgICAgIHNkdERhdGE6ICIiLAogICAgICBmaWVsZE5hbWVzOiBbXSwKICAgICAgY3VycmVuY3k6ICIiCiAgICB9OwogIH0sCgogIHByb3BzOiB7CiAgICBjb25maWdzOiB7CiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9LAogICAgc2hvd1RvYXN0OiB7CiAgICAgIHR5cGU6IEZ1bmN0aW9uCiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBjbG9zZURpYWxvZygpIHsKICAgICAgdGhpcy5yZXN0b3JlQXNzZXREaWFsb2cgPSBmYWxzZTsKICAgIH0sCgogICAgcmVzdG9yZUFyY2hpdmVkKCkgewogICAgICB0aGlzLnJlc3RvcmVBc3NldERpYWxvZyA9IGZhbHNlOwogICAgICB0aGlzLmxvYWRlckZsYWcgPSB0cnVlOwogICAgICBBc3NldE1hbmFnZW1lbnRTZXJ2aWNlLnJlc3RvcmVBcmNoaXZlZEFzc2V0KHRoaXMuYXNzZXRJZCkudGhlbihyZXMgPT4gewogICAgICAgIGlmIChyZXMuc3RhdHVzID09IDIwMCkgewogICAgICAgICAgdGhpcy5sb2FkZXJGbGFnID0gZmFsc2U7CiAgICAgICAgICB0aGlzLiRlbWl0KCJzaG93VG9hc3QiLCAiUmVzdG9yZWQgQXNzZXQgU3VjY2Vzc2Z1bGx5IiwgInN1Y2Nlc3MiKTsKICAgICAgICAgIHRoaXMubG9hZFRhYmxlKHRoaXMuc2R0RGF0YSk7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChlID0+IHsKICAgICAgICB0aGlzLiRlbWl0KCJzaG93VG9hc3QiLCBlLmRhdGEucmVzcG9uc2UsICJlcnJvciIpOwogICAgICB9KTsKICAgIH0sCgogICAgLy8gLS0tLS0tLS0tLS0tIFNEVCBGdW5jdGlvbnMgU1RBUlQgLS0tLS0tLS0tLS0tLS0KICAgIGdldEFjdGlvbnNPcHRpb24odmFsKSB7CiAgICAgIGlmICh2YWwudmFsdWUgPT0gIlZpZXciKSB7CiAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goewogICAgICAgICAgbmFtZTogInZpZXctYXNzZXQiLAogICAgICAgICAgcGFyYW1zOiB7CiAgICAgICAgICAgIGFzc2V0SUQ6IHZhbC5yb3cudXVpZAogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9IGVsc2UgaWYgKHZhbC52YWx1ZSA9PSAiUmVzdG9yZSIpIHsKICAgICAgICB0aGlzLnJlc3RvcmVBc3NldERpYWxvZyA9IHRydWU7CiAgICAgICAgdGhpcy5hc3NldElkID0gdmFsLnJvdy51dWlkOwogICAgICB9CiAgICB9LAoKICAgIGNvbnZlcnRUb0NTVihvYmpBcnJheSkgewogICAgICB2YXIgYXJyYXkgPSB0eXBlb2Ygb2JqQXJyYXkgIT0gIm9iamVjdCIgPyBKU09OLnBhcnNlKG9iakFycmF5KSA6IG9iakFycmF5OwogICAgICB2YXIgc3RyID0gIiI7CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIGxpbmUgPSAiIjsKCiAgICAgICAgZm9yICh2YXIgaW5kZXggaW4gYXJyYXlbaV0pIHsKICAgICAgICAgIGlmIChsaW5lICE9ICIiKSBsaW5lICs9ICIsIjsKICAgICAgICAgIGxpbmUgKz0gYXJyYXlbaV1baW5kZXhdOwogICAgICAgIH0KCiAgICAgICAgc3RyICs9IGxpbmUgKyAiXHJcbiI7CiAgICAgIH0KCiAgICAgIHJldHVybiBzdHI7CiAgICB9LAoKICAgIC8vIGdldERvd25sb2FkQXNPcHRpb24ob3B0KXsKICAgIC8vIAkJLy8gY29uc29sZS5sb2coJ2Rvd25sb2FkIGFzIG9wdGlvbicsb3B0KTsKICAgIC8vIAkJaWYob3B0Lm9wdGlvbj09J3BkZicpewogICAgLy8gCQkJLy8gbm90aWZpY2F0aW9uQW5kQ29tbXVuaWNhdGlvblNlcnZpY2UuZG93bmxvYWRTZWxlY3RlZFBERihvYmopCiAgICAvLyAgICAgLy8gLnRoZW4oKHJlcykgPT4gewogICAgLy8gCQkJLy8gLy8gY29uc29sZS5sb2cocmVzKQogICAgLy8gCQkJLy8gbGV0IGZpbGVDb250ZW50cyA9IG51bGw7CiAgICAvLyAJICAgIC8vICAgICBsZXQgcG9wdXBXaW49bnVsbDsKICAgIC8vIAkgICAgLy8gICAgIHBvcHVwV2luID0gd2luZG93Lm9wZW4oJycsICdfYmxhbmsnLCAndG9wPTAsbGVmdD0wLGhlaWdodD03MDAsd2lkdGg9MTAwMDsnKTsKICAgIC8vIAkgICAgLy8gICAgIGxldCBkb2N1bWVudCA9IHsKICAgIC8vIAkgICAgLy8gICAgICAgICAnZG9jdW1lbnROYW1lJzogJ0JpbGxpbmcnCiAgICAvLyAJICAgIC8vICAgICB9OwogICAgLy8gCQkJLy8gZmlsZUNvbnRlbnRzID0gcmVzLmRhdGEudHlwZSArIHJlcy5kYXRhLmNvbnRlbnQ7CiAgICAvLyAgICAgLy8gICBwb3B1cFdpbi5kb2N1bWVudC53cml0ZShgCiAgICAvLyAgICAgLy8gICAgIDxodG1sPgogICAgLy8gICAgIC8vICAgICAgICAgPGhlYWQ+CiAgICAvLyAgICAgLy8gICAgICAgICAgPCEtLXRpdGxlPlByaW50IHRhYjwvdGl0bGUtLT4KICAgIC8vICAgICAvLyAgICAgICAgICAgICA8c3R5bGU+CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgICNidXR0b25ze2Rpc3BsYXk6bm9uZTt9CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgICBib2R5IHsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMDsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAiT3BlbiBTYW5zIiwgLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCAiU2Vnb2UgVUkiLCBFdWNsaWQgQ2lyY3VsYXIgQiwgIkhlbHZldGljYSBOZXVlIiwgQXJpYWwsIHNhbnMtc2VyaWYsICJBcHBsZSBDb2xvciBFbW9qaSIsICJTZWdvZSBVSSBFbW9qaSIsICJTZWdvZSBVSSBTeW1ib2wiOwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxcmVtOwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxLjU7CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgICAgICBjb2xvcjogIzIxMjUyOTsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICB9CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgIGJ1dHRvbiwgbWV0ZXIsIHByb2dyZXNzIHsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIC13ZWJraXQtd3JpdGluZy1tb2RlOiBob3Jpem9udGFsLXRiICFpbXBvcnRhbnQ7CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgIH0KICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QsIGJ1dHRvbiB7CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0ZXh0LXJlbmRlcmluZzogYXV0bzsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBpbml0aWFsOwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbDsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHdvcmQtc3BhY2luZzogbm9ybWFsOwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0ZXh0LWluZGVudDogMHB4OwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGV4dC1zaGFkb3c6IG5vbmU7CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBzdGFydDsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMGVtOwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgZm9udDogNDAwIDEzLjMzMzNweCBBcmlhbDsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgfQogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICBpbnB1dFt0eXBlPSJidXR0b24iIGldLCBpbnB1dFt0eXBlPSJzdWJtaXQiIGldLCBpbnB1dFt0eXBlPSJyZXNldCIgaV0sIGlucHV0W3R5cGU9ImZpbGUiIGldOjotd2Via2l0LWZpbGUtdXBsb2FkLWJ1dHRvbiwgYnV0dG9uIHsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0OwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBkZWZhdWx0OwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGJ1dHRvbnRleHQ7CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBidXR0b25mYWNlOwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDJweCA2cHggM3B4OwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXdpZHRoOiAycHg7CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgICAgICBib3JkZXItc3R5bGU6IG91dHNldDsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogYnV0dG9uZmFjZTsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1pbWFnZTogaW5pdGlhbDsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgfQogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICBpbnB1dCwgYnV0dG9uLCBzZWxlY3QsIG9wdGdyb3VwLCB0ZXh0YXJlYSB7CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDA7CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgICAgICBmb250LWZhbWlseTogaW5oZXJpdDsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogaW5oZXJpdDsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiBpbmhlcml0OwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICB9CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgIGJ1dHRvbiwgc2VsZWN0IHsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lOwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICB9CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgIC5idG4gewogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgICAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50OwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMC4zNzVyZW0gMC43NXJlbTsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMXJlbTsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxLjU7CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAwLjI1cmVtOwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjE1cyBlYXNlLWluLW91dCwgYm9yZGVyLWNvbG9yIDAuMTVzIGVhc2UtaW4tb3V0LCBib3gtc2hhZG93IDAuMTVzIGVhc2UtaW4tb3V0OwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICB9CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgIC5idG4tb3V0bGluZS1wcmltYXJ5IHsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjMDA3YmZmOwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lOwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAjMDA3YmZmOwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICB9CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgIC5idG4tb3V0bGluZS1wcmltYXJ5IHsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjZmZmZmZmOwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAjZDAzMjMyOwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2QwMzIzMjsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgfQogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlIHsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgfQogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICA8c3R5bGU+LmZhIHsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IG5vcm1hbCBub3JtYWwgbm9ybWFsIDE0cHgvMSBGb250QXdlc29tZTsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogaW5oZXJpdDsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRleHQtcmVuZGVyaW5nOiBhdXRvOwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgICAgICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlOwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICB9PC9zdHlsZT4KICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgPHN0eWxlPiosICo6OmJlZm9yZSwgKjo6YWZ0ZXIgewogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgfQogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICBTdHlsZSBBdHRyaWJ1dGUgewogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICB9CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgIC5idG4sIC5mb3JtLWNvbnRyb2wgewogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMC4yNXJlbSAwLjVyZW07CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDAuODc1cmVtOwogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNTsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDAuM3JlbTsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMTVweDsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMjNweDsKICAgIC8vICAgICAvLyAgICAgICAgICAgICAgICAgfTwvc3R5bGU+CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgPC9zdHlsZT4KICAgIC8vICAgICAvLyAgICAgICAgIDwvaGVhZD4KICAgIC8vICAgICAvLyAgICAgICAgIDxib2R5IG9ubG9hZD0iIj4KICAgIC8vICAgICAvLyAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOnJpZ2h0OyIgPgogICAgLy8gICAgIC8vICAgICAgICAgICAgICAgICA8YSBocmVmPSIke2ZpbGVDb250ZW50c30iIGRvd25sb2FkPSIke2RvY3VtZW50LmRvY3VtZW50TmFtZX0iPjxidXR0b24gY2xhc3M9ImJ0biBidG4tc20gYnRuLW91dGxpbmUtcHJpbWFyeSI+RG93bmxvYWQ8L2J1dHRvbj48L2E+CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgPC9kaXY+CiAgICAvLyAgICAgLy8gICAgICAgICAgICAgPGJyPgogICAgLy8gICAgIC8vICAgICAgICAgICAgIDxpZnJhbWUgc3JjPScke2ZpbGVDb250ZW50c30nICBzdHlsZT0ibWluLXdpZHRoOiAxMDAlO2hlaWdodDogMTAwJTsiID48L2lmcmFtZT4KICAgIC8vICAgICAvLyAgICAgICAgIDwvYm9keT4KICAgIC8vICAgICAvLyAgICAgPC9odG1sPmAKICAgIC8vICAgICAvLyApOwogICAgLy8gICAgIC8vIH0pCiAgICAvLyAgICAgLy8gLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGVycikpOwogICAgLy8gCQl9CiAgICAvLyAJCWVsc2UgaWYob3B0Lm9wdGlvbj09J2NzdicpewogICAgLy8gCQkvLyAJbGV0IGZpbGVUaXRsZSA9ICdCaWxsaW5ncyc7CiAgICAvLyAJCS8vIAlsZXQgaGVhZGVycyA9IHsKICAgIC8vIAkJLy8gICAgICAgY3JlYXRlZERhdGU6ICdSZXF1ZXN0ZWQgT24nLnJlcGxhY2UoLywvZywgJycpLCAvLyByZW1vdmUgY29tbWFzIHRvIGF2b2lkIGVycm9ycwogICAgLy8gCQkvLyAgICAgICBkdWVEYXRlOiAiRHVlIERhdGUiLAogICAgLy8gCQkvLyAgICAgICBzaGlwbWVudE51bWJlcjogIlNoaXBtZW50ICMiLAogICAgLy8gCQkvLyAJCSAgcG9ydE9mTG9hZGluZzogIlBvcnQgb2YgTG9hZCIsCiAgICAvLyAJCS8vIAkJICBwb3J0T2ZEaXNjaGFyZ2U6ICJQb3J0IE9mIERpc2NoYXJnZSIsCiAgICAvLyAJCS8vIAkJICBhbW91bnQ6ICJBbW91bnQiLAogICAgLy8gCQkvLyAJCSAgYmFsYW5jZTogIkJhbGFuY2UiLAogICAgLy8gCQkvLyAJCSAgbmV0c3VpdGVTdGF0dXM6ICJTdGF0dXMiCiAgICAvLyAJCS8vIAl9OwogICAgLy8gCQkvLyAJbGV0IGRhdGFPYmogPSBbXTsKICAgIC8vIAkJLy8gCWZvciAobGV0IGkgPSAwOyBpIDwgb3B0LnJvd3MubGVuZ3RoOyBpKyspIHsKICAgIC8vIAkJLy8gCQljb25zdCBiaWxsID0gb3B0LnJvd3NbaV07CiAgICAvLyAJCS8vIAkJZGF0YU9iai5wdXNoKHsKICAgIC8vIAkJLy8gCQkJY3JlYXRlZERhdGU6IGJpbGwuY3JlYXRlZERhdGUsCiAgICAvLyAJCS8vIAkJCWR1ZURhdGU6IGJpbGwuZHVlRGF0ZSwKICAgIC8vIAkJLy8gCQkJc2hpcG1lbnROdW1iZXI6IGJpbGwuc2hpcG1lbnROdW1iZXIsCiAgICAvLyAJCS8vIAkJCXBvcnRPZkxvYWRpbmc6IGJpbGwucG9ydE9mTG9hZGluZywKICAgIC8vIAkJLy8gCQkJcG9ydE9mRGlzY2hhcmdlOiBiaWxsLnBvcnRPZkRpc2NoYXJnZSwKICAgIC8vIAkJLy8gCQkJYW1vdW50OiBiaWxsLmFtb3VudCwKICAgIC8vIAkJLy8gCQkJYmFsYW5jZTogYmlsbC5iYWxhbmNlLAogICAgLy8gCQkvLyAJCQluZXRzdWl0ZVN0YXR1czogYmlsbC5uZXRzdWl0ZVN0YXR1cwogICAgLy8gCQkvLyAJCX0pOwogICAgLy8gCQkvLyAJfQogICAgLy8gCQkvLyAJdGhpcy5leHBvcnRDU1ZGaWxlKGhlYWRlcnMsIGRhdGFPYmosIGZpbGVUaXRsZSk7CiAgICAvLyAJCX0KICAgIC8vIH0sCiAgICAvLyBleHBvcnRDU1ZGaWxlKGhlYWRlcnMsIGJpbGxpbmdEYXRhLCBmaWxlVGl0bGUpIHsKICAgIC8vICAgICAvLyBpZiAoaGVhZGVycykgewogICAgLy8gICAgIC8vICAgICBiaWxsaW5nRGF0YS51bnNoaWZ0KGhlYWRlcnMpOwogICAgLy8gICAgIC8vIH0KICAgIC8vICAgICAvLyAvLyBDb252ZXJ0IE9iamVjdCB0byBKU09OCiAgICAvLyAgICAgLy8gdmFyIGpzb25PYmplY3QgPSBKU09OLnN0cmluZ2lmeShiaWxsaW5nRGF0YSk7CiAgICAvLyAgICAgLy8gdmFyIGNzdiA9IHRoaXMuY29udmVydFRvQ1NWKGpzb25PYmplY3QpOwogICAgLy8gICAgIC8vIHZhciBleHBvcnRlZEZpbGVubWFlID0gZmlsZVRpdGxlICsgJy5jc3YnIHx8ICdleHBvcnQuY3N2JzsKICAgIC8vICAgICAvLyB2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3ZdLCB7IHR5cGU6ICd0ZXh0L2NzdjtjaGFyc2V0PXV0Zi04OycgfSk7CiAgICAvLyAgICAgLy8gaWYgKG5hdmlnYXRvci5tc1NhdmVCbG9iKSB7IC8vIElFIDEwKwogICAgLy8gICAgIC8vICAgICBuYXZpZ2F0b3IubXNTYXZlQmxvYihibG9iLCBleHBvcnRlZEZpbGVubWFlKTsKICAgIC8vICAgICAvLyB9IGVsc2UgewogICAgLy8gICAgIC8vICAgICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKTsKICAgIC8vICAgICAvLyAgICAgaWYgKGxpbmsuZG93bmxvYWQgIT09IHVuZGVmaW5lZCkgeyAvLyBmZWF0dXJlIGRldGVjdGlvbgogICAgLy8gICAgIC8vICAgICAgICAgLy8gQnJvd3NlcnMgdGhhdCBzdXBwb3J0IEhUTUw1IGRvd25sb2FkIGF0dHJpYnV0ZQogICAgLy8gICAgIC8vICAgICAgICAgdmFyIHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7CiAgICAvLyAgICAgLy8gICAgICAgICBsaW5rLnNldEF0dHJpYnV0ZSgiaHJlZiIsIHVybCk7CiAgICAvLyAgICAgLy8gICAgICAgICBsaW5rLnNldEF0dHJpYnV0ZSgiZG93bmxvYWQiLCBleHBvcnRlZEZpbGVubWFlKTsKICAgIC8vICAgICAvLyAgICAgICAgIGxpbmsuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nOwogICAgLy8gICAgIC8vICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rKTsKICAgIC8vICAgICAvLyAgICAgICAgIGxpbmsuY2xpY2soKTsKICAgIC8vICAgICAvLyAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluayk7CiAgICAvLyAgICAgLy8gICAgIH0KICAgIC8vICAgICAvLyB9CiAgICAvLyB9LAogICAgc2V0VGFibGVDb25maWdzKCkgewogICAgICB0aGlzLnBhcmVudERlZmF1bHRTeXN0ZW1WaWV3LmRlZmF1bHRUYWJsZS5kZW5zaXR5ID0gdGhpcy50YWJsZUNvbmZpZy5kZW5zaXR5OwogICAgICB0aGlzLnBhcmVudERlZmF1bHRTeXN0ZW1WaWV3LmRlZmF1bHRUYWJsZS5wYWdlU2l6ZSA9IHRoaXMudGFibGVDb25maWcucGFnZVNpemU7CiAgICAgIHRoaXMucGFyZW50RGVmYXVsdFN5c3RlbVZpZXcuZGVmYXVsdFRhYmxlLnBhZ2VOYW1lID0gdGhpcy50YWJsZUNvbmZpZy5wYWdlTmFtZTsKICAgICAgdGhpcy5wYXJlbnREZWZhdWx0U3lzdGVtVmlldy5kZWZhdWx0VGFibGUuc29ydEZpZWxkID0gdGhpcy50YWJsZUNvbmZpZy5zb3J0RmllbGQ7CiAgICAgIHRoaXMucGFyZW50RGVmYXVsdFN5c3RlbVZpZXcuZGVmYXVsdFRhYmxlLnNvcnREaXJlY3Rpb24gPSB0aGlzLnRhYmxlQ29uZmlnLnNvcnREaXJlY3Rpb247CiAgICAgIHRoaXMucGFyZW50RGVmYXVsdFN5c3RlbVZpZXcuZGVmYXVsdFRhYmxlLmNvbHVtbnMgPSB0aGlzLnRhYmxlQ29uZmlnLmNvbHVtbnM7CiAgICB9LAoKICAgIHNldFN0YXRpY0NvbHVtbigpIHsKICAgICAgbGV0IHN0YXRpY0NvbCA9IHRoaXMudGFibGVDb25maWcuY29sdW1ucy5maWx0ZXIoY29sID0+IGNvbC5sYWJlbE5hbWUgPT0gIkFzc2V0IE51bWJlciIpWzBdOwogICAgICB0aGlzLnBhcmVudFN5c3RlbVNldHRpbmdzLnN0YXRpY0NvbHVtbnMucHVzaChzdGF0aWNDb2wpOwoKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRhYmxlQ29uZmlnLmNvbHVtbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAodGhpcy50YWJsZUNvbmZpZy5jb2x1bW5zW2ldLmxhYmVsTmFtZSA9PSBzdGF0aWNDb2wubGFiZWxOYW1lKSB7CiAgICAgICAgICB0aGlzLnRhYmxlQ29uZmlnLmNvbHVtbnMuc3BsaWNlKGksIDEpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHRoaXMudGFibGVDb25maWcuY29sdW1uc1tpXS5sYWJlbE5hbWUgPT0gIk1haW50ZW5hbmNlIENvc3QiKSB7CiAgICAgICAgICB0aGlzLnRhYmxlQ29uZmlnLmNvbHVtbnNbaV0ubGFiZWxOYW1lID0gdGhpcy50YWJsZUNvbmZpZy5jb2x1bW5zW2ldLmxhYmVsTmFtZSArICIgKCIgKyB0aGlzLmN1cnJlbmN5ICsgIikiOwogICAgICAgIH0KICAgICAgfQogICAgfSwKCiAgICBleHRyYWN0RmllbGROYW1lc0ZvclNlYXJjaFF1ZXJ5KGNvbmZpZykgewogICAgICBjb25maWcuY29sdW1ucy5tYXAoZWxlbWVudCA9PiB7CiAgICAgICAgdGhpcy5maWVsZE5hbWVzLnB1c2goZWxlbWVudC5maWVsZE5hbWUpOwogICAgICB9KTsKICAgIH0sCgogICAgY2F0Y2hEZXBhcnR1cmU6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgIC8vIGNvbnNvbGUubG9nKCJkYXRhIiwgZGF0YSk7CiAgICAgIC8vIGRlYnVnZ2VyCiAgICAgIHRoaXMuc2R0RGF0YSA9IGRhdGE7CgogICAgICBpZiAoZGF0YS5zdGF0dXMgPT0gMSB8fCBkYXRhLnN0YXR1cyA9PSAzKSB7CiAgICAgICAgdGhpcy5sb2FkVGFibGUoZGF0YSk7CiAgICAgIH0gZWxzZSBpZiAoZGF0YS5zdGF0dXMgPT0gNCkgewogICAgICAgIHRoaXMubG9hZFRhYmxlKGRhdGEpOwogICAgICB9IGVsc2UgaWYgKGRhdGEuc3RhdHVzID09IDEwKSB7fQogICAgfSwKCiAgICBsb2FkVGFibGUoc2R0RGF0YSkgewogICAgICBsZXQgZmlsdGVycyA9IFtdOwogICAgICB0aGlzLmxvYWRlckZsYWcgPSB0cnVlOwoKICAgICAgZm9yIChsZXQgc2R0X2RhdGEgb2Ygc2R0RGF0YS5tZXNzYWdlKSB7CiAgICAgICAgaWYgKHNkdF9kYXRhLmZpZWxkTmFtZSAhPT0gImFjdGlvbnMiKSB7CiAgICAgICAgICBsZXQgbmV3RGF0ZSA9ICIiOwoKICAgICAgICAgIGlmIChzZHRfZGF0YS5maWVsZFR5cGUgPT09ICJkYXRlIiAmJiBzZHRfZGF0YS5maWx0ZXJWYWx1ZSAhPT0gIiIpIHsKICAgICAgICAgICAgbGV0IGRhdGUgPSBzZHRfZGF0YS5maWx0ZXJWYWx1ZS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICBkYXRlID0gZGF0ZS5zcGxpdCgiLyIpOwogICAgICAgICAgICBuZXdEYXRlID0gbmV3IERhdGUoYCR7ZGF0ZVsxXX0vJHtkYXRlWzBdfS8ke2RhdGVbMl19YCk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHNkdF9kYXRhLmZpbHRlclZhbHVlID09PSBudWxsKSB7CiAgICAgICAgICAgIHNkdF9kYXRhLmZpbHRlclZhbHVlID0gIiI7CiAgICAgICAgICB9CgogICAgICAgICAgZmlsdGVycy5wdXNoKHsKICAgICAgICAgICAgZmllbGROYW1lOiBzZHRfZGF0YS5maWVsZE5hbWUsCiAgICAgICAgICAgIGZpZWxkVHlwZTogc2R0X2RhdGEuZmllbGRUeXBlLAogICAgICAgICAgICBmaWx0ZXJWYWx1ZTogbmV3RGF0ZSA9PT0gbnVsbCB8fCBuZXdEYXRlID09PSAiIiA/IHNkdF9kYXRhLmZpbHRlclZhbHVlIDogbmV3RGF0ZS5nZXRUaW1lKCksCiAgICAgICAgICAgIHNlY29uZFZhbHVlOiBzZHRfZGF0YS5zZWNvbmRWYWx1ZSwKICAgICAgICAgICAgY29tcGFyaXNvblR5cGU6IHNkdF9kYXRhLmNvbXBhcmlzb25UeXBlCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHRoaXMuZ2V0UGFnaW5hdGVkQXJjaGl2ZWRBc3NldHMoZmlsdGVycywgc2R0RGF0YS5kYXRhLnNvcnRGaWVsZCwgc2R0RGF0YS5kYXRhLnNvcnREaXJlY3Rpb24sIHNkdERhdGEuZGF0YS5vZmZzZXQsIHNkdERhdGEuZGF0YS5saW1pdCwgc2R0RGF0YS5kYXRhLnNlYXJjaFF1ZXJ5KTsKICAgIH0sCgogICAgbG9hZFNEVChyZXNwb25zZSwgZGF0YSkgewogICAgICB0aGlzLnBhcmVudERhdGEgPSBkYXRhOwogICAgICBsZXQgZXZlbnREYXRhID0gewogICAgICAgIGRhdGE6IHRoaXMucGFyZW50RGF0YSwKICAgICAgICB0b3RhbEVsZW1lbnRzOiByZXNwb25zZS5kYXRhLnRvdGFsRWxlbWVudHMsCiAgICAgICAgdG90YWxQYWdlczogcmVzcG9uc2UuZGF0YS50b3RhbFBhZ2VzLAogICAgICAgIHBhZ2VOdW1iZXI6IHJlc3BvbnNlLmRhdGEub2Zmc2V0CiAgICAgIH07CiAgICAgIHRoaXMubG9hZGVyRmxhZyA9IGZhbHNlOwogICAgICB0aGlzLiRyZWZzLnRlc3QuZGF0YUxvYWRFdmVudChldmVudERhdGEpOwogICAgfSwKCiAgICBnZXRQYWdpbmF0ZWRBcmNoaXZlZEFzc2V0cyhmaWx0ZXJzLCBzb3J0RmllbGQsIHNvcnREaXJlY3Rpb24sIG9mZnNldCwgbGltaXQsIHNlYXJjaFF1ZXJ5KSB7CiAgICAgIGxldCBjdXJyZW50VXNlckRldGFpbHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJjdXJyZW50VXNlckRldGFpbHMiKSk7CiAgICAgIGxldCByZXF1ZXN0T2JqID0gewogICAgICAgIHNlYXJjaFF1ZXJ5OiBzZWFyY2hRdWVyeSwKICAgICAgICBmaWx0ZXJzOiBmaWx0ZXJzLAogICAgICAgIHNvcnRGaWVsZDogc29ydEZpZWxkLAogICAgICAgIHNvcnREaXJlY3Rpb246IHNvcnREaXJlY3Rpb24sCiAgICAgICAgb2Zmc2V0OiBvZmZzZXQsCiAgICAgICAgbGltaXQ6IGxpbWl0LAogICAgICAgIHRlbmFudFVVSUQ6IGN1cnJlbnRVc2VyRGV0YWlscy5wcm9maWxlLm9yZ2FuaXphdGlvbklkLAogICAgICAgIGZpZWxkTmFtZXM6IHRoaXMuZmllbGROYW1lcywKICAgICAgICBhcmNoaXZlZDogdHJ1ZQogICAgICB9OwogICAgICBBc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmdldFBhZ2luYXRlZEFzc2V0c0ZvclNEVChyZXF1ZXN0T2JqKS50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgIHJlc3BvbnNlLmRhdGEub2Zmc2V0ID0gb2Zmc2V0ICsgMTsKICAgICAgICAgIHRoaXMubG9hZGVyRmxhZyA9IGZhbHNlOwogICAgICAgICAgdGhpcy5sb2FkU0RUKHJlc3BvbnNlLCByZXNwb25zZS5kYXRhLmFzc2V0TWFwcGVycyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuc2hvd1RvYXN0KCJFcnJvciB3aGlsZSBnZXR0aW5nIEFyY2hpdmUgQXNzZXRzLiBQbGVhc2UgdHJ5IGFnYWluIiwgImVycm9yIik7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgaWYgKGVycm9yLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA2KSB7CiAgICAgICAgICB0aGlzLnNob3dUb2FzdChlcnJvci5yZXNwb25zZS5kYXRhLmRlc2NyaXB0aW9uLCAiZXJyb3IiKTsKICAgICAgICB9IGVsc2Uge30KICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIGlmIChlcnJvci5yZXNwb25zZSAhPT0gdW5kZWZpbmVkICYmIGVycm9yLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA2KSB7CiAgICAgICAgICB0aGlzLnNob3dUb2FzdChlcnJvci5yZXNwb25zZS5kYXRhLmRlc2NyaXB0aW9uLCAiZXJyb3IiKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSAvLyAtLS0tLS0tLS0tLS0gU0RUIEZ1bmN0aW9ucyBFTkQgLS0tLS0tLS0tLS0tLS0KCgogIH0sCgogIG1vdW50ZWQoKSB7CiAgICBkb2N1bWVudC50aXRsZSA9IHRoaXMuJHJvdXRlLm1ldGEudGl0bGU7CiAgICBsZXQgY3VycmVudFVzZXJEZXRhaWxzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgiY3VycmVudFVzZXJEZXRhaWxzIikpOwoKICAgIGlmIChjdXJyZW50VXNlckRldGFpbHMgPT09IG51bGwpIHsKICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oImZvcmNlU2lnbm91dCIsICJ5ZXMiKTsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGxldCB1dWlkID0gY3VycmVudFVzZXJEZXRhaWxzLnByb2ZpbGUub3JnYW5pemF0aW9uSWQ7CiAgICBhc3NldFBlcnNvbm5lbFNlcnZpY2UuZ2V0Q29tcGFueUN1cnJlbmN5KHV1aWQpLnRoZW4oY3VycmVuY3lSZXNwb25zZSA9PiB7CiAgICAgIHRoaXMuY3VycmVuY3kgPSBjdXJyZW5jeVJlc3BvbnNlLmRhdGEuY3VycmVuY3k7IC8vIGZldGNoaW5nIGNvbmZpZ3MKCiAgICAgIHRoaXMudGFibGVDb25maWcgPSB0aGlzLmNvbmZpZ3M7CiAgICAgIHRoaXMuZXh0cmFjdEZpZWxkTmFtZXNGb3JTZWFyY2hRdWVyeSh0aGlzLnRhYmxlQ29uZmlnKTsKICAgICAgdGhpcy5zZXRTdGF0aWNDb2x1bW4oKTsKICAgICAgdGhpcy5zZXRUYWJsZUNvbmZpZ3MoKTsKICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgdGhpcy5zaG93VG9hc3QoIkVycm9yIGZldGNoaW5nIGNvbXBhbnkgY3VycmVuY3kiLCAiZXJyb3IiKTsKICAgIH0pOwogIH0sCgogIHZhbGlkYXRpb25zOiBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4ge307CiAgfSwKICBjb21wdXRlZDoge30KfTs="},null]}