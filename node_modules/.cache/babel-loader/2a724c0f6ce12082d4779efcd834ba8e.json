{"remainingRequest":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/babel-loader/lib/index.js!/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/eslint-loader/index.js??ref--14-0!/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/src/services/AssetManagementService.js","dependencies":[{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/src/services/AssetManagementService.js","mtime":1661968702408},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/babel.config.js","mtime":1661968702388},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKaW1wb3J0IEVuZFBvaW50cyBmcm9tICcuL0VuZFBvaW50cyc7CmV4cG9ydCBjb25zdCBBc3NldE1hbmFnZW1lbnRTZXJ2aWNlID0gewogIGFzeW5jIGdldFBhZ2luYXRlZEFzc2V0cyhvZmZzZXQsIGxpbWl0LCB0ZW5hbnR1dWlkKSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cz9vZmZzZXQ9JyArIG9mZnNldCArICcmbGltaXQ9JyArIGxpbWl0ICsgJyZ0ZW5hbnR1dWlkPScgKyB0ZW5hbnR1dWlkOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5nZXQodXJsKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgLy8gY29uc29sZS5sb2coJ2dldFBhZ2luYXRlZEFzc2V0cyAxJyxyZXNwb25zZUpzb24pCiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRQYWdpbmF0ZWRBc3NldHNGb3JTRFQocmVxdWVzdE9iaikgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvc2R0JzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwsIHJlcXVlc3RPYmopLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICAvLyBjb25zb2xlLmxvZygnZ2V0UGFnaW5hdGVkQXNzZXRzIDInLHJlc3BvbnNlSnNvbikKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldFBhZ2luYXRlZFVzYWdlc0ZvclNEVChyZXF1ZXN0T2JqKSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy91c2FnZXMvc2R0JzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwsIHJlcXVlc3RPYmopLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldFBhZ2luYXRlZENvbnN1bXB0aW9uc0ZvclNEVChyZXF1ZXN0T2JqKSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9jb25zdW1wdGlvbnMvc2R0JzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwsIHJlcXVlc3RPYmopLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldFBhZ2luYXRlZEFzc2V0c0dyb3VwRm9yU0RUKHJlcXVlc3RPYmopIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2Fzc2V0cy9ncm91cC9zZHQnOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5wb3N0KHVybCwgcmVxdWVzdE9iaikudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZ2V0TmFtZUFuZFR5cGVPZkFzc2V0c0J5VVVJRFModXVpZHMpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2luc3BlY3Rpb25zL2xpc3R2aWV3JzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwsIHV1aWRzKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgaWYgKHJlc3BvbnNlSnNvbi5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGRvd25sb2FkU2VsZWN0ZWRQREYob2JqKSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9tdWx0aXBsZSc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnBvc3QodXJsLCBvYmopLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICBpZiAocmVzcG9uc2VKc29uLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZ2V0QXNzZXRzTmFtZUJ5VVVJRFModXVpZHMpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2luc3BlY3Rpb25zL2Fzc2V0TmFtZSc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnBvc3QodXJsLCB1dWlkcykudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIGlmIChyZXNwb25zZUpzb24uc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRBc3NldE5hbWVBbmROdW1iZXJCeVRlbmFudFVVSUQodGVuYW50VVVJRCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvbmFtZT90ZW5hbnRVVUlEPScgKyB0ZW5hbnRVVUlEOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5nZXQodXJsKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgaWYgKHJlc3BvbnNlSnNvbi5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldE5hbWVBbmRVVUlET2ZBc3NldEJ5VGVuYW50VVVJRCh0ZW5hbnRVVUlEKSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cyc7CiAgICBjb25zdCBwYXJhbXMgPSB7CiAgICAgIHRlbmFudHV1aWQ6IHRlbmFudFVVSUQKICAgIH07CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmdldCh1cmwsIHsKICAgICAgICBwYXJhbXM6IHBhcmFtcwogICAgICB9KS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRBbGxBc3NldENhdGVnb3JpZXModGVuYW50dXVpZCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvY2F0ZWdvcmllcz90ZW5hbnR1dWlkPScgKyB0ZW5hbnR1dWlkOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5nZXQodXJsKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgaWYgKHJlc3BvbnNlSnNvbi5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldENhdGVnb3JpZXNMaXN0KHRlbmFudFVVSUQpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2NhdGVnb3JpZXMvbGlzdD90ZW5hbnRVVUlEPScgKyB0ZW5hbnRVVUlEOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5nZXQodXJsKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRBc3NldEdyb3Vwc0FuZEFzc2V0c0J5Q2F0ZWdvcnlVVUlEKGNhdGVnb3J5VVVJRCwgdGVuYW50VVVJRCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvY2F0ZWdvcmllcy9hc3NldC9hc3NldC1ncm91cCc7CiAgICBjb25zdCBwYXJhbXMgPSB7CiAgICAgIGNhdGVnb3J5VVVJRDogY2F0ZWdvcnlVVUlELAogICAgICB0ZW5hbnRVVUlEOiB0ZW5hbnRVVUlECiAgICB9OwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5nZXQodXJsLCB7CiAgICAgICAgcGFyYW1zOiBwYXJhbXMKICAgICAgfSkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIGlmIChyZXNwb25zZUpzb24uc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyB1cGxvYWRGaWxlVG9zMyhmaWxlcykgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvZmlsZXMnOwogICAgbGV0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7CiAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlcyk7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnBvc3QodXJsLCBmb3JtRGF0YSkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIGlmIChyZXNwb25zZUpzb24uc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBhZGRBc3NldChhc3NldCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMnOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5wb3N0KHVybCwgSlNPTi5zdHJpbmdpZnkoYXNzZXQpLCBudWxsKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgaWYgKHJlc3BvbnNlSnNvbi5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGVkaXRBc3NldChhc3NldCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMnOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5wdXQodXJsLCBKU09OLnN0cmluZ2lmeShhc3NldCksIG51bGwpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICBpZiAocmVzcG9uc2VKc29uLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZGVsZXRlQXNzZXRJbWFnZShpZCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvaW1hZ2UnOwogICAgY29uc3QgcGFyYW1zID0gewogICAgICBpZDogaWQKICAgIH07CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmRlbGV0ZSh1cmwsIHsKICAgICAgICBwYXJhbXM6IHBhcmFtcwogICAgICB9KS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBkZWxldGVBc3NldEF0dGFjaG1lbnQoaWQpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2F0dGFjaG1lbnQnOwogICAgY29uc3QgcGFyYW1zID0gewogICAgICBpZDogaWQKICAgIH07CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmRlbGV0ZSh1cmwsIHsKICAgICAgICBwYXJhbXM6IHBhcmFtcwogICAgICB9KS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBkZWxldGVDb25zdW1wdGlvbkltYWdlKGlkKSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9jb25zdW1wdGlvbi9pbWFnZSc7CiAgICBjb25zdCBwYXJhbXMgPSB7CiAgICAgIGlkOiBpZAogICAgfTsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZGVsZXRlKHVybCwgewogICAgICAgIHBhcmFtczogcGFyYW1zCiAgICAgIH0pLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGFkZENhdGVnb3J5KGNhdGVnb3J5KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9jYXRlZ29yaWVzJzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwsIEpTT04uc3RyaW5naWZ5KGNhdGVnb3J5KSwgbnVsbCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIGlmIChyZXNwb25zZUpzb24uc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgICAgfQogICAgICB9KS5jYXRjaCgoewogICAgICAgIHJlc3BvbnNlCiAgICAgIH0pID0+IHsKICAgICAgICB0aHJvdyByZXNwb25zZTsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZWRpdENhdGVnb3J5KGNhdGVnb3J5KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9jYXRlZ29yaWVzJzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucHV0KHVybCwgSlNPTi5zdHJpbmdpZnkoY2F0ZWdvcnkpLCBudWxsKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgaWYgKHJlc3BvbnNlSnNvbi5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICB9KS5jYXRjaCgoewogICAgICAgIHJlc3BvbnNlCiAgICAgIH0pID0+IHsKICAgICAgICB0aHJvdyByZXNwb25zZTsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZ2V0Q2F0ZWdvcnkodXVpZCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvY2F0ZWdvcmllcz9pZD0nICsgdXVpZDsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIGlmIChyZXNwb25zZUpzb24uc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRBbGxBc3NldHModGVuYW50dXVpZCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvYmFzaWNpbmZvP3RlbmFudHV1aWQ9JyArIHRlbmFudHV1aWQ7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmdldCh1cmwpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldEFzc2V0KHV1aWQpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzP2lkPScgKyB1dWlkOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5nZXQodXJsKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRQYWdpbmF0ZWRBc3NldEdyb3Vwc0ZvclNEVChyZXF1ZXN0T2JqZWN0KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9hc3NldHMvZ3JvdXAvc2R0JzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwsIHJlcXVlc3RPYmplY3QpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldEFzc2V0SW1hZ2VzQnlVdWlkKGFzc2V0VVVJRCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvaW1hZ2VzP3V1aWQ9JyArIGFzc2V0VVVJRDsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZ2V0QXNzZXRXaXRoRGV0YWlscyhhc3NldFVVSUQsIGFzc2V0RmllbGRzLCBhc3NldENhdGVnb3J5LCBhc3NldEltYWdlcywgYXR0YWNobWVudCwgYWN0aXZpdHlXYWxsLCB1c2FnZXMsIGNvbnN1bXB0aW9ucykgewogICAgbGV0IGJvZHkgPSB7CiAgICAgIHV1aWQ6IGFzc2V0VVVJRCwKICAgICAgYXNzZXRGaWVsZHM6IGFzc2V0RmllbGRzLAogICAgICBjYXRlZ29yeTogYXNzZXRDYXRlZ29yeSwKICAgICAgYXNzZXRJbWFnZXM6IGFzc2V0SW1hZ2VzLAogICAgICBhdHRhY2htZW50czogYXR0YWNobWVudCwKICAgICAgYWN0aXZpdHlXYWxsOiBhY3Rpdml0eVdhbGwsCiAgICAgIHVzYWdlczogdXNhZ2VzLAogICAgICBjb25zdW1wdGlvbnM6IGNvbnN1bXB0aW9ucwogICAgfTsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2RldGFpbCc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnBvc3QodXJsLCBKU09OLnN0cmluZ2lmeShib2R5KSkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldENvbnN1bXB0aW9uc0J5QXNzZXQodXVpZCwgb2Zmc2V0LCBsaW1pdCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvY29uc3VtcHRpb24/dXVpZD0nICsgdXVpZCArICcmb2Zmc2V0PScgKyBvZmZzZXQgKyAnJmxpbWl0PScgKyBsaW1pdDsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZ2V0VXNhZ2VzQnlBc3NldCh1dWlkLCBvZmZzZXQsIGxpbWl0KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy91c2FnZXM/YXNzZXR1dWlkPScgKyB1dWlkICsgJyZvZmZzZXQ9JyArIG9mZnNldCArICcmbGltaXQ9JyArIGxpbWl0OwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5nZXQodXJsKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRQYWdpbmF0ZWRVc2FnZXMocmVxdWVzdCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvdXNhZ2VzL2ZpbHRlcic7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnBvc3QodXJsLCByZXF1ZXN0KS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRVc2FnZUJ5SWQoaWQpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL3VzYWdlcz9pZD0nICsgaWQ7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmdldCh1cmwpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldFBhZ2luYXRlZENvbnN1bXB0aW9ucyhyZXF1ZXN0KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9jb25zdW1wdGlvbi9maWx0ZXInOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5wb3N0KHVybCwgcmVxdWVzdCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZ2V0Q29uc3VtcHRpb25CeUlkKGlkKSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9jb25zdW1wdGlvbj9pZD0nICsgaWQ7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmdldCh1cmwpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGFkZENvbnN1bXB0aW9uKHJlcXVlc3QpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2NvbnN1bXB0aW9uJzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwsIHJlcXVlc3QpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGVkaXRDb25zdW1wdGlvbihyZXF1ZXN0KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9jb25zdW1wdGlvbic7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnB1dCh1cmwsIHJlcXVlc3QpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGFkZE5ld01lc3NhZ2UoYm9keSkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvYWN0aXZpdHl3YWxsL21lc3NhZ2VzJzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwsIEpTT04uc3RyaW5naWZ5KGJvZHkpKS50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2U7CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgYWRkUmVwbHlUb01lc3NhZ2UoYm9keSkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvYWN0aXZpdHl3YWxsL3JlcGx5JzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwsIEpTT04uc3RyaW5naWZ5KGJvZHkpKS50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2U7CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgcmVtb3ZlRmlsZUZyb21TMyhmaWxlTmFtZSkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvZmlsZXMnOwogICAgbGV0IHBhcmFtcyA9IHsKICAgICAgZmlsZW5hbWU6IGZpbGVOYW1lCiAgICB9OwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5kZWxldGUodXJsLCB7CiAgICAgICAgcGFyYW1zOiBwYXJhbXMKICAgICAgfSkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIGlmIChyZXNwb25zZUpzb24uc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRQYWdpbmF0ZWRXYWxsZXRGb3JTRFQocmVxdWVzdE9iamVjdCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvd2FsbGV0L3NkdCc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnBvc3QodXJsLCByZXF1ZXN0T2JqZWN0KS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyB1cGRhdGVBc3NldEZpZWxkcyhhc3NldEZpZWxkcykgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvZmllbGRzJzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucHV0KHVybCwgYXNzZXRGaWVsZHMpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICBpZiAocmVzcG9uc2VKc29uLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZ2V0QXNzZXRGaWVsZHMoYXNzZXRVVUlEcykgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvZmllbGRzJzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwsIGFzc2V0VVVJRHMpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICBpZiAocmVzcG9uc2VKc29uLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZ2VuZXJhdGVDb2Rlcyh0eXBlLCBxdWFudGl0eSkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvY29kZXM/dHlwZT0nICsgdHlwZSArICcmcXVhbnRpdHk9JyArIHF1YW50aXR5OwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5nZXQodXJsKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRGaWVsZFRlbXBsYXRlQnlVVUlEKGlkKSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9maWVsZHRlbXBsYXRlP2lkPScgKyBpZDsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZ2V0UGFnaW5hdGVkSW52ZW50b3J5QXNzZXQoYXNzZXRVVUlELCBvZmZzZXQsIGxpbWl0KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9pbnZlbnRvcnkvYXNzZXQ/YXNzZXRVVUlEPScgKyBhc3NldFVVSUQgKyAnJm9mZnNldD0nICsgb2Zmc2V0ICsgJyZsaW1pdD0nICsgbGltaXQ7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmdldCh1cmwpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldFBhZ2luYXRlZFJlY2VpdmluZ3Mob3JnVVVJRCwgb2Zmc2V0LCBsaW1pdCwgaXNSZWNlaXZlZCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvcmVjZWl2aW5nL2ludmVudG9yeS9hc3NldD90ZW5hbnRVVUlEPScgKyBvcmdVVUlEICsgJyZvZmZzZXQ9JyArIG9mZnNldCArICcmbGltaXQ9JyArIGxpbWl0ICsgJyZpc1JlY2VpdmVkPScgKyBpc1JlY2VpdmVkOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5nZXQodXJsKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRQYWdpbmF0ZWRSZWNlaXZpbmdPcmRlckl0ZW1zKG9yZ1VVSUQsIG9mZnNldCwgbGltaXQpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL3JlY2VpdmluZy9pbnZlbnRvcnkvYXNzZXQvaXRlbXM/dGVuYW50VVVJRD0nICsgb3JnVVVJRCArICcmb2Zmc2V0PScgKyBvZmZzZXQgKyAnJmxpbWl0PScgKyBsaW1pdDsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZ2V0UmVjZWl2aW5nRGV0YWlsKHJlY2VpdmluZ051bWJlcikgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvcmVjZWl2aW5nL2ludmVudG9yeS9hc3NldC9udW1iZXI/cmVjZWl2aW5nTnVtYmVyPScgKyByZWNlaXZpbmdOdW1iZXI7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmdldCh1cmwpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIG1hcmtJbnZlbnRvcnlBc3NldHNGb3JBc3NpZ25tZW50KGFydGljbGVOdW1iZXIpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2ludmVudG9yeS9hc3NldC9tYXJrP2FydGljbGVOdW1iZXI9JyArIGFydGljbGVOdW1iZXI7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnB1dCh1cmwpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIC8vIGFzeW5jIHVwZGF0ZUludmVudG9yeUFzc2V0c0xvY2F0aW9uKHJlcXVlc3RPYmplY3QpIHsKICAvLyAgICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9pbnZlbnRvcnkvYXNzZXQvbG9jYXRpb25yJzsKICAvLyAgICAgdHJ5IHsKICAvLyAgICAgICAgIHJldHVybiBhd2FpdCBheGlvcy5wdXQodXJsLCByZXF1ZXN0T2JqZWN0KQogIC8vICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZUpzb24pID0+IHsKICAvLyAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbgogIC8vICAgICAgICAgICAgIH0pCiAgLy8gICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHsgdGhyb3cgZXJyb3IgfSk7CiAgLy8gICAgIH0gY2F0Y2ggKGUpIHsKICAvLyAgICAgICAgIHRocm93IGU7CiAgLy8gICAgIH0KICAvLyB9LAogIGFzeW5jIHVwZGF0ZVJlY2VpdmluZyhyZWNlaXZpbmdOdW1iZXIpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL3JlY2VpdmluZy9pbnZlbnRvcnkvYXNzZXQ/cmVjZWl2aW5nTnVtYmVyPScgKyByZWNlaXZpbmdOdW1iZXI7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnB1dCh1cmwpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldEludmVudG9yeUFzc2V0Q291bnRCeUxvY2F0aW9uKHJlcXVlc3QpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2ludmVudG9yeS9hc3NldC9sb2NhdGlvbi9jb3VudCc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnBvc3QodXJsLCByZXF1ZXN0KS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRJbnZlbnRvcnlBc3NldElvdERhdGEodG9rZW4pIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2ludmVudG9yeS9hc3NldC9pb3QnOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5nZXQodXJsLCB7CiAgICAgICAgY2FuY2VsVG9rZW46IHRva2VuCiAgICAgIH0pLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGRlbGV0ZUludmVudG9yeUFzc2V0QnlBcnRpY2xlTnVtYmVyKGFydGljbGVOdW1iZXIpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2Fzc2V0P2FydGljbGVOdW1iZXI9JyArIGFydGljbGVOdW1iZXI7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmRlbGV0ZSh1cmwpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGFkZEFuZEFzc2lnbkludmVudG9yeUFzc2V0cyhyZXF1ZXN0KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9pbnZlbnRvcnkvYXNzZXQvYWRkQXNzaWduJzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwsIHJlcXVlc3QpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGRlbGV0ZU1hcmtJbnZlbnRvcnlJdGVtcyhhcnRpY2xlTnVtYmVyKSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9pbnZlbnRvcnkvYXNzZXQvbWFyaz9hcnRpY2xlTnVtYmVyPScgKyBhcnRpY2xlTnVtYmVyOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5kZWxldGUodXJsKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICAvLyBhc3luYyB1cGRhdGVJbnZlbnRvcnlBc3NldHNMb2NhdGlvbihyZXF1ZXN0KSB7CiAgLy8gICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2ludmVudG9yeS9hc3NldC9sb2NhdGlvbic7CiAgLy8gICAgIHRyeSB7CiAgLy8gICAgICAgICByZXR1cm4gYXdhaXQgYXhpb3MucHV0KHVybCwgcmVxdWVzdCkKICAvLyAgICAgICAgICAgICAudGhlbigocmVzcG9uc2VKc29uKSA9PiB7CiAgLy8gICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgLy8gICAgICAgICAgICAgfSkKICAvLyAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4geyB0aHJvdyBlcnJvciB9KTsKICAvLyAgICAgfSBjYXRjaCAoZSkgewogIC8vICAgICAgICAgdGhyb3cgZQogIC8vICAgICB9CiAgLy8gfSwKICBhc3luYyBnZXRQYWdpbmF0ZWRCdWxrT3JTaW5nbGVBc3NldHMocmVxdWVzdCwgdGVuYW50dXVpZCwgb2Zmc2V0LCBsaW1pdCwgaXNCdWxrKSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9idWxrP3RlbmFudHV1aWQ9JyArIHRlbmFudHV1aWQgKyAnJm9mZnNldD0nICsgb2Zmc2V0ICsgJyZsaW1pdD0nICsgbGltaXQgKyAnJmlzQnVsaz0nICsgaXNCdWxrOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5wdXQodXJsLCByZXF1ZXN0KS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRQYWdpbmF0ZWRDb2Rlc0RhdGFGb3JTRFQocmVxdWVzdCwgbmFtZUNvZGUpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2ludmVudG9yeS9kZWZpbml0aW9uL3NkdD9uYW1lQ29kZT0nICsgbmFtZUNvZGU7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnBvc3QodXJsLCByZXF1ZXN0KS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRQYWdpbmF0ZWRDb2Rlcyh0ZW5hbnRVVUlELCBvZmZzZXQsIGxpbWl0LCBuYW1lQ29kZSkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvaW52ZW50b3J5L2RlZmluaXRpb24/dGVuYW50dXVpZD0nICsgdGVuYW50VVVJRCArICcmb2Zmc2V0PScgKyBvZmZzZXQgKyAnJmxpbWl0PScgKyBsaW1pdCArICcmbmFtZUNvZGU9JyArIG5hbWVDb2RlOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5nZXQodXJsKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBhZGRJbnZlbnRvcnlJdGVtRGVmaW5pdGlvbihyZXF1ZXN0KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9pbnZlbnRvcnkvZGVmaW5pdGlvbic7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnBvc3QodXJsLCByZXF1ZXN0KS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRBbGxPcHRpb25zRm9yQXNzZXRDb2RlQ3JlYXRpb24obmFtZUNvZGVzLCB0ZW5hbnRVVUlELCB0eXBlKSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9pbnZlbnRvcnkvZGVmaW5pdGlvbi9vcHRpb25zP25hbWVDb2RlPScgKyBuYW1lQ29kZXMgKyAnJnRlbmFudFV1aWQ9JyArIHRlbmFudFVVSUQgKyAnJnR5cGU9JyArIHR5cGU7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmdldCh1cmwpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldEZpZWxkc1ZhbHVlcyhhc3NldENvZGUpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2ludmVudG9yeS9kZWZpbml0aW9uL3ZhbHVlcz9pbnZlbnRvcnlJdGVtQ29kZT0nICsgYXNzZXRDb2RlOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5nZXQodXJsKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyB1cGRhdGVHZW5lcmljRmllbGRWYWx1ZShyZXF1ZXN0KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9pbnZlbnRvcnkvZGVmaW5pdGlvbic7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnB1dCh1cmwsIHJlcXVlc3QpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldFBhZ2luYXRlZEludmVudG9yeUFzc2V0c0ZvclNEVChyZXF1ZXN0KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9pbnZlbnRvcnkvYXNzZXRzL3NkdCc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnBvc3QodXJsLCByZXF1ZXN0KS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRMaW5lbkFnaW5nU3RhdHVzKG9yZ2FuaXphdGlvbklkKSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9hZ2luZy9zdGF0dXM/b3JnSWQ9JyArIG9yZ2FuaXphdGlvbklkOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5nZXQodXJsKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBjcmVhdGVXYWxsZXQod2FsbGV0T2JqKSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy93YWxsZXRzJzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwsIHdhbGxldE9iaikudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgR2V0V2FsbGV0QnlXYWxsZXRVVUlEKHdhbGxldFVVSUQpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL3dhbGxldC9nZXQvd2FsbGV0P3dhbGxldFVVSUQ9JyArIHdhbGxldFVVSUQ7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmdldCh1cmwpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGVkaXRXYWxsZXQod2FsbGV0T2JqKSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy93YWxsZXRzJzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucHV0KHVybCwgd2FsbGV0T2JqKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBhcmNoaXZlT3JEZWxldGVXYWxsZXRCeVVVSUQodXVpZCwgdHlwZXMpIHsKICAgIGxldCBwYXJhbXMgPSB7CiAgICAgIHV1aWQ6IHV1aWQsCiAgICAgIHR5cGU6IHR5cGVzCiAgICB9OwogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvd2FsbGV0L2FyY2hpdmUtZGVsZXRlJzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZGVsZXRlKHVybCwgewogICAgICAgIHBhcmFtczogcGFyYW1zCiAgICAgIH0pLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGFkZEFzc2V0R3JvdXAoYXNzZXRPYmopIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2Fzc2V0cy9ncm91cCc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnBvc3QodXJsLCBhc3NldE9iaikudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZWRpdEFzc2V0R3JvdXAoYXNzZXRPYmopIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2Fzc2V0cy9ncm91cCc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnB1dCh1cmwsIGFzc2V0T2JqKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBhcmNoaXZlQXNzZXRHcm91cCh1dWlkLCB0eXBlcykgewogICAgbGV0IHBhcmFtcyA9IHsKICAgICAgaWQ6IHV1aWQsCiAgICAgIHR5cGU6IHR5cGVzCiAgICB9OwogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvYXNzZXRzL2dyb3VwJzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZGVsZXRlKHVybCwgewogICAgICAgIHBhcmFtczogcGFyYW1zCiAgICAgIH0pLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGRlbGV0ZUFzc2V0R3JvdXAodXVpZCwgdHlwZXMpIHsKICAgIGxldCBwYXJhbXMgPSB7CiAgICAgIGlkOiB1dWlkLAogICAgICB0eXBlOiB0eXBlcwogICAgfTsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2Fzc2V0cy9ncm91cCc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmRlbGV0ZSh1cmwsIHsKICAgICAgICBwYXJhbXM6IHBhcmFtcwogICAgICB9KS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRQYWdpbmF0ZWRBc3NldEdyb3Vwcyh0ZW5hbnRVVUlELCBvZmZzZXQsIGxpbWl0KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9hc3NldHMvZ3JvdXAvZmlsdGVyJzsKICAgIGNvbnN0IGJvZHkgPSB7CiAgICAgIHRlbmFudFVVSUQ6IHRlbmFudFVVSUQsCiAgICAgIG9mZnNldDogb2Zmc2V0LAogICAgICBsaW1pdDogbGltaXQKICAgIH07CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnBvc3QodXJsLCBKU09OLnN0cmluZ2lmeShib2R5KSkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIC8qYXN5bmMgZ2V0QXNzZXRHcm91cChncm91cFVVSUQpIHsNCiAgICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2Fzc2V0cy9ncm91cCc7DQogICAgICBjb25zdCBwYXJhbXMgPSB7DQogICAgICAgICAgdXVpZDogZ3JvdXBVVUlEDQogICAgICB9Ow0KICAgICAgdHJ5IHsNCiAgICAgICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCwgeyBwYXJhbXM6IHBhcmFtcyB9KQ0KICAgICAgICAgICAgICAudGhlbigocmVzcG9uc2VKc29uKSA9PiB7DQogICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOw0KICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7IHRocm93IGVycm9yIH0pOw0KICAgICAgfSBjYXRjaCAoZSkgew0KICAgICAgICAgIHRocm93IGU7DQogICAgICB9DQogIH0sKi8KICBhc3luYyBnZXRBc3NldEdyb3VwKGdyb3VwdXVpZCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvYXNzZXRzL2dyb3VwP3V1aWQ9JyArIGdyb3VwdXVpZDsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIGlmIChyZXNwb25zZUpzb24uc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBhcmNoaXZlT3JEZWxldGVBc3NldCh1dWlkLCB0eXBlcykgewogICAgbGV0IHBhcmFtcyA9IHsKICAgICAgdXVpZDogdXVpZCwKICAgICAgdHlwZTogdHlwZXMKICAgIH07CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9hcmNoaXZlLWRlbGV0ZSc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmRlbGV0ZSh1cmwsIHsKICAgICAgICBwYXJhbXM6IHBhcmFtcwogICAgICB9KS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyByZXN0b3JlQXJjaGl2ZWRBc3NldCh1dWlkLCB0eXBlcykgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvcmVzdG9yZT91dWlkPScgKyB1dWlkICsgIiZ0eXBlPSIgKyB0eXBlczsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucHV0KHVybCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZ2V0QXNzZXROYW1lQW5kTnVtYmVyQW5kQ2F0ZWdvcnlCeUFzc2V0VVVJRCh1dWlkKSB7CiAgICBsZXQgcGFyYW1zID0gewogICAgICB1dWlkOiB1dWlkCiAgICB9OwogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvZGV0YWlsJzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCwgewogICAgICAgIHBhcmFtczogcGFyYW1zCiAgICAgIH0pLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldEFzc2V0R3JvdXBzTmFtZUFuZFVVSURCeVRlbmFudFVVSUQodGVuYW50VVVJRCkgewogICAgbGV0IHBhcmFtcyA9IHsKICAgICAgdGVuYW50VVVJRDogdGVuYW50VVVJRAogICAgfTsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2dyb3VwJzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCwgewogICAgICAgIHBhcmFtczogcGFyYW1zCiAgICAgIH0pLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldEFzc2V0c05hbWVBbmRVVUlEQnlUZW5hbnRVVUlEKHRlbmFudFVVSUQpIHsKICAgIGxldCBwYXJhbXMgPSB7CiAgICAgIHRlbmFudFVVSUQ6IHRlbmFudFVVSUQKICAgIH07CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9uYW1lJzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCwgewogICAgICAgIHBhcmFtczogcGFyYW1zCiAgICAgIH0pLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGV4cG9ydEV4Y2VsRmlsZShyZXF1ZXN0KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9leHBvcnQvZXhjZWwnOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5wb3N0KHVybCwgcmVxdWVzdCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgaW1wb3J0RXhjZWxGaWxlKGZpbGVzLCBjYXRlZ29yeSkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvaW1wb3J0L2V4Y2VsJzsKICAgIGxldCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpOwogICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgZmlsZXMpOwogICAgY29uc3QgcGFyYW1zID0gewogICAgICBjYXRlZ29yeTogY2F0ZWdvcnkKICAgIH07CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnBvc3QodXJsLCBmb3JtRGF0YSwgewogICAgICAgIHBhcmFtczogcGFyYW1zCiAgICAgIH0pLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICBpZiAocmVzcG9uc2VKc29uLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZXhwb3J0QXNzZXREZXRhaWxzKHJlcXVlc3QpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2V4cG9ydC9kZXRhaWxzJzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwsIHJlcXVlc3QpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICBpZiAocmVzcG9uc2VKc29uLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZ2V0Q2F0ZWdvcmllc0ZpZWxkc0xpc3RCeVRlbmFudFVVSUQodGVuYW50VVVJRCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvY2F0ZWdvcmllcy9maWVsZHM/dXVpZD0nICsgdGVuYW50VVVJRDsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIGlmIChyZXNwb25zZUpzb24uc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRJbXBvcnRUZW1wbGF0ZUxpc3RCeVVzZXJVVUlEQW5kVGVuYW50VVVJRCh1c2VyVVVJRCwgdGVuYW50VVVJRCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvaW1wb3J0L3RlbXBsYXRlcz91c2VyVVVJRD0nICsgdXNlclVVSUQgKyAnJnRlbmFudFVVSUQ9JyArIHRlbmFudFVVSUQ7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmdldCh1cmwpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICBpZiAocmVzcG9uc2VKc29uLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgYWRkSW1wb3J0VGVtcGxhdGUocmVxdWVzdCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvaW1wb3J0L3RlbXBsYXRlJzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwsIHJlcXVlc3QpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICBpZiAocmVzcG9uc2VKc29uLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZG93bmxvYWRBc3NldEltcG9ydFRlbXBsYXRlKHJlcXVlc3QpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2Rvd25sb2FkL3RlbXBsYXRlJzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwsIHJlcXVlc3QpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICBpZiAocmVzcG9uc2VKc29uLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZ2V0UGFnaW5hdGVkQXNzZXRJbXBvcnRUZW1wbGF0ZXNGb3JTRFQocmVxdWVzdCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvaW1wb3J0L3RlbXBsYXRlcyc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnBvc3QodXJsLCByZXF1ZXN0KS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgaWYgKHJlc3BvbnNlSnNvbi5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGltcG9ydEJ1bGtBc3NldEJ5Q1NWKGZpbGVzLCByZXF1ZXN0KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9pbXBvcnQvY3N2JzsKICAgIGxldCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpOwogICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgZmlsZXMpOwogICAgY29uc3QgcGFyYW1zID0gewogICAgICB0ZW5hbnRVVUlEOiByZXF1ZXN0LnRlbmFudFVVSUQsCiAgICAgIHVzZXJVVUlEOiByZXF1ZXN0LnVzZXJVVUlELAogICAgICB1c2VyTmFtZTogcmVxdWVzdC51c2VyTmFtZSwKICAgICAgaW1wb3J0VHlwZTogcmVxdWVzdC5pbXBvcnRUeXBlCiAgICB9OwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5wb3N0KHVybCwgZm9ybURhdGEsIHsKICAgICAgICBwYXJhbXM6IHBhcmFtcwogICAgICB9KS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgaWYgKHJlc3BvbnNlSnNvbi5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGRvd25sb2FkRmFpbHVyZUltcG9ydHMoaW1wb3J0VVVJRCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvZG93bmxvYWQvZmFpbHVyZXM/aW1wb3J0VVVJRD0nICsgaW1wb3J0VVVJRDsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZ2V0KHVybCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIGlmIChyZXNwb25zZUpzb24uc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRQYWdpbmF0ZWRMYXN0QXNzZXRJbXBvcnRzRm9yU0RUKHJlcXVlc3QpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2ltcG9ydC9sYXN0JzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwsIHJlcXVlc3QpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICBpZiAocmVzcG9uc2VKc29uLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZXhwb3J0QXNzZXRzSW5CdWxrKHJlcXVlc3QpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2V4cG9ydC9kZXRhaWwnOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5wb3N0KHVybCwgcmVxdWVzdCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIGlmIChyZXNwb25zZUpzb24uc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBhZGRVc2FnZXMocmVxdWVzdCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvdXNhZ2VzJzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwsIHJlcXVlc3QpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICBpZiAocmVzcG9uc2VKc29uLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZWRpdFVzYWdlcyhyZXF1ZXN0KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy91c2FnZXMnOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5wdXQodXJsLCByZXF1ZXN0KS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgaWYgKHJlc3BvbnNlSnNvbi5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldEZpbGUoZmlsZSkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvZmlsZXMnOwogICAgY29uc3QgcGFyYW1zID0gewogICAgICB1cmw6IGZpbGUKICAgIH07CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmdldCh1cmwsIHsKICAgICAgICBwYXJhbXM6IHBhcmFtcwogICAgICB9KS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgaWYgKHJlc3BvbnNlSnNvbi5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldFRyYW5zYWN0aW9uKHdhbGxldFVVSUQsIG9mZnNldCwgbGltaXQpIHsKICAgIGNvbnN0IHBhcmFtcyA9IHsKICAgICAgd2FsbGV0VVVJRDogd2FsbGV0VVVJRCwKICAgICAgb2Zmc2V0OiBvZmZzZXQsCiAgICAgIGxpbWl0OiBsaW1pdAogICAgfTsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL3dhbGxldC90cmFuc2FjdGlvbic7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmdldCh1cmwsIHsKICAgICAgICBwYXJhbXM6IHBhcmFtcwogICAgICB9KS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgaWYgKHJlc3BvbnNlSnNvbi5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIC8vICoqKioqKioqKiBjYXRlZ29yeSB0ZW1wbGF0ZSBzdGFydCAqKioqKioqKioqKiogLy8KICBhc3luYyBnZXRQYWdpbmF0ZWRBc3NldENhdGVUZW1wbGF0ZShyZXF1ZXN0T2JqKSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9jYXRlZ29yeS90ZW1wbGF0ZXMvc2R0JzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwsIHJlcXVlc3RPYmopLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGFkZENhdGVnb3J5VGVtcGxhdGUoYXNzZXQpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2NhdGVnb3J5L3RlbXBsYXRlcyc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnBvc3QodXJsLCBKU09OLnN0cmluZ2lmeShhc3NldCkpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICBpZiAocmVzcG9uc2VKc29uLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgLy8gZWRpdCBnZXQgZGF0YQogIGFzeW5jIGdldEFzc2V0Q2F0ZVRlbXBsYXRlKHV1aWQpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2NhdGVnb3J5L3RlbXBsYXRlcz91dWlkPScgKyB1dWlkOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5nZXQodXJsKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgaWYgKHJlc3BvbnNlSnNvbi5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGVkaXRBc3NldENhdGVUZW1wbGF0ZShyZXF1ZXN0KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9jYXRlZ29yaWVzL3RlbXBsYXRlcyc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLnB1dCh1cmwsIEpTT04uc3RyaW5naWZ5KHJlcXVlc3QpKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgaWYgKHJlc3BvbnNlSnNvbi5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIC8vIAogIGFzeW5jIGFyY2hpdmVPckRlbGV0ZUFzc2V0Q2F0ZVRlbXBsYXRlKHV1aWQsIHR5cGVzKSB7CiAgICBsZXQgcGFyYW1zID0gewogICAgICB1dWlkOiB1dWlkLAogICAgICB0eXBlOiB0eXBlcwogICAgfTsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2NhdGVnb3J5L3RlbXBsYXRlL2FyY2hpdmUtZGVsZXRlJzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZGVsZXRlKHVybCwgewogICAgICAgIHBhcmFtczogcGFyYW1zCiAgICAgIH0pLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIERlbGV0ZUFyY2hpdmVkQXNzZXRDYXRlVGVtcGxhdGUodXVpZCwgdHlwZXMpIHsKICAgIGxldCBwYXJhbXMgPSB7CiAgICAgIHV1aWQ6IHV1aWQsCiAgICAgIHR5cGU6IHR5cGVzCiAgICB9OwogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvY2F0ZWdvcmllcyc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmRlbGV0ZSh1cmwsIHsKICAgICAgICBwYXJhbXM6IHBhcmFtcwogICAgICB9KS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICAvLyAlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUgQXNzZXQgY2F0YWdvcmllcyAlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJTUKICBhc3luYyBnZXRQYWdpbmF0ZWRBc3NldENhdGUocmVxdWVzdE9iaikgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvY2F0ZWdvcnkvc2R0JzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwsIHJlcXVlc3RPYmopLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGFkZEFzc2V0c0NhdGVnb3J5KENhdGUpIHsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2NhdGVnb3J5JzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucG9zdCh1cmwsIEpTT04uc3RyaW5naWZ5KENhdGUpKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgaWYgKHJlc3BvbnNlSnNvbi5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aHJvdyBlOwogICAgfQogIH0sCgogIGFzeW5jIGdldEFzc2V0Q2F0ZShpZCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvY2F0ZWdvcmllcz9pZD0nICsgaWQ7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmdldCh1cmwpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICBpZiAocmVzcG9uc2VKc29uLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgZWRpdEFzc2V0Q2F0ZShyZXF1ZXN0KSB7CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9jYXRlZ29yaWVzL2Fzc2V0JzsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MucHV0KHVybCwgSlNPTi5zdHJpbmdpZnkocmVxdWVzdCkpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICBpZiAocmVzcG9uc2VKc29uLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgYXJjaGl2ZU9yRGVsZXRlQXNzZXRDYXRlKHV1aWQsIHR5cGVzKSB7CiAgICBsZXQgb2JqID0gewogICAgICB1dWlkOiB1dWlkLAogICAgICB0eXBlOiB0eXBlcwogICAgfTsKICAgIGNvbnN0IHVybCA9IEVuZFBvaW50cy5hc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFzc2V0TWFuYWdlbWVudCArICcvYXNzZXRzL2NhdGVnb3J5L2FyY2hpdmUtZGVsZXRlP3V1aWQ9JyArIHV1aWQgKyAnJnR5cGU9JyArIHR5cGVzOwoKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5kZWxldGUodXJsKS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBkZWxldGVBcmNoaXZlZEFzc2V0Q2F0ZSh1dWlkLCB0eXBlcykgewogICAgbGV0IG9iaiA9IHsKICAgICAgdXVpZDogdXVpZCwKICAgICAgdHlwZTogdHlwZXMKICAgIH07CiAgICBjb25zdCB1cmwgPSBFbmRQb2ludHMuYXNzZXRNYW5hZ2VtZW50U2VydmljZS5hc3NldE1hbmFnZW1lbnQgKyAnL2Fzc2V0cy9jYXRlZ29yeS9hcmNoaXZlLWRlbGV0ZT91dWlkPScgKyB1dWlkICsgJyZ0eXBlPScgKyB0eXBlczsKCiAgICB0cnkgewogICAgICByZXR1cm4gYXdhaXQgYXhpb3MuZGVsZXRlKHVybCkudGhlbihyZXNwb25zZUpzb24gPT4gewogICAgICAgIHJldHVybiByZXNwb25zZUpzb247CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfSwKCiAgYXN5bmMgRGVsZXRlQXNzZXRDYXRlKHV1aWQsIHR5cGVzKSB7CiAgICBsZXQgcGFyYW1zID0gewogICAgICB1dWlkOiB1dWlkCiAgICB9OwogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvY2F0ZWdvcmllcy9hc3NldCc7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmRlbGV0ZSh1cmwsIHsKICAgICAgICBwYXJhbXM6IHBhcmFtcwogICAgICB9KS50aGVuKHJlc3BvbnNlSnNvbiA9PiB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlSnNvbjsKICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRocm93IGVycm9yOwogICAgICB9KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9LAoKICBhc3luYyBnZXRBc3NldGJ5Q2F0ZShpZCwgb2Zmc2V0LCBsaW1pdCkgewogICAgY29uc3QgdXJsID0gRW5kUG9pbnRzLmFzc2V0TWFuYWdlbWVudFNlcnZpY2UuYXNzZXRNYW5hZ2VtZW50ICsgJy9hc3NldHMvZ2V0YXNzZXRzYnljYXRlZ29yeXV1aWQ/b2Zmc2V0PScgKyBvZmZzZXQgKyAnJmxpbWl0PScgKyBsaW1pdCArICcmdXVpZD0nICsgaWQ7CgogICAgdHJ5IHsKICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmdldCh1cmwpLnRoZW4ocmVzcG9uc2VKc29uID0+IHsKICAgICAgICBpZiAocmVzcG9uc2VKc29uLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICByZXR1cm4gcmVzcG9uc2VKc29uOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHRocm93IGU7CiAgICB9CiAgfQoKfTsKZXhwb3J0IGRlZmF1bHQgQXNzZXRNYW5hZ2VtZW50U2VydmljZTs="},null]}