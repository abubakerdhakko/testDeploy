{"remainingRequest":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/babel-loader/lib/index.js!/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/src/views/assets/components/CreateTemplateDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/src/views/assets/components/CreateTemplateDialog.vue","mtime":1661968702428},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/babel.config.js","mtime":1661968702388},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/cache-loader/dist/cjs.js","mtime":1662622637759},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/babel-loader/lib/index.js","mtime":1662622637719},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/cache-loader/dist/cjs.js","mtime":1662622637759},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/vue-loader/lib/index.js","mtime":1662622639723}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1leGNlcHRpb24uc3RhY2suanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5hdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNldC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzbmV4dC50eXBlZC1hcnJheS5maW5kLWxhc3QuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lc25leHQudHlwZWQtYXJyYXkuZmluZC1sYXN0LWluZGV4LmpzIjsKaW1wb3J0IHsgcmVxdWlyZWQgfSBmcm9tICJ2dWVsaWRhdGUvbGliL3ZhbGlkYXRvcnMiOwppbXBvcnQgQXNzZXRNYW5hZ2VtZW50U2VydmljZSBmcm9tICIuLi8uLi8uLi9zZXJ2aWNlcy9Bc3NldE1hbmFnZW1lbnRTZXJ2aWNlIjsKaW1wb3J0IGRyYWdnYWJsZSBmcm9tICJ2dWVkcmFnZ2FibGUiOwppbXBvcnQgeyBTb3J0YWJsZSwgU3dhcCB9IGZyb20gInNvcnRhYmxlanMiOwppbXBvcnQgeyBGdW5jdGlvbnMgfSBmcm9tICJAL3NoYXJlZC9GdW5jdGlvbnMiOwppbXBvcnQgbG9hZGVyIGZyb20gIkAvY29tcG9uZW50cy9Mb2FkZXIudnVlIjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJDcmVhdGVBc3NldEltcG9ydFRlbXBsYXRlIiwKICBjb21wb25lbnRzOiB7CiAgICBkcmFnZ2FibGUsCiAgICBsb2FkZXIKICB9LAogIHByb3BzOiB7CiAgICBjYXRlZ29yaWVzOiBBcnJheSwKICAgIHZpZXdUZW1wbGF0ZTogQm9vbGVhbiwKICAgIHRlbXBsYXRlRGF0YTogT2JqZWN0CiAgfSwKCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGVuYWJsZWQ6IGZhbHNlLAogICAgICBmaWxlOiAiIiwKICAgICAgbGFiZWw6ICJUZW1wbGF0ZSIsCiAgICAgIGN1cnJlbnRVc2VyRGV0YWlsczogIiIsCiAgICAgIHRvYXN0RmxhZzogMCwKICAgICAgdG9hc3RNZXNzYWdlOiAiIiwKICAgICAgdG9hc3RUeXBlOiAiIiwKICAgICAgbG9hZGVyRmxhZzogZmFsc2UsCiAgICAgIGluZGV4OiAwLAogICAgICBmaWVsZHNEYXRhOiBbXSwKICAgICAgdGVtcGxhdGU6ICIiLAogICAgICB0ZW1wbGF0ZXM6IFtdLAogICAgICBsaXN0czogW3sKICAgICAgICBuYW1lOiAiQ2F0ZWdvcnkgTmFtZSIsCiAgICAgICAgY2hlY2s6IHRydWUsCiAgICAgICAgZGlzYWJsZTogdHJ1ZQogICAgICB9LCB7CiAgICAgICAgbmFtZTogIkFzc2V0IE5hbWUiLAogICAgICAgIGNoZWNrOiB0cnVlLAogICAgICAgIGRpc2FibGU6IHRydWUKICAgICAgfSwgewogICAgICAgIG5hbWU6ICJNb2RlbCAjIiwKICAgICAgICBjaGVjazogdHJ1ZSwKICAgICAgICBkaXNhYmxlOiB0cnVlCiAgICAgIH0sIHsKICAgICAgICBuYW1lOiAiTWFudWZhY3R1cmVyIE5hbWUvSUQiLAogICAgICAgIGNoZWNrOiB0cnVlLAogICAgICAgIGRpc2FibGU6IHRydWUKICAgICAgfSwgewogICAgICAgIG5hbWU6ICJQdXJjaGFzZWQgRGF0ZSIsCiAgICAgICAgY2hlY2s6IGZhbHNlLAogICAgICAgIGRpc2FibGU6IGZhbHNlCiAgICAgIH0sIHsKICAgICAgICBuYW1lOiAiU3RhdHVzIiwKICAgICAgICBjaGVjazogZmFsc2UsCiAgICAgICAgZGlzYWJsZTogZmFsc2UKICAgICAgfSwgewogICAgICAgIG5hbWU6ICJXYXJyYW50eSBVbml0IiwKICAgICAgICBjaGVjazogdHJ1ZSwKICAgICAgICBkaXNhYmxlOiB0cnVlCiAgICAgIH0sIHsKICAgICAgICBuYW1lOiAiV2FycmFudHkiLAogICAgICAgIGNoZWNrOiB0cnVlLAogICAgICAgIGRpc2FibGU6IHRydWUKICAgICAgfSwgewogICAgICAgIG5hbWU6ICJQcmltYXJ5IFVzYWdlIFVuaXQiLAogICAgICAgIGNoZWNrOiB0cnVlLAogICAgICAgIGRpc2FibGU6IHRydWUKICAgICAgfSwgewogICAgICAgIG5hbWU6ICJTZWNvbmRhcnkgVXNhZ2UgVW5pdCIsCiAgICAgICAgY2hlY2s6IHRydWUsCiAgICAgICAgZGlzYWJsZTogdHJ1ZQogICAgICB9LCB7CiAgICAgICAgbmFtZTogIkNvbnN1bXB0aW9uIFVuaXQiLAogICAgICAgIGNoZWNrOiB0cnVlLAogICAgICAgIGRpc2FibGU6IHRydWUKICAgICAgfSwgewogICAgICAgIG5hbWU6ICJXcml0ZSBBc3NldCBkZXNjcmlwdGlvbiBoZXJlIiwKICAgICAgICBjaGVjazogZmFsc2UsCiAgICAgICAgZGlzYWJsZTogZmFsc2UKICAgICAgfV0sCiAgICAgIGRyYWdnaW5nOiBmYWxzZSwKICAgICAgZG93bmxvYWRUZW1wbGF0ZTogIiIsCiAgICAgIHRlbXBsYXRlTmFtZTogIiIsCiAgICAgIGJhY2tVcExpc3RzOiBbXSwKICAgICAgc2F2ZURpc2FibGU6IGZhbHNlLAogICAgICBzdHlsZUJ1dHRvbjE6ICJtYXJnaW4tbGVmdDo1cHg7IiwKICAgICAgc3R5bGVCdXR0b24yOiAibWFyZ2luLWxlZnQ6NXB4OyBwb2ludGVyLWV2ZW50czogbm9uZSIsCiAgICAgIHZpZXc6IHRydWUKICAgIH07CiAgfSwKCiAgd2F0Y2g6IHt9LAogIG1ldGhvZHM6IHsKICAgIGdldEZvcm1FcnJvck1lc3NhZ2UoZmllbGRWYWxpZGF0aW9uKSB7CiAgICAgIGlmIChmaWVsZFZhbGlkYXRpb24uJGRpcnR5KSB7CiAgICAgICAgcmV0dXJuIEZ1bmN0aW9ucy5nZXRGb3JtRmllbGRFcnJvck1lc3NhZ2UoZmllbGRWYWxpZGF0aW9uKTsKICAgICAgfQogICAgfSwKCiAgICBjaGVja0JveENsaWNrKGluZGV4KSB7CiAgICAgIHRoaXMubGlzdHNbaW5kZXhdLmNoZWNrID0gdHJ1ZTsKICAgIH0sCgogICAgY2hlY2tNb3ZlKCkge30sCgogICAgb25UZW1wbGF0ZVNlbGVjdCh2YWwpIHsKICAgICAgdGhpcy5zYXZlRGlzYWJsZSA9IHRydWU7CiAgICAgIGxldCB0ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGVzLmZpbHRlcih0ID0+IHQudXVpZCA9PT0gdmFsLnZhbHVlKTsKICAgICAgdGhpcy5saXN0cyA9IEpTT04ucGFyc2UodGVtcGxhdGVbMF0uY29sdW1uRGF0YSk7CiAgICB9LAoKICAgIGNsZWFyVGVtcGxhdGUoKSB7CiAgICAgIHRoaXMuc2F2ZURpc2FibGUgPSBmYWxzZTsKICAgICAgdGhpcy50ZW1wbGF0ZU5hbWUgPSAiIjsKICAgICAgdGhpcy5saXN0cyA9IHRoaXMuYmFja1VwTGlzdHM7CiAgICB9LAoKICAgIGRvd25sb2FkRmlsZSgpIHsKICAgICAgaWYgKHRoaXMudGVtcGxhdGUgPT09ICIiKSB7CiAgICAgICAgdGhpcy50b2FzdE1lc3NhZ2UgPSAiS2luZGx5IHNlbGVjdCB0ZW1wbGF0ZSB0byBEb3dubG9hZC4iOwogICAgICAgIHRoaXMudG9hc3RUeXBlID0gIndhcm5pbmciOwogICAgICAgIHRoaXMudG9hc3RGbGFnKys7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB0aGlzLmNyZWF0ZURvd25sb2FkVGVtcGxhdGUoKTsKICAgICAgdGhpcy5sb2FkZXJGbGFnID0gdHJ1ZTsKICAgICAgbGV0IHRlbXAgPSB0aGlzLnRlbXBsYXRlcy5maWx0ZXIodCA9PiB0LnV1aWQgPT09IHRoaXMudGVtcGxhdGUpOwogICAgICBsZXQgZG93bmxvYWQgPSB7CiAgICAgICAgY29sdW1uc0RhdGE6IHRoaXMuZG93bmxvYWRUZW1wbGF0ZSwKICAgICAgICB0ZW1wbGF0ZU5hbWU6IHRlbXBbMF0udGVtcGxhdGVOYW1lCiAgICAgIH07CiAgICAgIHRoaXMuZG93bmxvYWRBc3NldFRlbXBsYXRlKGRvd25sb2FkKTsKICAgIH0sCgogICAgY3JlYXRlVGVtcGxhdGUoKSB7CiAgICAgIGlmICh0aGlzLmNhdGVnb3JpZXMubGVuZ3RoIDw9IDApIHsKICAgICAgICB0aGlzLnRvYXN0TWVzc2FnZSA9ICJQbGVhc2Ugc2VsZWN0IGNhdGVnb3J5IGZvciB0ZW1wbGF0ZSBjcmVhdGlvbi4iOwogICAgICAgIHRoaXMudG9hc3RUeXBlID0gIndhcm5pbmciOwogICAgICAgIHRoaXMudG9hc3RGbGFnKys7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAodGhpcy50ZW1wbGF0ZU5hbWUgPT09ICIiKSB7CiAgICAgICAgdGhpcy50b2FzdE1lc3NhZ2UgPSAiS2luZGx5IGVudGVyIFRlbXBsYXRlIE5hbWUuIjsKICAgICAgICB0aGlzLnRvYXN0VHlwZSA9ICJ3YXJuaW5nIjsKICAgICAgICB0aGlzLmxvYWRlckZsYWcgPSBmYWxzZTsKICAgICAgICB0aGlzLnRvYXN0RmxhZysrOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdGhpcy5jcmVhdGVEb3dubG9hZFRlbXBsYXRlKCk7CiAgICAgIHRoaXMubG9hZGVyRmxhZyA9IHRydWU7CiAgICAgIGxldCByZXF1ZXN0ID0gewogICAgICAgIGNhdGVnb3J5VVVJRDogdGhpcy5nZXRDYXRlZ29yaWVzVVVJRCgpLAogICAgICAgIGNhdGVnb3J5TmFtZTogdGhpcy5nZXRDYXRlZ29yaWVzTmFtZSgpLAogICAgICAgIHVzZXJVVUlEOiB0aGlzLmN1cnJlbnRVc2VyRGV0YWlscy5wcm9maWxlLnVzZXJpZCwKICAgICAgICB1c2VyTmFtZTogdGhpcy5jdXJyZW50VXNlckRldGFpbHMucHJvZmlsZS5maXJzdE5hbWUgKyAiICIgKyB0aGlzLmN1cnJlbnRVc2VyRGV0YWlscy5wcm9maWxlLmxhc3ROYW1lLAogICAgICAgIHRlbmFudFVVSUQ6IHRoaXMuY3VycmVudFVzZXJEZXRhaWxzLnByb2ZpbGUub3JnYW5pemF0aW9uSWQsCiAgICAgICAgY3N2Q29sdW1uRGF0YTogSlNPTi5zdHJpbmdpZnkodGhpcy5saXN0cyksCiAgICAgICAgdGVtcGxhdGVOYW1lOiB0aGlzLnRlbXBsYXRlTmFtZQogICAgICB9OwogICAgICBBc3NldE1hbmFnZW1lbnRTZXJ2aWNlLmFkZEltcG9ydFRlbXBsYXRlKHJlcXVlc3QpLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCAmJiByZXNwb25zZS5kYXRhLnJlc3BvbnNlSWRlbnRpZmllciA9PT0gIlN1Y2Nlc3MiKSB7CiAgICAgICAgICBsZXQgZG93bmxvYWQgPSB7CiAgICAgICAgICAgIGNvbHVtbnNEYXRhOiB0aGlzLmRvd25sb2FkVGVtcGxhdGUsCiAgICAgICAgICAgIHRlbXBsYXRlTmFtZTogdGhpcy50ZW1wbGF0ZU5hbWUKICAgICAgICAgIH07CiAgICAgICAgICB0aGlzLnRvYXN0TWVzc2FnZSA9ICJUZW1wbGF0ZSBBZGQgU3VjY2Vzc2Z1bGx5LiI7CiAgICAgICAgICB0aGlzLnRvYXN0VHlwZSA9ICJzdWNjZXNzIjsKICAgICAgICAgIHRoaXMudG9hc3RGbGFnKys7CiAgICAgICAgICB0aGlzLmRvd25sb2FkQXNzZXRUZW1wbGF0ZShkb3dubG9hZCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMudG9hc3RNZXNzYWdlID0gIkFuIFVuZXhwZWN0ZWQgRXJyb3Igb2NjdXJyZWQgd2hpbGUgZ2V0dGluZyBpbXBvcnQgdGVtcGxhdGVzLiI7CiAgICAgICAgICB0aGlzLnRvYXN0VHlwZSA9ICJlcnJvciI7CiAgICAgICAgICB0aGlzLmxvYWRlckZsYWcgPSBmYWxzZTsKICAgICAgICAgIHRoaXMudG9hc3RGbGFnKys7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhpcy50b2FzdE1lc3NhZ2UgPSAiQW4gVW5leHBlY3RlZCBFcnJvciBvY2N1cnJlZCB3aGlsZSBnZXR0aW5nIGltcG9ydCB0ZW1wbGF0ZXMuIjsKICAgICAgICB0aGlzLnRvYXN0VHlwZSA9ICJlcnJvciI7CiAgICAgICAgdGhpcy5sb2FkZXJGbGFnID0gZmFsc2U7CiAgICAgICAgdGhpcy50b2FzdEZsYWcrKzsKICAgICAgfSk7CiAgICB9LAoKICAgIGRvd25sb2FkQXNzZXRUZW1wbGF0ZShkb3dubG9hZFJlcXVlc3QpIHsKICAgICAgQXNzZXRNYW5hZ2VtZW50U2VydmljZS5kb3dubG9hZEFzc2V0SW1wb3J0VGVtcGxhdGUoZG93bmxvYWRSZXF1ZXN0KS50aGVuKHJlcyA9PiB7CiAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCAmJiByZXMuZGF0YS5yZXNwb25zZUlkZW50aWZpZXIgPT09ICJTdWNjZXNzIikgewogICAgICAgICAgdGhpcy5sb2FkZXJGbGFnID0gZmFsc2U7CiAgICAgICAgICB2YXIgc2FtcGxlQXJyYXkgPSB0aGlzLmJhc2U2NFRvQXJyYXlCdWZmZXIocmVzLmRhdGEuY29udGVudCk7CiAgICAgICAgICBsZXQgZmlsZVVybCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFtzYW1wbGVBcnJheV0sIHsKICAgICAgICAgICAgdHlwZTogInRleHQvY3N2O2NoYXJzZXQ9dXRmLTg7IgogICAgICAgICAgfSkpOwogICAgICAgICAgdmFyIGZpbGVMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpOwogICAgICAgICAgZmlsZUxpbmsuaHJlZiA9IGZpbGVVcmw7CiAgICAgICAgICBmaWxlTGluay5zZXRBdHRyaWJ1dGUoImRvd25sb2FkIiwgcmVzLmRhdGEuZmlsZU5hbWUpOwogICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmaWxlTGluayk7CiAgICAgICAgICBmaWxlTGluay5jbGljaygpOwogICAgICAgICAgdGhpcy5jbG9zZSgpOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRoaXMudG9hc3RNZXNzYWdlID0gIkFuIFVuZXhwZWN0ZWQgRXJyb3Igb2NjdXJyZWQgd2hpbGUgZG93bmxvYWRpbmcgaW1wb3J0IHRlbXBsYXRlcy4iOwogICAgICAgIHRoaXMudG9hc3RUeXBlID0gImVycm9yIjsKICAgICAgICB0aGlzLmxvYWRlckZsYWcgPSBmYWxzZTsKICAgICAgICB0aGlzLnRvYXN0RmxhZysrOwogICAgICB9KTsKICAgIH0sCgogICAgYmFzZTY0VG9BcnJheUJ1ZmZlcihiYXNlNjQpIHsKICAgICAgdmFyIGJpbmFyeVN0cmluZyA9IHdpbmRvdy5hdG9iKGJhc2U2NCk7CiAgICAgIHZhciBiaW5hcnlMZW4gPSBiaW5hcnlTdHJpbmcubGVuZ3RoOwogICAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShiaW5hcnlMZW4pOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiaW5hcnlMZW47IGkrKykgewogICAgICAgIHZhciBhc2NpaSA9IGJpbmFyeVN0cmluZy5jaGFyQ29kZUF0KGkpOwogICAgICAgIGJ5dGVzW2ldID0gYXNjaWk7CiAgICAgIH0KCiAgICAgIHJldHVybiBieXRlczsKICAgIH0sCgogICAgZ2V0Q2F0ZWdvcmllc1VVSUQoKSB7CiAgICAgIGxldCB1dWlkcyA9ICIiOwogICAgICBsZXQgaSA9IDA7CiAgICAgIHRoaXMuY2F0ZWdvcmllcy5tYXAoY2F0ZSA9PiB7CiAgICAgICAgdXVpZHMgPSB1dWlkcyArIGNhdGUuY2F0ZWdvcnlVVUlEICsgKHRoaXMuY2F0ZWdvcmllc1tpICsgMV0gIT09IHVuZGVmaW5lZCA/ICIsIiA6ICIiKTsKICAgICAgICBpICs9IDE7CiAgICAgIH0pOwogICAgICByZXR1cm4gdXVpZHM7CiAgICB9LAoKICAgIGdldENhdGVnb3JpZXNOYW1lKCkgewogICAgICBsZXQgbmFtZXMgPSAiIjsKICAgICAgbGV0IGkgPSAwOwogICAgICB0aGlzLmNhdGVnb3JpZXMubWFwKGNhdGUgPT4gewogICAgICAgIG5hbWVzID0gbmFtZXMgKyBjYXRlLmNhdGVnb3J5TmFtZSArICh0aGlzLmNhdGVnb3JpZXNbaSArIDFdICE9PSB1bmRlZmluZWQgPyAiLCIgOiAiIik7CiAgICAgICAgaSArPSAxOwogICAgICB9KTsKICAgICAgcmV0dXJuIG5hbWVzOwogICAgfSwKCiAgICBjcmVhdGVEb3dubG9hZFRlbXBsYXRlKCkgewogICAgICB0aGlzLmRvd25sb2FkVGVtcGxhdGUgPSAiIjsKICAgICAgbGV0IGkgPSAwOwogICAgICB0aGlzLmxpc3RzLm1hcChsaXN0ID0+IHsKICAgICAgICB0aGlzLmRvd25sb2FkVGVtcGxhdGUgPSB0aGlzLmRvd25sb2FkVGVtcGxhdGUgKyBsaXN0Lm5hbWUgKyAodGhpcy5saXN0c1tpICsgMV0gIT09IHVuZGVmaW5lZCA/ICIsIiA6ICIiKTsKICAgICAgICBpICs9IDE7CiAgICAgIH0pOwogICAgfSwKCiAgICBjbG9zZSgpIHsKICAgICAgdGhpcy4kZW1pdCgiY2xvc2UiKTsKICAgIH0sCgogICAgZ2V0QXNzZXRJbXBvcnRUZW1wbGF0ZXMoKSB7CiAgICAgIEFzc2V0TWFuYWdlbWVudFNlcnZpY2UuZ2V0SW1wb3J0VGVtcGxhdGVMaXN0QnlVc2VyVVVJREFuZFRlbmFudFVVSUQodGhpcy5jdXJyZW50VXNlckRldGFpbHMucHJvZmlsZS51c2VyaWQsIHRoaXMuY3VycmVudFVzZXJEZXRhaWxzLnByb2ZpbGUub3JnYW5pemF0aW9uSWQpLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCAmJiByZXNwb25zZS5kYXRhLnJlc3BvbnNlSWRlbnRpZmllciA9PT0gIlN1Y2Nlc3MiKSB7CiAgICAgICAgICB0aGlzLnRlbXBsYXRlcyA9IHJlc3BvbnNlLmRhdGEuaW1wb3J0VGVtcGxhdGVzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLnRvYXN0TWVzc2FnZSA9ICJBbiBVbmV4cGVjdGVkIEVycm9yIG9jY3VycmVkIHdoaWxlIGdldHRpbmcgY2F0ZWdvcmllcy4iOwogICAgICAgICAgdGhpcy50b2FzdFR5cGUgPSAiZXJyb3IiOwogICAgICAgICAgdGhpcy5sb2FkZXJGbGFnID0gZmFsc2U7CiAgICAgICAgICB0aGlzLnRvYXN0RmxhZysrOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIHRoaXMudG9hc3RNZXNzYWdlID0gIkFuIFVuZXhwZWN0ZWQgRXJyb3Igb2NjdXJyZWQgd2hpbGUgZ2V0dGluZyBpbXBvcnQgdGVtcGxhdGVzLiI7CiAgICAgICAgdGhpcy50b2FzdFR5cGUgPSAiZXJyb3IiOwogICAgICAgIHRoaXMubG9hZGVyRmxhZyA9IGZhbHNlOwogICAgICAgIHRoaXMudG9hc3RGbGFnKys7CiAgICAgIH0pOwogICAgfQoKICB9LAoKICBjcmVhdGVkKCkgewogICAgaWYgKHRoaXMubGlzdHMpIHsKICAgICAgaWYgKHRoaXMuY2F0ZWdvcmllcykgewogICAgICAgIHRoaXMuY2F0ZWdvcmllcy5tYXAoY2F0ZSA9PiB7CiAgICAgICAgICBpZiAoY2F0ZS5maWVsZHMpIHsKICAgICAgICAgICAgY2F0ZS5maWVsZHMubWFwKGYgPT4gewogICAgICAgICAgICAgIGxldCBleGlzdHMgPSB0aGlzLmxpc3RzLmZpbHRlcihsID0+IGwubmFtZSA9PT0gZi5sYWJlbCk7CgogICAgICAgICAgICAgIGlmIChleGlzdHMgPT09IHVuZGVmaW5lZCB8fCBleGlzdHMubGVuZ3RoIDw9IDApIHsKICAgICAgICAgICAgICAgIHRoaXMubGlzdHMucHVzaCh7CiAgICAgICAgICAgICAgICAgIG5hbWU6IGYubGFiZWwsCiAgICAgICAgICAgICAgICAgIGNoZWNrOiBmLm1hbmRhdG9yeSwKICAgICAgICAgICAgICAgICAgZGlzYWJsZTogZi5tYW5kYXRvcnkKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHZhciBrYW5iYW5Cb2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIltjbGFzcz0nbGlzdC1ncm91cCddIik7CgogICAgICB0cnkgewogICAgICAgIFNvcnRhYmxlLm1vdW50KG5ldyBTd2FwKCkpOwogICAgICB9IGNhdGNoIChlKSB7fQoKICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBrYW5iYW5Cb2FyZC5sZW5ndGg7IGorKykgewogICAgICAgIFNvcnRhYmxlLmNyZWF0ZShrYW5iYW5Cb2FyZFtqXSwgewogICAgICAgICAgZ3JvdXA6ICJsaXN0LWdyb3VwIiwKICAgICAgICAgIHN3YXA6IGZhbHNlLAogICAgICAgICAgc3dhcENsYXNzOiAiaGlnaGxpZ2h0ZWQiLAogICAgICAgICAgYW5pbWF0aW9uOiAxMDAKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgdGhpcy5iYWNrVXBMaXN0cyA9IHRoaXMubGlzdHM7CiAgICB9CgogICAgaWYgKHRoaXMudmlld1RlbXBsYXRlKSB7CiAgICAgIHRoaXMudmlldyA9IGZhbHNlOwogICAgICB0aGlzLnNhdmVEaXNhYmxlID0gdHJ1ZTsKICAgICAgdGhpcy50ZW1wbGF0ZU5hbWUgPSB0aGlzLnRlbXBsYXRlRGF0YS50ZW1wbGF0ZU5hbWU7CiAgICAgIHRoaXMubGlzdHMgPSBKU09OLnBhcnNlKHRoaXMudGVtcGxhdGVEYXRhLmNzdkNvbHVtbkRhdGEpOwogICAgfQoKICAgIHRoaXMuY3VycmVudFVzZXJEZXRhaWxzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgiY3VycmVudFVzZXJEZXRhaWxzIikpOwogICAgdGhpcy5nZXRBc3NldEltcG9ydFRlbXBsYXRlcygpOwogIH0sCgogIHZhbGlkYXRpb25zOiBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gewogICAgICB0ZW1wbGF0ZU5hbWU6IHsKICAgICAgICByZXF1aXJlZAogICAgICB9CiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHt9Cn07"},null]}