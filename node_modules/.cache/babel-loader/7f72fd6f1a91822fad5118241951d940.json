{"remainingRequest":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/babel-loader/lib/index.js!/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/src/views/settings/Profile.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/src/views/settings/Profile.vue","mtime":1661968702444},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/babel.config.js","mtime":1661968702388},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/cache-loader/dist/cjs.js","mtime":1662622637759},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/babel-loader/lib/index.js","mtime":1662622637719},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/cache-loader/dist/cjs.js","mtime":1662622637759},{"path":"/home/alsharqi/Desktop/Deploy Fe-ui/fe-erohal-ui/node_modules/vue-loader/lib/index.js","mtime":1662622639723}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1leGNlcHRpb24uc3RhY2suanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5hdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNldC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzbmV4dC50eXBlZC1hcnJheS5maW5kLWxhc3QuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lc25leHQudHlwZWQtYXJyYXkuZmluZC1sYXN0LWluZGV4LmpzIjsKaW1wb3J0IHsgQXV0aFNlcnZpY2UgfSBmcm9tICIuLi8uLi9zZXJ2aWNlcy9BdXRoU2VydmljZSI7CmltcG9ydCB7IEFzc2V0UGVyc29ubmVsU2VydmljZSB9IGZyb20gIi4uLy4uL3NlcnZpY2VzL0Fzc2V0UGVyc29ubmVsU2VydmljZSI7CmltcG9ydCBjb3VudHJpZXNCeUN1cnJlbmN5IGZyb20gIi4uLy4uL3NoYXJlZC9Db3VudHJpZXNCeUN1cnJlbmN5IjsKaW1wb3J0IHsgRnVuY3Rpb25zIH0gZnJvbSAiQC9zaGFyZWQvRnVuY3Rpb25zIjsKaW1wb3J0IHsgcmVxdWlyZWQsIGVtYWlsIH0gZnJvbSAidnVlbGlkYXRlL2xpYi92YWxpZGF0b3JzIjsKaW1wb3J0IGxvYWRlciBmcm9tICJAL2NvbXBvbmVudHMvTG9hZGVyLnZ1ZSI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiUHJvZmlsZSIsCgogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB1cGRhdGVDb21wOiAwLAogICAgICBsb2FkZXJGbGFnOiBmYWxzZSwKICAgICAgdG9hc3RGbGFnOiAwLAogICAgICB0b2FzdE1lc3NhZ2U6ICIiLAogICAgICB0b2FzdFR5cGU6ICIiLAogICAgICBpc0FkbWluOiBmYWxzZSwKICAgICAgaWQ6ICIiLAogICAgICB2YWx1ZWU6ICIiLAogICAgICBmaWxlTmFtZTogIiIsCiAgICAgIGZzdE5hbWU6ICIiLAogICAgICBsc3ROYW1lOiAiIiwKICAgICAgZGVzaWduYXRpb246ICIiLAogICAgICBjbXBueU5hbWU6ICIiLAogICAgICBtYWlsQWRkcjogIiIsCiAgICAgIGNudE51bTogIiIsCiAgICAgIG9sZFBhc3N3b3JkOiAiIiwKICAgICAgcGFzc3dvcmQ6ICIiLAogICAgICBuZXdQYXNzd29yZDogIiIsCiAgICAgIG90aGVyUGFzc3dvcmQ6ICIiLAogICAgICBvdGhlck5ld1Bhc3N3b3JkOiAiIiwKICAgICAgcHJvZmlsZUltYWdlOiAiZGF0YTppbWFnZS9naWY7YmFzZTY0LFIwbEdPRGxoQVFBQkFJQUFBQUFBQVAvLy95SDVCQUVBQUFBQUxBQUFBQUFCQUFFQUFBSUJSQUE3IiwKICAgICAgbm90aWZ5T3B0aW9uczogW3sKICAgICAgICBuYW1lOiAiTm9uZSIsCiAgICAgICAgdmFsdWU6IDMKICAgICAgfSwgewogICAgICAgIG5hbWU6ICJFbWFpbCIsCiAgICAgICAgdmFsdWU6IDIKICAgICAgfSwgewogICAgICAgIG5hbWU6ICJJbi1BcHAgTm90aWZpY2F0aW9uIiwKICAgICAgICB2YWx1ZTogMQogICAgICB9LCB7CiAgICAgICAgbmFtZTogIkVtYWlsICYgSW4tQXBwIE5vdGlmaWNhdGlvbiIsCiAgICAgICAgdmFsdWU6ICIwIgogICAgICB9XSwKICAgICAgcHJlZmVyZW5jZXM6IHsKICAgICAgICBhc3NldEFzc2lnbm1lbnQ6IDMsCiAgICAgICAgYXNzZXRVbmFzc2lnbm1lbnQ6IDMsCiAgICAgICAgaW5zcGVjdGlvblJlbWluZGVyOiAzLAogICAgICAgIGZhdWx0eUluc3BlY3Rpb25DcmVhdGVkOiAzLAogICAgICAgIGluc3BlY3RvbkNyZWF0ZWQ6IDMsCiAgICAgICAgaXNzdWVVcGRhdGVkOiAzLAogICAgICAgIGlzc3VlQ3JlYXRlZDogMywKICAgICAgICBtZXNzYWdlczogMywKICAgICAgICB3b3JrT3JkZXJDcmVhdGVkOiAzLAogICAgICAgIHdvcmtPcmRlclVwZGF0ZWQ6IDMKICAgICAgfSwKICAgICAgbm90aWZpY2F0aW9uVmFsdWU6IHt9LAogICAgICB1c3JPYmo6IHt9LAogICAgICAvLyBUbyBzdG9yZSBhbmQgc2VuZCB1c2VyJ3MgZGF0YSB0byBiYWNrZW5kCiAgICAgIHBlcnNvbmFsSW5mbzoge30sCiAgICAgIGN1cnJlbnRVc2VyRGV0YWlsczogIiIsCiAgICAgIHVzZXJzT3B0aW9uczogW10sCiAgICAgIHNlbGVjdGVkVXNlcjogIiIsCiAgICAgIHVzZXJTZWxlY3RlZDogIiIsCiAgICAgIGNvbXBhbnlJbmZvOiB7fSwKICAgICAgY3VycmVuY3lPcHRpb246IFtdLAogICAgICBjdXJyZW5jeTogIiIKICAgIH07CiAgfSwKCiAgY29tcG9uZW50czogewogICAgbG9hZGVyCiAgfSwKICBtZXRob2RzOiB7CiAgICBjbGVhclNlbGVjdGVkQ3VycmVuY3koKSB7CiAgICAgIHRoaXMuY3VycmVuY3kgPSBudWxsOwogICAgICB0aGlzLnVwZGF0ZUNvbXArKzsKICAgIH0sCgogICAgcGVyc29uYWxJbmZvQWNjb3JkaW9uQ2xpY2soKSB7CiAgICAgIGlmICh0aGlzLiRyZWZzLnBlcnNvbmFsSW5mb0FjY29yZGlvbi5vcGVuRmxhZykgewogICAgICAgIHRoaXMuJHJlZnMuc2VjdXJpdHlJbmZvQWNjb3JkaW9uLm9wZW5GbGFnID0gZmFsc2U7CiAgICAgICAgdGhpcy4kcmVmcy5ub3RpZmljYXRpb25JbmZvQWNjb3JkaW9uLm9wZW5GbGFnID0gZmFsc2U7CiAgICAgICAgdGhpcy4kcmVmcy5wcmVmZXJlbmNlSW5mb0FjY29yZGlvbi5vcGVuRmxhZyA9IGZhbHNlOwogICAgICB9CiAgICB9LAoKICAgIHNlY3VyaXR5QWNjb3JkaW9uQ2xpY2soKSB7CiAgICAgIGlmICh0aGlzLiRyZWZzLnNlY3VyaXR5SW5mb0FjY29yZGlvbi5vcGVuRmxhZykgewogICAgICAgIHRoaXMuJHJlZnMucGVyc29uYWxJbmZvQWNjb3JkaW9uLm9wZW5GbGFnID0gZmFsc2U7CiAgICAgICAgdGhpcy4kcmVmcy5ub3RpZmljYXRpb25JbmZvQWNjb3JkaW9uLm9wZW5GbGFnID0gZmFsc2U7CiAgICAgICAgdGhpcy4kcmVmcy5wcmVmZXJlbmNlSW5mb0FjY29yZGlvbi5vcGVuRmxhZyA9IGZhbHNlOwogICAgICB9CiAgICB9LAoKICAgIG5vdGlmaWNhdGlvbkFjY29yZGlvbkNsaWNrKCkgewogICAgICBpZiAodGhpcy4kcmVmcy5ub3RpZmljYXRpb25JbmZvQWNjb3JkaW9uLm9wZW5GbGFnKSB7CiAgICAgICAgdGhpcy4kcmVmcy5wZXJzb25hbEluZm9BY2NvcmRpb24ub3BlbkZsYWcgPSBmYWxzZTsKICAgICAgICB0aGlzLiRyZWZzLnNlY3VyaXR5SW5mb0FjY29yZGlvbi5vcGVuRmxhZyA9IGZhbHNlOwogICAgICAgIHRoaXMuJHJlZnMucHJlZmVyZW5jZUluZm9BY2NvcmRpb24ub3BlbkZsYWcgPSBmYWxzZTsKICAgICAgfQogICAgfSwKCiAgICBwcmVmZXJlbmNlSW5mb0FjY29yZGlvbkNsaWNrKCkgewogICAgICBpZiAodGhpcy4kcmVmcy5wcmVmZXJlbmNlSW5mb0FjY29yZGlvbi5vcGVuRmxhZykgewogICAgICAgIHRoaXMuJHJlZnMucGVyc29uYWxJbmZvQWNjb3JkaW9uLm9wZW5GbGFnID0gZmFsc2U7CiAgICAgICAgdGhpcy4kcmVmcy5zZWN1cml0eUluZm9BY2NvcmRpb24ub3BlbkZsYWcgPSBmYWxzZTsKICAgICAgICB0aGlzLiRyZWZzLm5vdGlmaWNhdGlvbkluZm9BY2NvcmRpb24ub3BlbkZsYWcgPSBmYWxzZTsKICAgICAgfQogICAgfSwKCiAgICBjbGljaygpIHsKICAgICAgbGV0IHggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZmlsZVVwbG9hZCIpOwogICAgICB4LmNsaWNrKCk7CiAgICB9LAoKICAgIHNldE5vdGlmaWNhdGlvbnModXNyT2JqKSB7CiAgICAgIHRoaXMubm90aWZpY2F0aW9uVmFsdWUgPSB1c3JPYmoucHJvZmlsZS51c2VyTm90aWZpY2F0aW9uOwogICAgfSwKCiAgICBnZXRGb3JtRXJyb3JNZXNzYWdlKGZpZWxkVmFsaWRhdGlvbikgewogICAgICBpZiAoZmllbGRWYWxpZGF0aW9uLiRkaXJ0eSkgewogICAgICAgIHJldHVybiBGdW5jdGlvbnMuZ2V0Rm9ybUZpZWxkRXJyb3JNZXNzYWdlKGZpZWxkVmFsaWRhdGlvbik7CiAgICAgIH0KICAgIH0sCgogICAgZ2V0RGF0YSgpIHsKICAgICAgQXNzZXRQZXJzb25uZWxTZXJ2aWNlLmdldFVzZXIodGhpcy5jdXJyZW50VXNlckRldGFpbHMucHJvZmlsZS51c2VyaWQpLnRoZW4ocmVzID0+IHsKICAgICAgICBpZiAocmVzICE9PSB1bmRlZmluZWQgJiYgcmVzLmRhdGEudXNlclJlc3BvbnNlKSB7CiAgICAgICAgICB0aGlzLnVzck9iaiA9IHJlcy5kYXRhLnVzZXJSZXNwb25zZTsKICAgICAgICAgIEF1dGhTZXJ2aWNlLmdldFJvbGVzQnlVc2VyTmFtZUFuZE9yZ2FuaXphdGlvbklkKHRoaXMudXNyT2JqLmVtYWlsLCB0aGlzLnVzck9iai5vcmdhbml6YXRpb25VVUlEKS50aGVuKHJlcyA9PiB7CiAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgICAgICB0aGlzLnVzck9iai5yb2xlcyA9IHJlcy5kYXRhOwogICAgICAgICAgICAgIHRoaXMudXNyT2JqLnJvbGVzTGFiZWwgPSByZXMuZGF0YTsKICAgICAgICAgICAgfQogICAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7CiAgICAgICAgICB9KTsKICAgICAgICAgIEFzc2V0UGVyc29ubmVsU2VydmljZS5nZXRDb21wYW55KHRoaXMuY3VycmVudFVzZXJEZXRhaWxzLnByb2ZpbGUub3JnYW5pemF0aW9uSWQpLnRoZW4ocmVzMSA9PiB7CiAgICAgICAgICAgIHRoaXMuY29tcGFueUluZm8gPSByZXMxLmRhdGEuY29tcGFueVJlc3BvbnNlOwogICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHsKICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZXJyID0+IHsKICAgICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgICB9KTsKICAgIH0sCgogICAgb25Vc2VyU2VsZWN0KG9iaikgewogICAgICB0aGlzLnVzZXJTZWxlY3RlZCA9IG9iai5zZWxlY3RlZE9iamVjdC51c2VybmFtZTsKICAgIH0sCgogICAgZmV0Y2hPcmdhbml6YXRpb25Vc2VycygpIHsKICAgICAgQXV0aFNlcnZpY2UuZ2V0T3JnYW5pemF0aW9uVXNlcnModGhpcy5jdXJyZW50VXNlckRldGFpbHMucHJvZmlsZS5vcmdhbml6YXRpb25JZCkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgaWYgKHJlc3BvbnNlICE9PSB1bmRlZmluZWQgJiYgcmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgIGxldCBmZXRjaGVkVXNlcnMgPSBbXTsKICAgICAgICAgIHJlc3BvbnNlLmRhdGEuZm9yRWFjaCgodXNlciwgaW5kZXgpID0+IHsKICAgICAgICAgICAgZmV0Y2hlZFVzZXJzLnB1c2goewogICAgICAgICAgICAgIGlkOiBpbmRleCwKICAgICAgICAgICAgICBsYWJlbDogdXNlci5maXJzdE5hbWUgKyAiICIgKyB1c2VyLmxhc3ROYW1lICsgIiAtICIgKyB1c2VyLnVzZXJuYW1lLAogICAgICAgICAgICAgIHZhbHVlOiB1c2VyLmZpcnN0TmFtZSArICIgIiArIHVzZXIubGFzdE5hbWUsCiAgICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXIudXNlcm5hbWUKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICAgIHRoaXMudXNlcnNPcHRpb25zID0gZmV0Y2hlZFVzZXJzOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTsKICAgICAgfSk7CiAgICB9LAoKICAgIHNldE5vdGlmaVZhbHVlKCRldmVudCwgdmFsKSB7CiAgICAgIHRoaXMucHJlZmVyZW5jZXNbdmFsXSA9ICRldmVudC5zZWxlY3RlZE9iamVjdC52YWx1ZTsKICAgIH0sCgogICAgbm90aWZpY2F0aW9uUHJlc2V0KHZhbCkgewogICAgICBpZiAodGhpcy5wcmVmZXJlbmNlc1t2YWxdID09PSAzKSB7CiAgICAgICAgcmV0dXJuICJOb25lIjsKICAgICAgfQoKICAgICAgaWYgKHRoaXMucHJlZmVyZW5jZXNbdmFsXSA9PT0gMikgewogICAgICAgIHJldHVybiAiRW1haWwiOwogICAgICB9CgogICAgICBpZiAodGhpcy5wcmVmZXJlbmNlc1t2YWxdID09PSAxKSB7CiAgICAgICAgcmV0dXJuICJJbi1BcHAgTm90aWZpY2F0aW9uIjsKICAgICAgfQoKICAgICAgaWYgKHRoaXMucHJlZmVyZW5jZXNbdmFsXSA9PT0gIjAiKSB7CiAgICAgICAgcmV0dXJuICJFbWFpbCAmIEluLUFwcCBOb3RpZmljYXRpb24iOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiAiTm9uZSI7CiAgICAgIH0KICAgIH0sCgogICAgZGF0YVVSTHRvQmxvYihkYXRhdXJsKSB7CiAgICAgIHZhciBhcnIgPSBkYXRhdXJsLnNwbGl0KCIsIiksCiAgICAgICAgICBtaW1lID0gYXJyWzBdLm1hdGNoKC86KC4qPyk7LylbMV0sCiAgICAgICAgICBic3RyID0gYXRvYihhcnJbMV0pLAogICAgICAgICAgbiA9IGJzdHIubGVuZ3RoLAogICAgICAgICAgdThhcnIgPSBuZXcgVWludDhBcnJheShuKTsKCiAgICAgIHdoaWxlIChuLS0pIHsKICAgICAgICB1OGFycltuXSA9IGJzdHIuY2hhckNvZGVBdChuKTsKICAgICAgfQoKICAgICAgcmV0dXJuIG5ldyBCbG9iKFt1OGFycl0sIHsKICAgICAgICB0eXBlOiBtaW1lCiAgICAgIH0pOwogICAgfSwKCiAgICBnZXRGaWxlKGUpIHsKICAgICAgdGhpcy5maWxlTmFtZSA9IGUudGFyZ2V0LmZpbGVzWzBdLm5hbWU7CgogICAgICBpZiAod2luZG93LkZpbGUgJiYgd2luZG93LkZpbGVSZWFkZXIgJiYgd2luZG93LkZpbGVMaXN0ICYmIHdpbmRvdy5CbG9iKSB7CiAgICAgICAgaWYgKHRoaXMuZmlsZU5hbWUgIT0gbnVsbCkgewogICAgICAgICAgaWYgKGUudGFyZ2V0LmZpbGVzLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgLy8gaWYgbXVsdGlwbGUgZmlsZXMgYXJlIHVwbG9hZGVkCiAgICAgICAgICAgIHRoaXMuc2hvd1RvYXN0KCJQbGVhc2UgVXBsb2FkIGEgc2luZ2xlIGZpbGUgYXQgYSB0aW1lLiIsICJlcnJvciIpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy9pbiBjYXNlIG9mIHNpbmdsZSBmaWxlCiAgICAgICAgICAgIHZhciBzaXplID0gTnVtYmVyKGUudGFyZ2V0LmZpbGVzWzBdLnNpemUgLyBNYXRoLnBvdygxMDI0LCAyKSk7CgogICAgICAgICAgICBpZiAoc2l6ZSA+IDQpIHsKICAgICAgICAgICAgICB0aGlzLnNob3dUb2FzdCgiVGhlIEZpbGUgc2l6ZSBsaW1pdCBleGNlZWRlZC4gUGxlYXNlIHVwbG9hZCBhIHBpY3R1cmUgbGVzcyB0aGFuIDQgTUJzIiwgImVycm9yIik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgICAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZS50YXJnZXQuZmlsZXNbMF0pOwoKICAgICAgICAgICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInByb2ZpbGVJbWFnZSIpLnNyYyA9IHJlYWRlci5yZXN1bHQ7CiAgICAgICAgICAgICAgICB0aGlzLnByb2ZpbGVJbWFnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwcm9maWxlSW1hZ2UiKS5zcmM7CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLmVycm9yRmxhZyA9IHRydWU7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuc2hvd1RvYXN0KCJUaGUgRmlsZSBBUElzIGFyZSBub3QgZnVsbHkgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3Nlci4iLCAiZXJyb3IiKTsKICAgICAgfQogICAgfSwKCiAgICBlZGl0Tm90aWZpY2F0aW9ucygpIHsKICAgICAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKHRoaXMucHJlZmVyZW5jZXMpKSB7CiAgICAgICAgaWYgKHRoaXMucHJlZmVyZW5jZXNba2V5XSA9PT0gIjAiKSB7CiAgICAgICAgICB0aGlzLnByZWZlcmVuY2VzW2tleV0gPSBwYXJzZUludCh0aGlzLnByZWZlcmVuY2VzW2tleV0pOwogICAgICAgIH0KICAgICAgfQoKICAgICAgbGV0IG5vdGlmaWNhdGlvbiA9IHsKICAgICAgICBwcmVmZXJlbmNlczogdGhpcy5wcmVmZXJlbmNlcywKICAgICAgICB1c2VyVVVJRDogdGhpcy5jdXJyZW50VXNlckRldGFpbHMucHJvZmlsZS51c2VyaWQKICAgICAgfTsKICAgICAgQXNzZXRQZXJzb25uZWxTZXJ2aWNlLnVwZGF0ZVByZWZlcmVuY2VzTm90aWZjYXRpb24obm90aWZpY2F0aW9uKS50aGVuKHJlcyA9PiB7CiAgICAgICAgaWYgKHJlcy5kYXRhLnJlc3BvbnNlQ29kZSA9PT0gIkYyMDAiKSB7CiAgICAgICAgICB0aGlzLnNob3dUb2FzdCgiUGVyc29uYWwgTm90aWZpY2F0aW9uIFVwZGF0ZWQgU3VjY2Vzc2Z1bGx5IiwgInN1Y2Nlc3MiKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5zaG93VG9hc3QoIlBlcnNvbmFsIE5vdGlmaWNhdGlvbiBOb3QgVXBkYXRlZCBTdWNjZXNzZnVsbHkiLCAiZXJyb3IiKTsKICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGVyciA9PiB7CiAgICAgICAgY29uc29sZS5sb2coZXJyKTsKICAgICAgICB0aGlzLnNob3dUb2FzdCgiUGVyc29uYWwgTm90aWZpY2F0aW9uIFNlcnZpY2UgRXJyb3IiLCAiZXJyb3IiKTsKICAgICAgfSk7CiAgICB9LAoKICAgIGVkaXRQYXNzd29yZCgpIHsKICAgICAgaWYgKHRoaXMub2xkUGFzc3dvcmQgPT09ICIiKSB7CiAgICAgICAgdGhpcy5zaG93VG9hc3QoIk9sZCBQYXNzd29yZCBmaWVsZCBpcyBlbXB0eSIsICJlcnJvciIpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgaWYgKHRoaXMucGFzc3dvcmQgPT09ICIiIHx8IHRoaXMubmV3UGFzc3dvcmQgPT09ICIiKSB7CiAgICAgICAgdGhpcy5zaG93VG9hc3QoIlBhc3N3b3JkIGZpZWxkIGlzIGVtcHR5IiwgImVycm9yIik7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAodGhpcy5wYXNzd29yZCA9PT0gdGhpcy5uZXdQYXNzd29yZCkgewogICAgICAgIGxldCB1cGRhdGVVc2VyUGFzc3dvcmQgPSB7CiAgICAgICAgICBvbGRQYXNzd29yZDogdGhpcy5vbGRQYXNzd29yZCwKICAgICAgICAgIG5ld1Bhc3N3b3JkOiB0aGlzLnBhc3N3b3JkLAogICAgICAgICAgY29uZmlybVBhc3N3b3JkOiB0aGlzLm5ld1Bhc3N3b3JkCiAgICAgICAgfTsKICAgICAgICBBdXRoU2VydmljZS51cGRhdGVPdGhlclVzZXJzUGFzc3dvcmQodXBkYXRlVXNlclBhc3N3b3JkKS50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgICAgIGlmIChyZXNwb25zZSAhPT0gdW5kZWZpbmVkICYmIHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICAgIHRoaXMuc2hvd1RvYXN0KCJQYXNzd29yZCBVcGRhdGVkIFN1Y2Nlc3NmdWxseS4iLCAic3VjY2VzcyIpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5zaG93VG9hc3QoIlBhc3N3b3JkIENhbm5vdCBCZSBVcGRhdGVkIFN1Y2Nlc3NmdWxseSEiLCAiZXJyb3IiKTsKICAgICAgICAgIH0KICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7CiAgICAgICAgICB0aGlzLnNob3dUb2FzdCgiQ2hhbmdlIHBhc3N3b3JkIHJlcXVlc3QgZmFpbGVkLiBTZXJ2aWNlIGlzIG5vdCB3b3JraW5nIiwgImVycm9yIik7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5zaG93VG9hc3QoIlBhc3N3b3JkIG5vdCBtYXRjaGVkIiwgImVycm9yIik7CiAgICAgIH0KICAgIH0sCgogICAgZWRpdE90aGVyVXNlclBhc3N3b3JkKCkgewogICAgICBpZiAodGhpcy51c2VyU2VsZWN0ZWQgPT09ICIiKSB7CiAgICAgICAgdGhpcy5zaG93VG9hc3QoIk90aGVyIFVzZXIgaXMgbm90IHNlbGVjdGVkIiwgIndhcm5pbmciKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLm90aGVyUGFzc3dvcmQgPT09ICIiIHx8IHRoaXMub3RoZXJOZXdQYXNzd29yZCA9PT0gIiIpIHsKICAgICAgICB0aGlzLnNob3dUb2FzdCgiUGFzc3dvcmQgZmllbGQgaXMgZW1wdHkiLCAid2FybmluZyIpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgaWYgKHRoaXMub3RoZXJQYXNzd29yZCA9PT0gdGhpcy5vdGhlck5ld1Bhc3N3b3JkKSB7CiAgICAgICAgbGV0IHVwZGF0ZVVzZXJQYXNzd29yZCA9IHsKICAgICAgICAgIHVzZXJuYW1lOiB0aGlzLnVzZXJTZWxlY3RlZCwKICAgICAgICAgIG5ld1Bhc3N3b3JkOiB0aGlzLm90aGVyUGFzc3dvcmQsCiAgICAgICAgICBjb25maXJtUGFzc3dvcmQ6IHRoaXMub3RoZXJOZXdQYXNzd29yZAogICAgICAgIH07CiAgICAgICAgQXV0aFNlcnZpY2UudXBkYXRlT3RoZXJVc2Vyc1Bhc3N3b3JkKHVwZGF0ZVVzZXJQYXNzd29yZCkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgICBpZiAocmVzcG9uc2UgIT09IHVuZGVmaW5lZCAmJiByZXNwb25zZS5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgICB0aGlzLnNob3dUb2FzdCgiT3RoZXIgVXNlciBQYXNzd29yZCBVcGRhdGVkIFN1Y2Nlc3NmdWxseS4iLCAic3VjY2VzcyIpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5zaG93VG9hc3QoIk90aGVyIFVzZXIgUGFzc3dvcmQgQ2Fubm90IEJlIFVwZGF0ZWQgU3VjY2Vzc2Z1bGx5ISIsICJlcnJvciIpOwogICAgICAgICAgfQogICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTsKICAgICAgICAgIHRoaXMuc2hvd1RvYXN0KCJPdGhlciBVc2VyIFBhc3N3b3JkIENhbm5vdCBCZSBDaGFuZ2VkIFNlcnZpY2UgaXMgbm90IHdvcmtpbmchIiwgImVycm9yIik7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5zaG93VG9hc3QoIlBhc3N3b3JkIG5vdCBtYXRjaGVkIG9mIG90aGVyIHVzZXIiLCAiZXJyb3IiKTsKICAgICAgfQogICAgfSwKCiAgICBlZGl0Q29tcGFueUluZm8oKSB7CiAgICAgIHRoaXMuJHYuY29tcGFueUluZm8uJHRvdWNoKCk7CgogICAgICBpZiAodGhpcy4kdi5jb21wYW55SW5mby4kaW52YWxpZCkgewogICAgICAgIHJldHVybiB0aGlzLnNob3dUb2FzdCgiUGxlYXNlIGZpbGwgYWxsIHJlcXVpcmVkIGZpZWxkcyIsICJ3YXJuaW5nIik7CiAgICAgIH0KCiAgICAgIHRoaXMubG9hZGVyRmxhZyA9IHRydWU7CiAgICAgIHRoaXMuY29tcGFueUluZm8uY29tcGFueUZpZWxkcyA9IFtdOwogICAgICBBc3NldFBlcnNvbm5lbFNlcnZpY2UudXBkYXRlQ29tcGFueSh7CiAgICAgICAgY29tcGFueTogdGhpcy5jb21wYW55SW5mbwogICAgICB9KS50aGVuKHJlcyA9PiB7CiAgICAgICAgdGhpcy5sb2FkZXJGbGFnID0gZmFsc2U7CgogICAgICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgIHRoaXMuc2hvd1RvYXN0KCJDb21wYW55IEluZm9ybWF0aW9uIFVwZGF0ZWQgU3VjY2Vzc2Z1bGx5IiwgInN1Y2Nlc3MiKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5zaG93VG9hc3QoIkNvbXBhbnkgSW5mb3JtYXRpb24gTm90IFVwZGF0ZWQgU3VjY2Vzc2Z1bGx5IiwgImVycm9yIik7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChlcnIgPT4gewogICAgICAgIGNvbnNvbGUubG9nKGVycik7CiAgICAgICAgdGhpcy5zaG93VG9hc3QoIkNvbXBhbnkgSW5mb3JtYXRpb24gU2F2aW5nIEVycm9yIiwgImVycm9yIik7CiAgICAgICAgdGhpcy5sb2FkZXJGbGFnID0gZmFsc2U7CiAgICAgIH0pOwogICAgfSwKCiAgICBlZGl0UGVyc29uYWxJbmZvKCkgewogICAgICB0aGlzLiR2LnVzck9iai4kdG91Y2goKTsKCiAgICAgIGlmICh0aGlzLiR2LnVzck9iai4kaW52YWxpZCkgewogICAgICAgIHJldHVybiB0aGlzLnNob3dUb2FzdCgiUGxlYXNlIGZpbGwgYWxsIHJlcXVpcmVkIGZpZWxkcyIsICJ3YXJuaW5nIik7CiAgICAgIH0KCiAgICAgIHRoaXMubG9hZGVyRmxhZyA9IHRydWU7CiAgICAgIHRoaXMucGVyc29uYWxJbmZvLmNvbnRhY3ROdW1iZXIgPSB0aGlzLnVzck9iai5jb250YWN0TnVtYmVyOwogICAgICB0aGlzLnBlcnNvbmFsSW5mby5maXJzdE5hbWUgPSB0aGlzLnVzck9iai5maXJzdE5hbWU7CiAgICAgIHRoaXMucGVyc29uYWxJbmZvLmxhc3ROYW1lID0gdGhpcy51c3JPYmoubGFzdE5hbWU7CiAgICAgIHRoaXMucGVyc29uYWxJbmZvLmFkZHJlc3MgPSB0aGlzLnVzck9iai5hZGRyZXNzOwogICAgICB0aGlzLnBlcnNvbmFsSW5mby5jb3VudHJ5ID0gdGhpcy51c3JPYmouY291bnRyeTsKICAgICAgdGhpcy5wZXJzb25hbEluZm8uY2l0eSA9IHRoaXMudXNyT2JqLmNpdHk7CiAgICAgIHRoaXMucGVyc29uYWxJbmZvLmVtYWlsID0gdGhpcy51c3JPYmouZW1haWw7CiAgICAgIHRoaXMucGVyc29uYWxJbmZvLnV1aWQgPSB0aGlzLnVzck9iai51dWlkOwogICAgICB0aGlzLnBlcnNvbmFsSW5mby5yb2xlcyA9IHRoaXMudXNyT2JqLnJvbGVzOwogICAgICB0aGlzLnBlcnNvbmFsSW5mby5yb2xlc0xhYmVsID0gdGhpcy51c3JPYmoucm9sZXNMYWJlbDsKICAgICAgdGhpcy5wZXJzb25hbEluZm8ub3JnYW5pemF0aW9uVVVJRCA9IHRoaXMuY3VycmVudFVzZXJEZXRhaWxzLnByb2ZpbGUub3JnYW5pemF0aW9uSWQ7CiAgICAgIHRoaXMucGVyc29uYWxJbmZvLm5hbWUgPSB0aGlzLnVzck9iai5maXJzdE5hbWUgKyAiICIgKyB0aGlzLnVzck9iai5sYXN0TmFtZTsKICAgICAgdGhpcy5wZXJzb25hbEluZm8uYXNzaWduZWQgPSB0aGlzLnVzck9iai5hc3NpZ25lZDsKICAgICAgdGhpcy5wZXJzb25hbEluZm8uaWQgPSB0aGlzLnVzck9iai5pZDsKICAgICAgdGhpcy5wZXJzb25hbEluZm8ucGVyaXZvdXNFbWFpbCA9IHRoaXMudXNyT2JqLmVtYWlsOwogICAgICBBdXRoU2VydmljZS51cGRhdGVVc2VyKHRoaXMucGVyc29uYWxJbmZvKS50aGVuKHJlcyA9PiB7CiAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgdGhpcy5sb2FkZXJGbGFnID0gZmFsc2U7CiAgICAgICAgICB0aGlzLnNob3dUb2FzdCgiUGVyc29uYWwgSW5mb3JtYXRpb24gVXBkYXRlZCBTdWNjZXNzZnVsbHkiLCAic3VjY2VzcyIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLmxvYWRlckZsYWcgPSBmYWxzZTsKICAgICAgICAgIHRoaXMuc2hvd1RvYXN0KCJQZXJzb25hbCBJbmZvcm1hdGlvbiBOb3QgVXBkYXRlZCBTdWNjZXNzZnVsbHkiLCAiZXJyb3IiKTsKICAgICAgICB9CiAgICAgIH0pLmNhdGNoKGVyciA9PiB7CiAgICAgICAgY29uc29sZS5sb2coZXJyKTsKICAgICAgICB0aGlzLnNob3dUb2FzdCgiUGVyc29uYWwgSW5mb3JtYXRpb24gU2F2aW5nIEVycm9yIiwgImVycm9yIik7CiAgICAgICAgdGhpcy5sb2FkZXJGbGFnID0gZmFsc2U7CiAgICAgIH0pOwogICAgfSwKCiAgICBnZXRDb21wYW55Q3VycmVuY3koKSB7CiAgICAgIEFzc2V0UGVyc29ubmVsU2VydmljZS5nZXRDb21wYW55Q3VycmVuY3kodGhpcy5jdXJyZW50VXNlckRldGFpbHMucHJvZmlsZS5vcmdhbml6YXRpb25JZCkudGhlbihyZXMgPT4gewogICAgICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgIGxldCBpbmRleCA9IHRoaXMuY3VycmVuY3lPcHRpb24uZmluZEluZGV4KGMgPT4gYy52YWx1ZSA9PT0gcmVzLmRhdGEuY3VycmVuY3kpOwogICAgICAgICAgdGhpcy5jdXJyZW5jeSA9IHRoaXMuY3VycmVuY3lPcHRpb25baW5kZXhdLmxhYmVsOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZXJyID0+IHsKICAgICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgICB9KTsKICAgIH0sCgogICAgZWRpdFByZWZlcmVuY2UoKSB7CiAgICAgIHRoaXMuJHYuY3VycmVuY3kuJHRvdWNoKCk7CgogICAgICBpZiAodGhpcy4kdi5jdXJyZW5jeS4kaW52YWxpZCkgewogICAgICAgIHJldHVybiB0aGlzLnNob3dUb2FzdCgiUGxlYXNlIGZpbGwgYWxsIHJlcXVpcmVkIGZpZWxkcyIsICJ3YXJuaW5nIik7CiAgICAgIH0KCiAgICAgIHRoaXMubG9hZGVyRmxhZyA9IHRydWU7CiAgICAgIGxldCByZXF1ZXN0T2JqZWN0ID0gewogICAgICAgIHV1aWQ6IHRoaXMuY3VycmVudFVzZXJEZXRhaWxzLnByb2ZpbGUub3JnYW5pemF0aW9uSWQsCiAgICAgICAgY3VycmVuY3k6IHRoaXMuY3VycmVuY3kKICAgICAgfTsKICAgICAgQXNzZXRQZXJzb25uZWxTZXJ2aWNlLmNyZWF0ZUN1cnJlbmN5KHJlcXVlc3RPYmplY3QpLnRoZW4ocmVzID0+IHsKICAgICAgICB0aGlzLmxvYWRlckZsYWcgPSBmYWxzZTsKCiAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgdGhpcy5zaG93VG9hc3QoIkN1cnJlbmN5IFNhdmVkIFN1Y2Nlc3NmdWxseSEiLCAic3VjY2VzcyIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLnNob3dUb2FzdCgiU2F2aW5nIEN1cnJlbmN5IEZhaWxlZCIsICJlcnJvciIpOwogICAgICAgIH0KICAgICAgfSkuY2F0Y2goZXJyID0+IHsKICAgICAgICB0aGlzLmxvYWRlckZsYWcgPSBmYWxzZTsKICAgICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgICAgIHRoaXMuc2hvd1RvYXN0KCJTYXZpbmcgQ3VycmVuY3kgRmFpbGVkIiwgImVycm9yIik7CiAgICAgIH0pOwogICAgfSwKCiAgICBzaG93VG9hc3QobWVzc2FnZSwgdHlwZSkgewogICAgICB0aGlzLnRvYXN0TWVzc2FnZSA9IG1lc3NhZ2U7CiAgICAgIHRoaXMudG9hc3RUeXBlID0gdHlwZTsKICAgICAgdGhpcy50b2FzdEZsYWcrKzsKICAgIH0KCiAgfSwKICBjb21wdXRlZDogewogICAgYmdJbWcoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgYmFja2dyb3VuZDogInVybCgiICsgdGhpcy5wcm9maWxlSW1hZ2UgKyAiKSIsCiAgICAgICAgImJhY2tncm91bmQtc2l6ZSI6ICJjb250YWluIiwKICAgICAgICAib2JqZWN0LWZpdCI6ICJmaWxsIgogICAgICB9OwogICAgfQoKICB9LAoKICBtb3VudGVkKCkgewogICAgZG9jdW1lbnQudGl0bGUgPSB0aGlzLiRyb3V0ZS5tZXRhLnRpdGxlOwogICAgdGhpcy5jdXJyZW50VXNlckRldGFpbHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJjdXJyZW50VXNlckRldGFpbHMiKSk7CiAgICB0aGlzLmlzQWRtaW4gPSB0aGlzLmN1cnJlbnRVc2VyRGV0YWlscy5hdXRob3JpdGllcy5pbmNsdWRlcygiUk9MRV9BRE1JTiIpOwoKICAgIGlmICh0aGlzLmlzQWRtaW4pIHsKICAgICAgdGhpcy5mZXRjaE9yZ2FuaXphdGlvblVzZXJzKCk7CiAgICB9CgogICAgdGhpcy5nZXREYXRhKCk7CiAgICB0aGlzLmdldENvbXBhbnlDdXJyZW5jeSgpOwogICAgY291bnRyaWVzQnlDdXJyZW5jeS5tYXAoaXRlbSA9PiB7CiAgICAgIHRoaXMuY3VycmVuY3lPcHRpb24ucHVzaCh7CiAgICAgICAgbGFiZWw6IGl0ZW0uY291bnRyeSwKICAgICAgICB2YWx1ZTogaXRlbS5jdXJyZW5jeV9jb2RlCiAgICAgIH0pOwogICAgfSk7CiAgfSwKCiAgdmFsaWRhdGlvbnM6IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB7CiAgICAgIGN1cnJlbmN5OiB7CiAgICAgICAgcmVxdWlyZWQKICAgICAgfSwKICAgICAgdXNyT2JqOiB7CiAgICAgICAgZmlyc3ROYW1lOiB7CiAgICAgICAgICByZXF1aXJlZAogICAgICAgIH0sCiAgICAgICAgbGFzdE5hbWU6IHsKICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgfSwKICAgICAgICBlbWFpbDogewogICAgICAgICAgZW1haWwsCiAgICAgICAgICByZXF1aXJlZAogICAgICAgIH0sCiAgICAgICAgY29udGFjdE51bWJlcjogewogICAgICAgICAgcmVxdWlyZWQKICAgICAgICB9LAogICAgICAgIGNpdHk6IHsKICAgICAgICAgIHJlcXVpcmVkCiAgICAgICAgfSwKICAgICAgICBhZGRyZXNzOiB7CiAgICAgICAgICByZXF1aXJlZAogICAgICAgIH0sCiAgICAgICAgY291bnRyeTogewogICAgICAgICAgcmVxdWlyZWQKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGNvbXBhbnlJbmZvOiB7CiAgICAgICAgbmFtZTogewogICAgICAgICAgcmVxdWlyZWQKICAgICAgICB9LAogICAgICAgIGVtYWlsOiB7CiAgICAgICAgICByZXF1aXJlZCwKICAgICAgICAgIGVtYWlsCiAgICAgICAgfSwKICAgICAgICBjb250YWN0OiB7CiAgICAgICAgICByZXF1aXJlZAogICAgICAgIH0sCiAgICAgICAgd2Vic2l0ZTogewogICAgICAgICAgcmVxdWlyZWQKICAgICAgICB9CiAgICAgIH0KICAgIH07CiAgfQp9Ow=="},null]}