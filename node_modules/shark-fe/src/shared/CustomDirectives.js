
import Vue from 'vue';

Vue.directive("color", function (el, binding, vnode) {
  el.style.color = binding.value;
});

Vue.directive("grid", function (el, binding, vnode) {
  el.style.display = "grid"
  if (binding.value) {
    el.style.gridTemplateColumns = "repeat(" + binding.value + ", 1fr)";
  }
  else {
    el.style.gridTemplateColumns = "repeat(12, 1fr)";
  }
});

Vue.directive("grid-gap", function (el, binding, vnode) {

  el.style.gridGap = binding.value + "px";

});

Vue.directive('click-outside', {
  bind: function (el, binding, vnode) {
    el.clickOutsideEvent = function (event) {
      if (!(el == event.target || el.contains(event.target))) {
        vnode.context[binding.expression](event);
      }
    };
    document.body.addEventListener('click', el.clickOutsideEvent)
  },
  unbind: function (el) {
    document.body.removeEventListener('click', el.clickOutsideEvent)
  },
});

Vue.directive('click-outside-el', {
  bind: function (el, binding, vnode) {
    el.clickOutsideEvent = function (event) {
      if (!(el == event.target || el.contains(event.target))) {
        vnode.context[binding.expression](event);
      }
    };
    window.addEventListener('click', el.clickOutsideEvent)
  },
  unbind: function (el) {
    window.removeEventListener('click', el.clickOutsideEvent)
  },
});
Vue.directive("padding", function (el, binding, vnode) {
  if (binding.value) {
    el.style.padding = binding.value;
  }
});
Vue.directive("padding-left", function (el, binding, vnode) {

  if (binding.value) {
    el.style.paddingLeft = binding.value + "px";
  }
});
Vue.directive("padding-right", function (el, binding, vnode) {
  if (binding.value) {
    el.style.paddingRight = binding.value + "px";
  }
});
Vue.directive("padding-top", function (el, binding, vnode) {
  if (binding.value) {
    el.style.paddingTop = binding.value + "px";
  }
});
Vue.directive("padding-bottom", function (el, binding, vnode) {
  if (binding.value) {
    el.style.paddingBottom = binding.value + "px";
  }
});

Vue.directive("padding-x", function (el, binding, vnode) {
  if (binding.value) {
    el.style.paddingLeft = binding.value + "px";
    el.style.paddingRight = binding.value + "px";
  }
});
Vue.directive("padding-y", function (el, binding, vnode) {
  if (binding.value) {
    el.style.paddingTop = binding.value + "px";
    el.style.paddingBottom = binding.value + "px";
  }
});

Vue.directive("margin", function (el, binding, vnode) {
  if (binding.value) {
    el.style.margin = binding.value;
  }
});
Vue.directive("margin-left", function (el, binding, vnode) {

  if (binding.value) {
    el.style.marginLeft = binding.value + "px";
  }
});
Vue.directive("margin-right", function (el, binding, vnode) {
  if (binding.value) {
    el.style.marginRight = binding.value + "px";
  }
});
Vue.directive("margin-top", function (el, binding, vnode) {
  if (binding.value) {
    el.style.marginTop = binding.value + "px";
  }
});
Vue.directive("margin-bottom", function (el, binding, vnode) {
  if (binding.value) {
    el.style.marginBottom = binding.value + "px";
  }
});
Vue.directive("margin-x", function (el, binding, vnode) {
  if (binding.value) {
    el.style.marginLeft = binding.value + "px";
    el.style.marginRight = binding.value + "px";
  }
});
Vue.directive("margin-y", function (el, binding, vnode) {
  if (binding.value) {
    el.style.marginTop = binding.value + "px";
    el.style.marginBottom = binding.value + "px";
  }
});

Vue.directive("width", function (el, binding, vnode) {
  if (binding.value) {
    el.style.width = binding.value + "px";
  }
});
Vue.directive("max-width", function (el, binding, vnode) {
  if (binding.value) {
    el.style.maxWidth = binding.value + "px";
  }
});
Vue.directive("min-width", function (el, binding, vnode) {
  if (binding.value) {
    el.style.minWidth = binding.value + "px";
  }
});

Vue.directive("height", function (el, binding, vnode) {
  if (binding.value) {
    el.style.height = binding.value + "px";
  }
});

Vue.directive("max-height", function (el, binding, vnode) {
  if (binding.value) {
    el.style.maxHeight = binding.value + "px";
  }
});

Vue.directive("min-height", function (el, binding, vnode) {
  if (binding.value) {
    el.style.minHeight = binding.value + "px";
  }
});